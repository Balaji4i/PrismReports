--------------------------------------------------------
--  DDL for Package Body XXPRISM_REPORT_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "XXPRISM_REPORT_PKG" 
IS 
  FUNCTION XXPRISM_RESERVATION_CONTRACT(    p_unit_num IN VARCHAR2,
    p_property_Id IN VARCHAR2) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(p_unit_num); 
      dbms_output.Put_line(p_property_Id); 

      OPEN l_query_ref FOR 

SELECT 
  xpm.property_name,
  xbh.status,
  xpu.unit_name,
  (select LOOKUP_VALUE_NAME_DISP 
  from xxfnd_lookup_v 
  where LOOKUP_VALUE_NAME=xpu.unit_type 
  AND LOOKUP_TYPE_NAME = 'UNIT_TYPE') unit_type,
  XPA.VALUE UNIT_AREA,
  xpr.RESER_TEMPLATE_CODE,
  xpu.floor_number,
  xso.org_name bu_name,
  xcc.MOBILE_NUMBER,
  xcc.PHONE_NUMBER,
  xcc.FAX_NUMBER,
  xcc.EMAIL_ID,
  xcc.PASSPORT_NUMBER,
  xcs.address1,
  xcs.address2,
  xcs.address3,
  xcs.city,
  xcs.postal_code,
  xoh.agent_name,
  xoh.agency_name,
  (select LOOKUP_VALUE_NAME_DISP 
  from xxfnd_lookup_v 
  where LOOKUP_VALUE_NAME=xcs.country  
  AND LOOKUP_TYPE_NAME = 'COUNTRY') country,
  xba.bank_account_num,
  xba.iban,
  xba.branch_name,
  xba.swift_code,
  xc.customer_name,
  
  (SELECT COUNT(carpark_id)
  FROM xxpm_property_carparks xpc
  WHERE xpc.unit_id = xbd.unit_id
  ) tot_car_park,
  NVL(XBD.BOOKING_AMOUNT,0) + NVL(XBD.TAX_AMOUNT,0) - NVL(XBD.DISC_AMOUNT,0) purchase_amt,
  CURSOR
  (
 SELECT INSTALLMENT_TYPE,
    INSTALLMENT_PCT,
    BASEAMOUNT INSTALLMENT_AMOUNT,
	X.LOOKUP_VALUE_NAME_DISP INSTALLMENT_EVENT,
    SEQ_NUMBER
  FROM XXPM_BOOKING_MILESTONES XOMD,
       XXFND_LOOKUP_V X
  WHERE 1=1
  AND xbh.BOOKING_HDR_ID  = XOMD.BOOKING_HDR_ID
  AND LOOKUP_VALUE_NAME   = XOMD.INSTALLMENT_TYPE
  AND LOOKUP_TYPE_NAME IN ('MILESTONE_INSTALLMENT')
  -- AND LOOKUP_TYPE_NAME IN ('BOOKING_EVENT', 'MILESTONE_INSTALLMENT')
--  AND XOMD.BOOKING_HDR_ID=2405
  ORDER BY SEQ_NUMBER
  ) PAYMENT_PLAN
FROM XXPM_BOOKING_HEADER XBH,
  XXPM_BOOKING_DETAIL XBD,
  XXPM_BOOKING_CUSTOMER XBC,
  xxpm_property_units xpu,
  xxpm_property_master xpm,
  XXPM_PROPERTY_AREA XPA,
  xxpm_property_reservation xpr,
  xxstg_organizations xso,
  xxstg_locations xl,
  xxstg_customer xc,
  xxstg_cust_contacts xcc,
  xxstg_cust_sites xcs,
  xxpm_property_escrow xpe,
  xxstg_bank_accounts xba,
  XXPM_OFFER_HEADER XOH
  
  
WHERE XBH.BOOKING_HDR_ID = XBD.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID   = XBC.BOOKING_HDR_ID
AND XBD.UNIT_ID          = XPU.UNIT_ID(+)
AND XBH.PROPERTY_ID      = XPM.PROPERTY_ID(+)
AND XPU.UNIT_ID          = XPA.UNIT_ID(+)
AND xpm.property_id      = xpr.property_id(+)
AND XBH.ORG_ID           = xso.ORG_ID(+)
AND xpm.location_id      = xl.loc_id (+)
AND xbc.cust_id          = xc.cust_id (+)
AND xc.cust_id           = xcc.cust_id(+)
AND xc.cust_id           = xcs.cust_id(+)
AND xbh.org_id           = xcs.org_id(+)
AND xbh.property_id      = xpe.property_id (+)
AND xbd.BUILDING_ID      = xpe.build_id (+)
AND xpe.bank_acnt_id     = xba.bank_acnt_id (+)
AND XBH.OFFER_HDR_ID   	 = XOH.OFFER_HDR_ID(+)
AND XBC.PRIMARY_YN		 = 'Y'

AND xbh.status           = 'APR'
AND trim(xpu.UNIT_NUMBER) LIKE '%'
   ||p_unit_num
   ||'%'

AND xpr.RESER_TEMPLATE_CODE = p_property_Id;


      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_RESERVATION_CONTRACT; 

    FUNCTION XXPRISM_RECEIPT_REPORT(P_RECP_NUM IN VARCHAR2)
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB;
	LN_BLOCKING_CNT NUMBER;
	LN_BOOKING_CNT NUMBER;
	IN_NULL NUMBER;
  BEGIN 
      dbms_output.Put_line(P_RECP_NUM); 

		SELECT COUNT(*) 
        INTO LN_BLOCKING_CNT
        FROM XXPM_RECEIPT XR,XXPM_BLOCK_HEADER XBH
       WHERE XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER)
         AND XBH.BLOCK_ID  = XR.SOURCE_FUNC_REF_ID
		 AND XR.SOURCE_FUNC_ID IS NOT NULL; 

		 SELECT COUNT(*) 
        INTO LN_BOOKING_CNT
        FROM XXPM_RECEIPT XR,XXPM_BOOKING_HEADER XBH
       WHERE XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER)
         AND XBH.BOOKING_HDR_ID  = XR.SOURCE_FUNC_REF_ID
         AND XR.SOURCE_FUNC_ID IS NOT NULL; 	

        SELECT COUNT(*) 
        INTO IN_NULL
        FROM XXPM_RECEIPT XR
       WHERE XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER)
         AND XR.SOURCE_FUNC_ID IS NULL;		 

	  IF LN_BLOCKING_CNT > 0 THEN 

      OPEN l_query_ref FOR 

              SELECT (CASE WHEN XBH.BLOCK_TYPE = 'SBT' THEN  XBH.BLOCK_NUMBER END) BLOCK_NUMBER,
			 NULL BOOKING_NUMBER,
            CASE WHEN XBH.BLOCK_TYPE IN('ROF','QR') THEN  XBH.BLOCK_NUMBER END RESEV_NUMBER,
			XPM.PROPERTY_NAME,
			XPB.BUILD_NAME,
			XPU.UNIT_NAME,
            XR.ORG_ID,
			(select trim(replace(org_name,'BU','')) name from XXSTG_ORGANIZATIONS  where XR.ORG_ID = ORG_ID	) bu_name,
			(SELECT CUSTOMER_NAME FROM XXSTG_CUSTOMER WHERE CUST_ID = XR.CUST_ID) CUSTOMER_NAME,
            (SELECT LOOKUP_VALUE_NAME_DISP  FROM XXFND_LOOKUP_V  WHERE LOOKUP_TYPE_NAME LIKE '%CHARGE_TYPE%' AND LOOKUP_VALUE_NAME =XR.RCT_TYPE) REC_TYPE,
			CURSOR
			(SELECT SOURCE_FUNC_REF_ID,
			RECEIPT_NUMBER,
			RECEIPT_DATE,
			PAY_REF_NUMBER,
			PAY_REC_DATE PAY_REF_DATE,
			BANK_NAME,
			BANK_BRANCH_NAME,
			CURRENCY_CODE,
			regexp_substr (DRAWN_BY,'[^@]+') RECE_BY,
			NVL(RECEIVED_AMOUNT,0) AMOUNT,
			nvl(xr.MODE_OF_RECEIPT,(select RECEIPT_METHOD_NAME from xxstg_receipt_method 
															where 1=1
															and xr.ORG_ID = org_id
															and xr.PAY_MODE = RECEIPT_METHOD_ID
															and xr.REMIT_BANK_ACCT_USE_ID = REMIT_BANK_ACCT_USE_ID ))PAY_MODE,
			
			xr.CREATED_BY,
			trunc(xr.CREATION_DATE) CREATION_DATE
			FROM XXPM_RECEIPT 
			WHERE RECEIPT_ID = XR.RECEIPT_ID )RECE,
			(select project_name from xxstg_projects where XR.ORG_ID = ORG_ID) project_name,
			cursor 
			( select LOOKUP_VALUE_NAME_DISP INSTALLMENT
            from 
            XXPM_BOOKING_MILESTONES XBM,
            XXFND_LOOKUP_V l,
            XXPM_RECEIPT_DETAILS Xrd
            where 1=1
            AND XR.RECEIPT_ID         = xrd.RECEIPT_ID
            AND XR.SOURCE_FUNC_REF_ID = XBM.SOURCE_FUNC_REF_ID
            AND xrd.invoice_id        = xbm.invoice_id
            AND XBM.INSTALLMENT_TYPE  = l.LOOKUP_VALUE_NAME   
            AND l.LOOKUP_TYPE_NAME    = 'MILESTONE_INSTALLMENT') INSTALLMENT
			FROM XXPM_RECEIPT XR,
			XXPM_BLOCK_HEADER XBH,
			XXPM_BLOCK_DETAIL XBD,
			XXPM_PROPERTY_MASTER XPM,
			XXPM_PROPERTY_BUILDINGS XPB,
			XXPM_PROPERTY_UNITS XPU
			 

			WHERE 1             =1
			AND XR.SOURCE_FUNC_REF_ID = XBH.BLOCK_ID
			AND XBH.BLOCK_ID    = XBD.BLOCK_ID(+)
			AND XBD.PROPERTY_ID = XPM.PROPERTY_ID(+)
			AND XBD.BUILD_ID    = XPB.BUILD_ID(+)
			AND XBD.UNIT_ID     = XPU.UNIT_ID(+) 
           	
			AND XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER);

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

	  END IF; 

	  IF LN_BOOKING_CNT > 0 THEN 

      OPEN l_query_ref FOR 

              SELECT 
			  NULL BLOCK_NUMBER,
			  XBH.BOOKING_NUMBER,
			  NULL RESEV_NUMBER,
			XPM.PROPERTY_NAME,
			XPB.BUILD_NAME,
			XPU.UNIT_NAME,
            XR.ORG_ID,
			(select trim(replace(org_name,'BU','')) name from XXSTG_ORGANIZATIONS  where XR.ORG_ID = ORG_ID	) bu_name,
			(SELECT CUSTOMER_NAME FROM XXSTG_CUSTOMER WHERE CUST_ID = XR.CUST_ID) CUSTOMER_NAME,
      (SELECT LOOKUP_VALUE_NAME_DISP  FROM XXFND_LOOKUP_V  WHERE LOOKUP_TYPE_NAME LIKE '%CHARGE_TYPE%' AND LOOKUP_VALUE_NAME =XR.RCT_TYPE) REC_TYPE,
			CURSOR
			(SELECT SOURCE_FUNC_REF_ID,
			RECEIPT_NUMBER,
			RECEIPT_DATE,
			PAY_REF_NUMBER,
			PAY_REC_DATE PAY_REF_DATE,
			BANK_NAME,
			BANK_BRANCH_NAME,
			CURRENCY_CODE,
			regexp_substr (DRAWN_BY,'[^@]+') RECE_BY,
			NVL(RECEIVED_AMOUNT,0) AMOUNT,
			nvl(xr.MODE_OF_RECEIPT,(select RECEIPT_METHOD_NAME from xxstg_receipt_method 
															where 1=1
															and xr.ORG_ID = org_id
															and xr.PAY_MODE = RECEIPT_METHOD_ID
															and xr.REMIT_BANK_ACCT_USE_ID = REMIT_BANK_ACCT_USE_ID ))PAY_MODE,
			
			xr.CREATED_BY,
			trunc(xr.CREATION_DATE) CREATION_DATE
			FROM XXPM_RECEIPT 
			WHERE RECEIPT_ID = XR.RECEIPT_ID )RECE,
			(select project_name from xxstg_projects where XR.ORG_ID = ORG_ID) project_name,
			cursor 
			(select LOOKUP_VALUE_NAME_DISP INSTALLMENT
            from 
            XXPM_BOOKING_MILESTONES XBM,
            XXFND_LOOKUP_V l,
            XXPM_RECEIPT_DETAILS Xrd
            where 1=1
            AND XR.RECEIPT_ID         = xrd.RECEIPT_ID
            AND XR.SOURCE_FUNC_REF_ID = XBM.SOURCE_FUNC_REF_ID
            AND xrd.invoice_id        = xbm.invoice_id
            AND XBM.INSTALLMENT_TYPE  = l.LOOKUP_VALUE_NAME   
            AND l.LOOKUP_TYPE_NAME    = 'MILESTONE_INSTALLMENT') INSTALLMENT
			FROM XXPM_RECEIPT XR,
			XXPM_BOOKING_HEADER XBH,
			XXPM_BOOKING_DETAIL XBD,
			XXPM_PROPERTY_MASTER XPM,
			XXPM_PROPERTY_BUILDINGS XPB,
			XXPM_PROPERTY_UNITS XPU

			WHERE 1             =1
			AND XBH.BOOKING_HDR_ID     = XR.SOURCE_FUNC_REF_ID
			AND XBH.BOOKING_HDR_ID     = XBD.BOOKING_HDR_ID(+)
			AND XBD.PROPERTY_ID        = XPM.PROPERTY_ID(+)
			AND XBD.BUILDING_ID        = XPB.BUILD_ID(+)
			AND XBD.UNIT_ID            = XPU.UNIT_ID(+)			  		
      AND XR.RECEIPT_NUMBER      = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER);

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

	  END IF; 


	  IF IN_NULL > 0 THEN 

      OPEN l_query_ref FOR 

              SELECT
               NULL BLOCK_NUMBER,
			  XBH.BOOKING_NUMBER,

              NULL RESEV_NUMBER,
			XPM.PROPERTY_NAME,
			XPB.BUILD_NAME,
			XPU.UNIT_NAME,
            XR.ORG_ID,
			(select trim(replace(org_name,'BU','')) name from XXSTG_ORGANIZATIONS  where XR.ORG_ID = ORG_ID	) bu_name,
			(SELECT CUSTOMER_NAME FROM XXSTG_CUSTOMER WHERE CUST_ID = XR.CUST_ID) CUSTOMER_NAME,
            (SELECT LOOKUP_VALUE_NAME_DISP  FROM XXFND_LOOKUP_V  WHERE LOOKUP_TYPE_NAME LIKE '%CHARGE_TYPE%' AND LOOKUP_VALUE_NAME =XR.RCT_TYPE) REC_TYPE,
			CURSOR
			(SELECT SOURCE_FUNC_REF_ID,
			RECEIPT_NUMBER,
			RECEIPT_DATE,
			PAY_REF_NUMBER,
			PAY_REC_DATE PAY_REF_DATE,
			BANK_NAME,
			BANK_BRANCH_NAME,
			CURRENCY_CODE,
			regexp_substr (DRAWN_BY,'[^@]+') RECE_BY,
			NVL(RECEIVED_AMOUNT,0) AMOUNT,
			nvl(xr.MODE_OF_RECEIPT,(select RECEIPT_METHOD_NAME from xxstg_receipt_method 
															where 1=1
															and xr.ORG_ID = org_id
															and xr.PAY_MODE = RECEIPT_METHOD_ID
															and xr.REMIT_BANK_ACCT_USE_ID = REMIT_BANK_ACCT_USE_ID ))PAY_MODE,
			
			xr.CREATED_BY,
			trunc(xr.CREATION_DATE) CREATION_DATE
			FROM XXPM_RECEIPT 
			WHERE RECEIPT_ID = XR.RECEIPT_ID )RECE,
			(select project_name from xxstg_projects where XR.ORG_ID = ORG_ID) project_name,
			cursor 
			(select LOOKUP_VALUE_NAME_DISP INSTALLMENT
            from 
            XXPM_BOOKING_MILESTONES XBM,
            XXFND_LOOKUP_V l,
            XXPM_RECEIPT_DETAILS Xrd
            where 1=1
            AND XR.RECEIPT_ID         = xrd.RECEIPT_ID
            AND XR.SOURCE_FUNC_REF_ID = XBM.SOURCE_FUNC_REF_ID
            AND xrd.invoice_id        = xbm.invoice_id
            AND XBM.INSTALLMENT_TYPE  = l.LOOKUP_VALUE_NAME   
            AND l.LOOKUP_TYPE_NAME    = 'MILESTONE_INSTALLMENT') INSTALLMENT
			FROM XXPM_RECEIPT XR,
            XXPM_RECEIPT_DETAILS XRD,
            XXPM_INVOICE_HEADER XIH,
			XXPM_BOOKING_HEADER XBH,
			XXPM_BOOKING_DETAIL XBD,
			XXPM_PROPERTY_MASTER XPM,
			XXPM_PROPERTY_BUILDINGS XPB,
			XXPM_PROPERTY_UNITS XPU

			WHERE 1             =1
            AND XR.RECEIPT_ID          =XRD.RECEIPT_ID(+)
            AND XRD.INVOICE_ID         = XIH.INVOICE_ID(+)
			AND XIH.BOOKING_ID         = XBH.BOOKING_HDR_ID     
			AND XBH.BOOKING_HDR_ID     = XBD.BOOKING_HDR_ID(+)
			AND XBD.PROPERTY_ID        = XPM.PROPERTY_ID(+)
			AND XBD.BUILDING_ID        = XPB.BUILD_ID(+)
			AND XBD.UNIT_ID            = XPU.UNIT_ID(+)			  		
      AND XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER);

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

	  END IF; 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_RECEIPT_REPORT; 


  FUNCTION XXPRISM_AR_DETAIL(P_PROJ_NAME IN VARCHAR2
  , P_PROP_NAME IN VARCHAR2
  , P_DATE IN DATE
  ) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
       dbms_output.Put_line(P_PROJ_NAME); 
      dbms_output.Put_line(P_PROP_NAME); 
      dbms_output.Put_line(P_DATE); 

      OPEN l_query_ref FOR 

WITH BOOKING_DTL AS
  (SELECT XBM.MS_DTL_ID,
    XBH.BOOKING_HDR_ID,
    XBH.BOOKING_NUMBER,
    XP.PROJECT_NUMBER ,
    XP.PROJECT_NAME,
    XPM.PROPERTY_ID,
    XPM.PROPERTY_NAME,
    XPU.UNIT_NAME UNIT_NO,
    XC.CUSTOMER_NAME,
    XBD.BOOKING_RATE UNIT_COST,
    XPA.VALUE UNIT_AREA,
    XPA.UOM UOM,
    XBD.BOOKING_RATE SQFT_PRICE,
    CASE
      WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
      THEN
        CASE
          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
          THEN XLV.LOOKUP_VALUE_NAME_DISP
            ||'-'
            ||XLV1.LOOKUP_VALUE_NAME_DISP
          ELSE XLV.LOOKUP_VALUE_NAME_DISP
            ||'-'
            ||XMD.INSTALLMENT_EVENT
        END
      ELSE
        CASE
          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
          THEN XLV.LOOKUP_VALUE_NAME_DISP
          ELSE XLV.LOOKUP_VALUE_NAME_DISP
        END
    END EVENT_NAME,
    XBM.INSTALLMENT_PCT INST_PCT_AVG,
    NVL(XBM.INSTALLMENT_AMOUNT_R, NVL(XBM.INSTALLMENT_AMOUNT,0)) INST_AMT ,
    XP.COMPLETION_DATE,
    XPU.STATUS PROPERTY_STATUS,
    XBH.CREATED_BY,
    XBM.PERIOD_DURATION,
    XBM.DUE_DATE,
    XBM.INSTALLMENT_TYPE,
    XBM.INVOICE_ID,
	XBM.SEQ_NUMBER display_order
  FROM XXPM_BOOKING_HEADER XBH,
    XXPM_BOOKING_MILESTONES XBM,
    XXPM_BOOKING_DETAIL XBD,
    XXPM_BOOKING_CUSTOMER XBC,
    XXPM_PROPERTY_MASTER XPM,
    XXPM_PROPERTY_UNITS XPU,
    XXPM_PROPERTY_AREA XPA,
    XXPM_MILESTONE_DTL XMD,
    XXSTG_PROJECTS XP,
    XXSTG_CUSTOMER XC,
    XXFND_LOOKUP_TYPES XLT,
    XXFND_LOOKUP_TYPES XLT1,
    XXFND_LOOKUP_VALUES XLV,
    XXFND_LOOKUP_VALUES XLV1,
	(SELECT XPC.BOOKING_ID,XPC.CANCEL_DATE FROM XXPM_CANCELLATION XPC where XPC.CANCEL_TYPE='CN') XPC
  WHERE XBH.BOOKING_HDR_ID  = XBM.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID(+)
  AND XBD.UNIT_ID           = XPU.UNIT_ID(+)
  AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID(+)
  AND XPU.UNIT_ID           = XPA.UNIT_ID(+)
  AND XPM.PROJECT_ID        = XP.PROJ_ID(+)
  AND XPM.ORG_ID            = XP.ORG_ID(+)
  AND XBC.CUST_ID           = XC.CUST_ID(+)
  AND XBM.MS_DTL_ID         = XMD.MS_DTL_ID(+)
  AND XBM.INSTALLMENT_TYPE  = XLV.LOOKUP_VALUE_NAME(+)
  AND XBM.INSTALLMENT_EVENT = XLV1.LOOKUP_VALUE_NAME(+)
  AND XLT.LOOKUP_TYPE_ID    = XLV.LOOKUP_TYPE_ID(+)
  AND XLT1.LOOKUP_TYPE_ID   = XLV1.LOOKUP_TYPE_ID(+)
  AND XBH.BOOKING_HDR_ID    = XPC.BOOKING_ID(+)
  AND XLT.LOOKUP_TYPE_NAME  = 'MILESTONE_INSTALLMENT'
  AND XLT1.LOOKUP_TYPE_NAME = 'BOOKING_EVENT'
  AND xbc.PRIMARY_YN        = 'Y'
  AND XBH.USAGE             = 'S'
  AND XBH.ACTIVE_YN         = 'Y'
  AND XPA.AREA(+)           = 'CHARGE'
  AND XBM.MILESTONE_TYPE    = 'MS'
  -- AND XBH.STATUS            = 'APR'
  AND XBH.BOOKING_DATE     <= P_DATE
  AND NVL(XPC.CANCEL_DATE,SYSDATE)    >= P_DATE ---Added on 23SEP2020
AND XBM.INSTALLMENT_PCT > 0
  ),
  BOOKING_DTL_1 AS
  (SELECT XBM.MS_DTL_ID,
    XBH.BOOKING_HDR_ID,
    XBH.BOOKING_NUMBER,
    XP.PROJECT_NUMBER ,
    XP.PROJECT_NAME,
    XPM.PROPERTY_ID,
    XPM.PROPERTY_NAME,
    XPU.UNIT_NAME UNIT_NO,
    XC.CUSTOMER_NAME,
    XBD.BOOKING_RATE UNIT_COST,
    XPA.VALUE UNIT_AREA,
    XPA.UOM UOM,
    XBD.BOOKING_RATE SQFT_PRICE,
    CASE
      WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
      THEN
        CASE
          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
          THEN XLV.LOOKUP_VALUE_NAME_DISP
            ||'-'
            ||XLV1.LOOKUP_VALUE_NAME_DISP
          ELSE XLV.LOOKUP_VALUE_NAME_DISP
            ||'-'
            ||XMD.INSTALLMENT_EVENT
        END
      ELSE
        CASE
          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
          THEN XLV.LOOKUP_VALUE_NAME_DISP
          ELSE XLV.LOOKUP_VALUE_NAME_DISP
        END
    END EVENT_NAME,
    XBM.INSTALLMENT_PCT INST_PCT_AVG,
    NVL(XBM.INSTALLMENT_AMOUNT,0) INST_AMT ,
    XP.COMPLETION_DATE,
    XPU.STATUS PROPERTY_STATUS,
    XBH.CREATED_BY,
    XBM.PERIOD_DURATION,
    XBM.DUE_DATE,
    XBM.INSTALLMENT_TYPE,
    XBM.INVOICE_ID,
	XBM.SEQ_NUMBER display_order,
    NVL(xpc.REFUND_AMOUNT,0) REFUND_AMOUNT,
    NVL(xpc.FORFIET_AMOUNT,0) FORFIET_AMOUNT,
    NVL(xpc.ADJUSTMENT_AMT,0) ADJUSTMENT_AMT
  FROM XXPM_BOOKING_HEADER XBH,
    XXPM_BOOKING_MILESTONES XBM,
    XXPM_BOOKING_DETAIL XBD,
    XXPM_BOOKING_CUSTOMER XBC,
    XXPM_PROPERTY_MASTER XPM,
    XXPM_PROPERTY_UNITS XPU,
    XXPM_PROPERTY_AREA XPA,
    XXPM_MILESTONE_DTL XMD,
    XXSTG_PROJECTS XP,
    XXSTG_CUSTOMER XC,
    XXFND_LOOKUP_TYPES XLT,
    XXFND_LOOKUP_TYPES XLT1,
    XXFND_LOOKUP_VALUES XLV,
    XXFND_LOOKUP_VALUES XLV1,
    xxpm_cancellation xpc
  WHERE XBH.BOOKING_HDR_ID   = XBM.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID     = XBD.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID     = XBC.BOOKING_HDR_ID(+)
  AND XBD.UNIT_ID            = XPU.UNIT_ID(+)
  AND XBH.PROPERTY_ID        = XPM.PROPERTY_ID(+)
  AND XPU.UNIT_ID            = XPA.UNIT_ID(+)
  AND XPM.PROJECT_ID         = XP.PROJ_ID(+)
  AND XPM.ORG_ID             = XP.ORG_ID(+)
  AND XBC.CUST_ID            = XC.CUST_ID(+)
  AND XBM.MS_DTL_ID          = XMD.MS_DTL_ID(+)
  AND XBM.INSTALLMENT_TYPE   = XLV.LOOKUP_VALUE_NAME(+)
  AND XBM.INSTALLMENT_EVENT  = XLV1.LOOKUP_VALUE_NAME(+)
  AND XLT.LOOKUP_TYPE_ID     = XLV.LOOKUP_TYPE_ID(+)
  AND XLT1.LOOKUP_TYPE_ID    = XLV1.LOOKUP_TYPE_ID(+)
  AND xbm.source_func_ref_id = xpc.cancel_id(+)
  AND XLT.LOOKUP_TYPE_NAME   = 'MILESTONE_INSTALLMENT'
  AND XLT1.LOOKUP_TYPE_NAME  = 'BOOKING_EVENT'
  AND xbc.PRIMARY_YN         = 'Y'
  AND XBH.USAGE              = 'S'
  AND XBH.ACTIVE_YN          = 'Y'
  AND XPA.AREA(+)            = 'CHARGE'
    --  AND XBM.MILESTONE_TYPE    != 'MS'
  AND XBM.CHARGE_TYPE   = 'CMC'
  -- AND XBH.STATUS            = 'APR'
  AND NVL(XPC.CANCEL_DATE,SYSDATE)    >= P_DATE ---Added on 23SEP2020
  AND XBH.BOOKING_DATE <= P_DATE
  ),
  INV_DTL AS
  (SELECT DISTINCT XIH.BOOKING_ID,
    XIH.INVOICE_ID,
    XIL.INSTALLMENT_TYPE,
    XIH.DUE_DATE,
    XIH.INTERFACE_STATUS STATUS,
    XIH.INVOICE_DATE
  FROM XXPM_INVOICE_HEADER XIH,
    XXPM_INVOICE_LINES XIL
  WHERE XIH.INVOICE_ID          = XIL.INVOICE_ID(+)
  AND (XIH.GL_DATE        <= P_DATE
  OR XIH.GL_DATE          IS NULL)
  AND XIH.INTERFACE_STATUS NOT IN ('ERROR', 'Error')
  ),
  RCT_DTL AS
  (SELECT XRD.INVOICE_ID,
    XRD.RECEIPT_ID ,
    SUM(NVL(XRD.AMOUNT_APPLIED,0)) RECEIVED_AMT,
    XPR.RECEIPT_DATE
  FROM XXPM_RECEIPT_DETAILS XRD,
    XXPM_RECEIPT XPR
  WHERE XRD.RECEIPT_ID          = XPR.RECEIPT_ID(+)
  AND (TRUNC(XRD.GL_DATE) <= P_DATE
  OR TRUNC(XRD.GL_DATE)   IS NULL)
  -- AND (TRUNC(XPR.GL_DATE) <= P_DATE
  -- OR TRUNC(XPR.GL_DATE)   IS NULL)
  AND (XRD.INTERFACE_STATUS = 'Applied'
  OR XRD.INTERFACE_STATUS is null)
  GROUP BY XRD.INVOICE_ID,
    XRD.RECEIPT_ID,
    XPR.RECEIPT_DATE
  )
SELECT BKD.PROPERTY_ID ,
  BKD.PROJECT_NAME,
  BKD.UNIT_NO,
  BKD.CUSTOMER_NAME,
  BKD.UNIT_COST,
  BKD.UNIT_AREA,
  BKD.UOM,
  BKD.EVENT_NAME,
  CASE
    WHEN INV.STATUS IS NULL
    THEN 'Not Invoiced'
    ELSE INITCAP(INV.STATUS)
  END STATUS,
  BKD.INST_PCT_AVG,
  NVL(INV.DUE_DATE , BKD.DUE_DATE) PAY_DUE_DATE,
  NVL(BKD.INST_AMT,0) INST_AMT,
  SUM(NVL(RCT.RECEIVED_AMT,0)) RECEIVED_AMT,
  NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0)) OUTSTANDING_AMT,
  0 FORFIET_AMOUNT,
  NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0)) NET_AMT,
  0 ADJUSTMENT_AMT,
  0 REFUND_AMOUNT,
  CASE
    WHEN INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END DUE_NOW,
  CASE
    WHEN INV.STATUS IS NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END NOT_DUE,
  (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) DUE_DAYS,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 0 AND 30
    AND INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_0_30,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 31 AND 60
    AND INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_31_60,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 61 AND 90
    AND INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_61_90,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 91 AND 120
    AND INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_91_120,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 121 AND 180
    AND INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_121_180,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) > 180
    AND INV.STATUS                                                                                                                                                                     IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_180,
  CASE
    WHEN BKD.PERIOD_DURATION = 'DUE BEFORE COMPLETION'
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END BEFORE_COMPL,
  CASE
    WHEN BKD.PERIOD_DURATION = 'DUE ON COMPLETION'
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END ON_COMPL,
  CASE
    WHEN BKD.PERIOD_DURATION = 'DUE POST COMPLETION'
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AFTER_COMPL,
  BKD.display_order
FROM BOOKING_DTL BKD ,
  INV_DTL INV,
  RCT_DTL RCT
WHERE 1                  = 1
AND BKD.BOOKING_HDR_ID   = INV.BOOKING_ID(+)
AND BKD.INVOICE_ID       = INV.INVOICE_ID(+)
AND BKD.INSTALLMENT_TYPE = INV.INSTALLMENT_TYPE(+)
AND INV.INVOICE_ID       = RCT.INVOICE_ID(+)
  --AND BKD.PROPERTY_ID      = NVL(P_PROP_NAME, BKD.PROPERTY_ID)
AND BKD.PROPERTY_ID = DECODE(P_PROP_NAME,59,BKD.PROPERTY_ID ,P_PROP_NAME)
GROUP BY BKD.PROPERTY_ID ,
  BKD.PROJECT_NAME,
  BKD.UNIT_NO,
  BKD.CUSTOMER_NAME,
  BKD.UNIT_COST,
  BKD.UNIT_AREA,
  BKD.UOM,
  BKD.EVENT_NAME,
  INV.STATUS,
  BKD.INST_PCT_AVG,
  INV.DUE_DATE ,
  BKD.DUE_DATE ,
  BKD.INST_AMT,
  BKD.PERIOD_DURATION,
  BKD.display_order
UNION ALL
SELECT DISTINCT BKD1.PROPERTY_ID ,
  BKD1.PROJECT_NAME,
  BKD1.UNIT_NO,
  BKD1.CUSTOMER_NAME,
  BKD1.UNIT_COST,
  BKD1.UNIT_AREA,
  BKD1.UOM,
  'Credit Memo' EVENT_NAME,
  INV.STATUS STATUS,
  BKD1.INST_PCT_AVG,
  NVL(INV.DUE_DATE , BKD1.DUE_DATE) PAY_DUE_DATE,
  NVL(BKD1.INST_AMT,0) * -1 INST_AMT,
  0 RECEIVED_AMT,
  NVL(BKD1.INST_AMT,0) * -1 OUTSTANDING_AMT,
  BKD1.FORFIET_AMOUNT FORFIET_AMOUNT,
  (NVL(BKD1.INST_AMT,0) * -1) + (BKD1.FORFIET_AMOUNT) + BKD1.ADJUSTMENT_AMT +  BKD1.REFUND_AMOUNT NET_AMT,
  BKD1.ADJUSTMENT_AMT,
  BKD1.REFUND_AMOUNT ,
  NVL(BKD1.INST_AMT,0) * -1 DUE_NOW,
  0 NOT_DUE,
  0 DUE_DAYS,
  0 AMT_0_30,
  0 AMT_31_60,
  0 AMT_61_90,
  0 AMT_91_120,
  0 AMT_121_180,
  0 AMT_180,
  0 BEFORE_COMPL,
  0 ON_COMPL,
  0 AFTER_COMPL,
  BKD1.display_order
FROM BOOKING_DTL_1 BKD1 ,
  INV_DTL INV
WHERE 1                 = 1
AND BKD1.BOOKING_HDR_ID = INV.BOOKING_ID(+)
AND BKD1.INVOICE_ID     = INV.INVOICE_ID
  --AND BKD1.INSTALLMENT_TYPE = INV.INSTALLMENT_TYPE(+)
  --AND BKD1.PROPERTY_ID      = NVL(P_PROP_NAME, BKD1.PROPERTY_ID)
AND BKD1.PROPERTY_ID = DECODE(P_PROP_NAME,59,BKD1.PROPERTY_ID ,P_PROP_NAME)
ORDER BY 1,3, 31; 
  
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_AR_DETAIL; 

FUNCTION XXPRISM_AR_SUMMARY(P_PROJ_NAME IN VARCHAR2
  ,P_PROP_NAME IN VARCHAR2,
  P_DATE IN DATE) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROJ_NAME); 
      dbms_output.Put_line(P_PROP_NAME);
      dbms_output.Put_line(P_DATE);

      OPEN l_query_ref FOR 

SELECT
  PROJECT_NAME,
  CUSTOMER_NAME,
  UNIT_NO,
  UNIT_TYPE,
  SPA_DATE,
  RESER_CONTRACT_DATE,
  SQ_FEET,
  PRICE_PER_SQ,
  FINANCED_BY,
  TRIM(replace(replace(replace(AGENT_NAME,chr(13),''),chr(10),''),chr(9),'')) AGENT_NAME, 
  SUBPROJECT, 
  COUNTRY, 
  SUM(ACTUAL_RECEIPT) ACTUAL_RECEIPT,
  SUM(DISCOUNT_RECEIPT) DISCOUNT_RECEIPT,
  FINANCED_AMNT ,
  SUM(INST_AMT) SPA_AMT,
  SUM(INV_AMT) INST_AMT,
  SUM(RECEIVED_AMT) RECEIVED_AMT,
  SUM(OUTSTANDING_AMT) BALANCE_RECEIVED,
  SUM(DUE_NOW) DUE_NOW,
  SUM(AMT_0_30) amt_0_30,
  SUM(AMT_31_60) amt_31_60,
  SUM(AMT_61_90) amt_61_90,
  SUM(AMT_91_120) amt_90,
  SUM(BEFORE_COMPL) BEFORE_COMPL,
  SUM(ON_COMPL) ON_COMPL,
  SUM(AFTER_COMPL) AFTER_COMPL,
  DECODE (SUM(INST_AMT),0,0,((SUM(RECEIVED_AMT)/SUM(INST_AMT))*100))  RECEI_PERT,
  DECODE (SUM(INST_AMT),0,0,((FINANCED_AMNT/SUM(INST_AMT))*100)) FINANCED_PERT,
  DECODE (SUM(INST_AMT),0,0,((FINANCED_AMNT/SUM(INST_AMT))*100)) PAIDBY_CLIENT
FROM
  (WITH BOOKING_DTL AS
  (SELECT XBM.MS_DTL_ID,
    XBH.BOOKING_HDR_ID,
    XBH.BOOKING_NUMBER,
    XP.PROJECT_NUMBER ,
    XP.PROJECT_NAME,
    XPM.PROPERTY_ID,
    XPM.PROPERTY_NAME,
    XPU.UNIT_NAME UNIT_NO,
    XC.CUSTOMER_NAME,
	XPA.VALUE UNIT_AREA,
    XBD.BOOKING_RATE UNIT_COST,
    XPA.UOM UOM,
    XBD.BOOKING_RATE SQFT_PRICE,
    CASE
      WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
      THEN
        CASE
          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
          THEN XLV.LOOKUP_VALUE_NAME_DISP
            ||'-'
            ||XLV1.LOOKUP_VALUE_NAME_DISP
          ELSE XLV.LOOKUP_VALUE_NAME_DISP
            ||'-'
            ||XMD.INSTALLMENT_EVENT
        END
      ELSE
        CASE
          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
          THEN XLV.LOOKUP_VALUE_NAME_DISP
          ELSE XLV.LOOKUP_VALUE_NAME_DISP
        END
    END EVENT_NAME,
    XBM.INSTALLMENT_PCT INST_PCT_AVG,
    NVL(XBM.INSTALLMENT_AMOUNT,0) INST_AMT ,
    XP.COMPLETION_DATE,
    XPU.STATUS PROPERTY_STATUS,
    XBH.CREATED_BY,
    XBM.PERIOD_DURATION,
    XBM.DUE_DATE,
    XBM.INSTALLMENT_TYPE,
    XBM.INVOICE_ID,
	XPU.UNIT_TYPE,
	XBE_SSD.EVENT_DATE  SPA_DATE,
    XBE_OSR.EVENT_DATE  Reser_contract_date,
	XPA.VALUE Sq_feet,
    (CASE WHEN XPU.STATUS ='BOOK'
          THEN XBD.BOOKING_RATE
          ELSE (select XPL.BASE_PRICE from XXPM_PL_LINES XPL where 1=1
												  AND XPU.UNIT_ID = XPL.UNIT_ID)
    END )price_per_sq,
	 xoh.agent_name,
     XPB.BUILD_NAME SUBPROJECT, 
	(select l.LOOKUP_VALUE_NAME_DISP from xxfnd_lookup_v l,xxstg_cust_sites xcs 
								  where 1=1
								  AND xc.cust_id           	   = xcs.cust_id
								  AND xbh.org_id           	   = xcs.org_id
								  and l.LOOKUP_VALUE_NAME      = xcs.COUNTRY 
								  and l.LOOKUP_TYPE_NAME       = 'COUNTRY'
								  and rownum=1)COUNTRY ,
	XPMGE.ATTRIBUTE1 financed_by,
	XPMGE.MORT_AMOUNT financed_amnt
	  
	   
  FROM 
    XXPM_BOOKING_HEADER XBH,
    XXPM_BOOKING_MILESTONES XBM,
    XXPM_BOOKING_DETAIL XBD,
    XXPM_BOOKING_CUSTOMER XBC,
    XXPM_PROPERTY_MASTER XPM,
    XXPM_PROPERTY_UNITS XPU,
    XXPM_PROPERTY_AREA XPA,
    XXPM_MILESTONE_DTL XMD,
    XXSTG_PROJECTS XP,
    XXSTG_CUSTOMER XC,
    XXFND_LOOKUP_TYPES XLT,
    XXFND_LOOKUP_TYPES XLT1,
    XXFND_LOOKUP_VALUES XLV,
    XXFND_LOOKUP_VALUES XLV1,
	XXPM_OFFER_HEADER XOH,
	XXPM_BOOKING_EVENTS XBE_SSD,
	XXPM_BOOKING_EVENTS XBE_OSR,
	XXPM_PROPERTY_BUILDINGS XPB,
	XXPM_PROPERTY_MORTGAGE XPMGE,
	(SELECT XPC.BOOKING_ID,XPC.CANCEL_DATE FROM XXPM_CANCELLATION XPC where XPC.CANCEL_TYPE='CN') XPC
  WHERE 1=1
  AND XBH.OFFER_HDR_ID   	= XOH.OFFER_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID   	= XBE_SSD.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID   	= XBE_OSR.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID    = XBM.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID(+)
  AND XBD.UNIT_ID           = XPU.UNIT_ID(+)
  AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID(+)
  AND XPU.UNIT_ID           = XPA.UNIT_ID(+)
  AND XPM.PROJECT_ID        = XP.PROJ_ID(+)
  AND XPM.ORG_ID            = XP.ORG_ID(+)
  AND XBC.CUST_ID           = XC.CUST_ID(+)
  AND XBM.MS_DTL_ID         = XMD.MS_DTL_ID(+)
  AND XBM.INSTALLMENT_TYPE  = XLV.LOOKUP_VALUE_NAME(+)
  AND XBM.INSTALLMENT_EVENT = XLV1.LOOKUP_VALUE_NAME(+)
  AND XLT.LOOKUP_TYPE_ID    = XLV.LOOKUP_TYPE_ID(+)
  AND XLT1.LOOKUP_TYPE_ID   = XLV1.LOOKUP_TYPE_ID(+)
  AND XPU.PROPERTY_ID       = XPB.PROPERTY_ID (+)
  AND XPU.BUILD_ID          = XPB.BUILD_ID (+)
  AND XPU.UNIT_ID   	    = XPMGE.UNIT_ID(+)
  AND XBH.BOOKING_HDR_ID    = XPC.BOOKING_ID(+)
  AND XLT.LOOKUP_TYPE_NAME  = 'MILESTONE_INSTALLMENT'
  AND XLT1.LOOKUP_TYPE_NAME = 'BOOKING_EVENT'
  AND xbc.PRIMARY_YN        = 'Y'
  AND XBH.USAGE             = 'S'
  AND XBH.ACTIVE_YN         = 'Y'
  AND XPA.AREA(+)           = 'CHARGE'
  AND XBM.MILESTONE_TYPE    = 'MS'
  -- AND XBH.STATUS            = 'APR'
  AND XBE_OSR.EVENT_TYPE  (+)  = 'OSRERCONT'
  AND XBE_SSD.EVENT_TYPE  (+)  = 'SSD'
  AND XBH.BOOKING_DATE     <= P_DATE
  AND NVL(XPC.CANCEL_DATE,SYSDATE)    >= P_DATE ---Added on 23SEP2020
   -- and XPU.UNIT_NAME        ='EH1406'
  ),
  BOOKING_DTL_1 AS
  (SELECT XBM.MS_DTL_ID,
    XBH.BOOKING_HDR_ID,
    XBH.BOOKING_NUMBER,
    XP.PROJECT_NUMBER ,
    XP.PROJECT_NAME,
    XPM.PROPERTY_ID,
    XPM.PROPERTY_NAME,
    XPU.UNIT_NAME UNIT_NO,
    XC.CUSTOMER_NAME,
	XPA.VALUE UNIT_AREA,
    XBD.BOOKING_RATE UNIT_COST,
    XPA.UOM UOM,
    XBD.BOOKING_RATE SQFT_PRICE,
    CASE
      WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
      THEN
        CASE
          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
          THEN XLV.LOOKUP_VALUE_NAME_DISP
            ||'-'
            ||XLV1.LOOKUP_VALUE_NAME_DISP
          ELSE XLV.LOOKUP_VALUE_NAME_DISP
            ||'-'
            ||XMD.INSTALLMENT_EVENT
        END
      ELSE
        CASE
          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
          THEN XLV.LOOKUP_VALUE_NAME_DISP
          ELSE XLV.LOOKUP_VALUE_NAME_DISP
        END
    END EVENT_NAME,
    XBM.INSTALLMENT_PCT INST_PCT_AVG,
    NVL(XBM.INSTALLMENT_AMOUNT,0) INST_AMT ,
    XP.COMPLETION_DATE,
    XPU.STATUS PROPERTY_STATUS,
    XBH.CREATED_BY,
    XBM.PERIOD_DURATION,
    XBM.DUE_DATE,
    XBM.INSTALLMENT_TYPE,
    XBM.INVOICE_ID,
    NVL(xpc.REFUND_AMOUNT,0) REFUND_AMOUNT,
    NVL(xpc.FORFIET_AMOUNT,0) FORFIET_AMOUNT,
    NVL(xpc.ADJUSTMENT_AMT,0) ADJUSTMENT_AMT,
	
	XPU.UNIT_TYPE,
	XBE_SSD.EVENT_DATE  SPA_DATE,
    XBE_OSR.EVENT_DATE  Reser_contract_date,
	XPA.VALUE Sq_feet,
	(CASE WHEN XPU.STATUS ='BOOK'
          THEN XBD.BOOKING_RATE
          ELSE (select XPL.BASE_PRICE from XXPM_PL_LINES XPL where 1=1
												  AND XPU.UNIT_ID = XPL.UNIT_ID)
    END )price_per_sq,
	xoh.AGENT_NAME,
    XPB.BUILD_NAME SUBPROJECT,
	(select l.LOOKUP_VALUE_NAME_DISP from xxfnd_lookup_v l,xxstg_cust_sites xcs 
								  where 1=1
								  AND xc.cust_id           	   = xcs.cust_id
								  AND xbh.org_id           	   = xcs.org_id
								  and l.LOOKUP_VALUE_NAME      = xcs.COUNTRY 
								  and l.LOOKUP_TYPE_NAME       = 'COUNTRY'
								  and rownum=1)COUNTRY ,
    XPMGE.ATTRIBUTE1 financed_by,
	XPMGE.MORT_AMOUNT financed_amnt
	
  FROM XXPM_BOOKING_HEADER XBH,
    XXPM_BOOKING_MILESTONES XBM,
    XXPM_BOOKING_DETAIL XBD,
    XXPM_BOOKING_CUSTOMER XBC,
    XXPM_PROPERTY_MASTER XPM,
    XXPM_PROPERTY_UNITS XPU,
    XXPM_PROPERTY_AREA XPA,
    XXPM_MILESTONE_DTL XMD,
    XXSTG_PROJECTS XP,
    XXSTG_CUSTOMER XC,
    XXFND_LOOKUP_TYPES XLT,
    XXFND_LOOKUP_TYPES XLT1,
    XXFND_LOOKUP_VALUES XLV,
    XXFND_LOOKUP_VALUES XLV1,
    xxpm_cancellation xpc,
	XXPM_OFFER_HEADER XOH,
	XXPM_BOOKING_EVENTS XBE_SSD,
	XXPM_BOOKING_EVENTS XBE_OSR,
	XXPM_PROPERTY_BUILDINGS XPB,
	XXPM_PROPERTY_MORTGAGE XPMGE
	
  WHERE 1=1
  AND XBH.OFFER_HDR_ID   	 = XOH.OFFER_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID   	 = XBE_SSD.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID   	 = XBE_OSR.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID     = XBM.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID     = XBD.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID     = XBC.BOOKING_HDR_ID(+)
  AND XBD.UNIT_ID            = XPU.UNIT_ID(+)
  AND XBH.PROPERTY_ID        = XPM.PROPERTY_ID(+)
  AND XPU.UNIT_ID            = XPA.UNIT_ID(+)
  AND XPM.PROJECT_ID         = XP.PROJ_ID(+)
  AND XPM.ORG_ID             = XP.ORG_ID(+)
  AND XBC.CUST_ID            = XC.CUST_ID(+)
  AND XBM.MS_DTL_ID          = XMD.MS_DTL_ID(+)
  AND XBM.INSTALLMENT_TYPE   = XLV.LOOKUP_VALUE_NAME(+)
  AND XBM.INSTALLMENT_EVENT  = XLV1.LOOKUP_VALUE_NAME(+)
  AND XLT.LOOKUP_TYPE_ID     = XLV.LOOKUP_TYPE_ID(+)
  AND XLT1.LOOKUP_TYPE_ID    = XLV1.LOOKUP_TYPE_ID(+)
  AND xbm.source_func_ref_id = xpc.cancel_id(+)
  AND XPU.PROPERTY_ID        = XPB.PROPERTY_ID (+)
  AND XPU.BUILD_ID           = XPB.BUILD_ID (+)
  AND XPU.UNIT_ID   	     = XPMGE.UNIT_ID(+)
  AND XLT.LOOKUP_TYPE_NAME   = 'MILESTONE_INSTALLMENT'
  AND XLT1.LOOKUP_TYPE_NAME  = 'BOOKING_EVENT'
  AND xbc.PRIMARY_YN         = 'Y'
  AND XBH.USAGE              = 'S'
  AND XBH.ACTIVE_YN          = 'Y'
  AND XPA.AREA(+)            = 'CHARGE'
  AND XBE_OSR.EVENT_TYPE  (+)= 'OSRERCONT'
  AND XBE_SSD.EVENT_TYPE  (+)= 'SSD'
  AND XBM.CHARGE_TYPE   = 'CMC'
  -- AND XBH.STATUS        = 'APR'
  AND XBH.BOOKING_DATE <= P_DATE
  AND NVL(XPC.CANCEL_DATE,SYSDATE)    >= P_DATE ---Added on 23SEP2020
  ),
  INV_DTL AS
  (
 SELECT DISTINCT XIH.BOOKING_ID,
    XIH.INVOICE_ID,
    XIL.INSTALLMENT_TYPE,
    XIH.DUE_DATE,
    XIH.INTERFACE_STATUS STATUS,
    XIH.INVOICE_DATE,
	CASE 
	 WHEN MS.INSTALLMENT_AMOUNT=0 AND XIH.INVOICE_DATE<= P_DATE
     THEN MS.INSTALLMENT_AMOUNT_R
	 WHEN MS.MILESTONE_TYPE<>'MS_CMC' 
	 THEN SUM(NVL(XIL.AMOUNT,0))  + SUM(NVL(XIL.TAX_AMOUNT,0))
	 WHEN MS.MILESTONE_TYPE='MS_CMC' 
	 THEN (SUM(NVL(XIL.AMOUNT,0))  + SUM(NVL(XIL.TAX_AMOUNT,0)))*-1
	 END INV_AMT

  FROM 
    XXPM_INVOICE_HEADER XIH,
    XXPM_INVOICE_LINES XIL,
	XXPM_BOOKING_MILESTONES MS
  WHERE XIH.INVOICE_ID           = XIL.INVOICE_ID(+)
  AND XIH.INVOICE_ID             = MS.INVOICE_ID(+)
  AND (MS.INSTALLMENT_TYPE       <> 'ADD_CP' OR MS.INSTALLMENT_TYPE is null)
  -- AND XIH.BOOKING_ID         =(select booking_hdr_id from XXPM_BOOKING_HEADER where booking_number='STE - BK-000127')
  AND (XIH.GL_DATE        		<= P_DATE OR XIH.GL_DATE IS NULL)
  AND XIH.INTERFACE_STATUS NOT IN ('ERROR', 'Error')
  GROUP BY XIH.BOOKING_ID,
    XIH.INVOICE_ID,
    XIL.INSTALLMENT_TYPE,
    XIH.DUE_DATE,
    XIH.INTERFACE_STATUS ,
    XIH.INVOICE_DATE,
	MS.INSTALLMENT_AMOUNT,
	MS.INSTALLMENT_AMOUNT_R,
	MS.MILESTONE_TYPE
	
  ),
  RCT_DTL AS
  (SELECT 
    XRD.INVOICE_ID,
    XRD.RECEIPT_ID ,
    SUM(NVL(XRD.AMOUNT_APPLIED,0)) RECEIVED_AMT,
    XPR.RECEIPT_DATE,
	case when xrm.receipt_method_name<>'Discount Receipt'
         then SUM(NVL(XRD.AMOUNT_APPLIED,0))
	     else 0
	end Actual_receipt,
	case when xrm.receipt_method_name='Discount Receipt'
         then SUM(NVL(XRD.AMOUNT_APPLIED,0))
	     else 0
	end Discount_receipt
	
  FROM 
    XXPM_RECEIPT_DETAILS XRD,
    XXPM_RECEIPT XPR,
	XXSTG_RECEIPT_METHOD XRM
  WHERE XRD.RECEIPT_ID             = XPR.RECEIPT_ID(+)
   AND XPR.ORG_ID		           = XRM.ORG_ID(+)
   AND XPR.PAY_MODE                = XRM.RECEIPT_METHOD_ID(+)
   and XPR.REMIT_BANK_ACCT_USE_ID  = xrm.REMIT_BANK_ACCT_USE_ID(+)
  AND (TRUNC(XRD.GL_DATE) <= P_DATE
  OR TRUNC(XRD.GL_DATE)   IS NULL)
  -- AND (TRUNC(XPR.GL_DATE) <= P_DATE
  -- OR TRUNC(XPR.GL_DATE)   IS NULL)
  AND (XRD.INTERFACE_STATUS = 'Applied'
  OR XRD.INTERFACE_STATUS is null)
  GROUP BY
    XRD.INVOICE_ID,
    XRD.RECEIPT_ID ,
	XPR.RECEIPT_DATE,
	XRM.RECEIPT_METHOD_NAME
  )
SELECT BKD.PROPERTY_ID ,
  BKD.PROJECT_NAME,
  BKD.UNIT_NO,
  BKD.CUSTOMER_NAME,
  BKD.UNIT_COST,
  BKD.UNIT_AREA,
  BKD.UOM,
  BKD.EVENT_NAME,
  CASE
    WHEN INV.STATUS IS NULL
    THEN 'Not Invoiced'
    ELSE INITCAP(INV.STATUS)
  END STATUS,
  BKD.INST_PCT_AVG,
  NVL(INV.DUE_DATE , BKD.DUE_DATE) PAY_DUE_DATE,
  NVL(BKD.INST_AMT,0) INST_AMT,
  NVL(INV.INV_AMT,0) INV_AMT,
  SUM(NVL(RCT.RECEIVED_AMT,0)) RECEIVED_AMT,
  NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0)) OUTSTANDING_AMT,
  0 FORFIET_AMOUNT,
  NVL(INV.INV_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0)) NET_AMT,
  0 ADJUSTMENT_AMT,
  0 REFUND_AMOUNT,
  CASE
    WHEN INV.STATUS IS NOT NULL
    THEN NVL(INV.INV_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END DUE_NOW,
  CASE
    WHEN INV.STATUS IS NULL
    THEN NVL(INV.INV_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END NOT_DUE,
  (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) DUE_DAYS,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 0 AND 30
    AND INV.STATUS IS NOT NULL
    THEN NVL(INV.INV_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_0_30,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 31 AND 60
    AND INV.STATUS IS NOT NULL
    THEN NVL(INV.INV_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_31_60,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 61 AND 90
    AND INV.STATUS IS NOT NULL
    THEN NVL(INV.INV_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_61_90,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) > 90
    AND INV.STATUS IS NOT NULL
    THEN NVL(INV.INV_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_91_120,
  CASE
    WHEN BKD.PERIOD_DURATION = 'BEFORE_COMP' --'DUE BEFORE COMPLETION'
    THEN NVL(INV.INV_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END BEFORE_COMPL,
  CASE
    WHEN BKD.PERIOD_DURATION = 'ON_COMP' --'DUE ON COMPLETION'
    THEN NVL(INV.INV_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END ON_COMPL,
  CASE
    WHEN BKD.PERIOD_DURATION = 'AFTER_COMP' --'DUE POST COMPLETION'
    THEN NVL(INV.INV_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AFTER_COMPL,
  BKD.UNIT_TYPE,
  BKD.SPA_DATE,
  BKD.RESER_CONTRACT_DATE,
  BKD.SQ_FEET,
  BKD.PRICE_PER_SQ,
  SUM(NVL(RCT.ACTUAL_RECEIPT,0)) ACTUAL_RECEIPT,
  SUM(NVL(RCT.DISCOUNT_RECEIPT,0)) DISCOUNT_RECEIPT,
  NVL(BKD.FINANCED_AMNT,0) FINANCED_AMNT,
  BKD.FINANCED_BY,
  BKD.AGENT_NAME,
  BKD.SUBPROJECT, 
  BKD.COUNTRY 
  
 
FROM BOOKING_DTL BKD ,
  INV_DTL INV,
  RCT_DTL RCT

WHERE 1                  = 1
AND BKD.BOOKING_HDR_ID   = INV.BOOKING_ID(+)
AND BKD.INVOICE_ID       = INV.INVOICE_ID(+)
AND BKD.INSTALLMENT_TYPE = INV.INSTALLMENT_TYPE(+)
AND INV.INVOICE_ID       = RCT.INVOICE_ID(+)
AND BKD.PROPERTY_ID = DECODE(P_PROP_NAME,59,BKD.PROPERTY_ID ,P_PROP_NAME)
GROUP BY BKD.PROPERTY_ID ,
  BKD.PROJECT_NAME,
  BKD.UNIT_NO,
  BKD.CUSTOMER_NAME,
  BKD.UNIT_COST,
  BKD.UNIT_AREA,
  BKD.UOM,
  BKD.EVENT_NAME,
  INV.STATUS,
  BKD.INST_PCT_AVG,
  INV.DUE_DATE ,
  BKD.DUE_DATE ,
  BKD.INST_AMT,
  INV.INV_AMT,
  BKD.PERIOD_DURATION,
  BKD.UNIT_TYPE,
  BKD.SPA_DATE,
  BKD.RESER_CONTRACT_DATE,
  BKD.SQ_FEET,
  BKD.PRICE_PER_SQ,
  BKD.FINANCED_BY,
  BKD.AGENT_NAME,
  BKD.SUBPROJECT, 
  BKD.COUNTRY,
  BKD.FINANCED_AMNT
  
UNION ALL
	
SELECT DISTINCT BKD1.PROPERTY_ID ,
  BKD1.PROJECT_NAME,
  BKD1.UNIT_NO,
  BKD1.CUSTOMER_NAME,
  BKD1.UNIT_COST,
  BKD1.UNIT_AREA,
  BKD1.UOM,
  'Credit Memo' EVENT_NAME,
  INV.STATUS STATUS,
  BKD1.INST_PCT_AVG,
  NVL(INV.DUE_DATE , BKD1.DUE_DATE) PAY_DUE_DATE,
  0 INST_AMT,
--  NVL(BKD1.INST_AMT,0) * -1 INST_AMT,
  NVL(INV.INV_AMT,0) INV_AMT,
  0 RECEIVED_AMT,
  0 OUTSTANDING_AMT,
  BKD1.FORFIET_AMOUNT FORFIET_AMOUNT,
  (NVL(INV.INV_AMT,0) * -1) + (BKD1.FORFIET_AMOUNT) + BKD1.ADJUSTMENT_AMT +  BKD1.REFUND_AMOUNT NET_AMT,
  BKD1.ADJUSTMENT_AMT,
  BKD1.REFUND_AMOUNT ,
  NVL(INV.INV_AMT,0) * -1 DUE_NOW,
  0 NOT_DUE,
  0 DUE_DAYS,
  0 AMT_0_30,
  0 AMT_31_60,
  0 AMT_61_90,
  0 AMT_91_120,
  0 BEFORE_COMPL,
  0 ON_COMPL,
  0 AFTER_COMPL,
  BKD1.UNIT_TYPE,
  BKD1.SPA_DATE,
  BKD1.RESER_CONTRACT_DATE,
  BKD1.SQ_FEET,
  BKD1.PRICE_PER_SQ,
  0 ACTUAL_RECEIPT,
  0 DISCOUNT_RECEIPT,
  0 FINANCED_AMNT,
  BKD1.FINANCED_BY,
  BKD1.AGENT_NAME,
  BKD1.SUBPROJECT, 
  BKD1.COUNTRY
  
FROM BOOKING_DTL_1 BKD1 ,
  INV_DTL INV
WHERE 1                 = 1
AND BKD1.BOOKING_HDR_ID = INV.BOOKING_ID(+)
AND BKD1.INVOICE_ID     = INV.INVOICE_ID
AND BKD1.PROPERTY_ID = DECODE(P_PROP_NAME,59,BKD1.PROPERTY_ID ,P_PROP_NAME)
  )

GROUP BY 
  PROJECT_NAME,
  CUSTOMER_NAME,
  UNIT_NO,
  UNIT_TYPE,
  SPA_DATE,
  RESER_CONTRACT_DATE,
  SQ_FEET,
  PRICE_PER_SQ,
  FINANCED_BY,
  TRIM(replace(replace(replace(AGENT_NAME,chr(13),''),chr(10),''),chr(9),'')) ,
  SUBPROJECT, 
  COUNTRY,
  FINANCED_AMNT
ORDER BY PROJECT_NAME,UNIT_NO;
  
  
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_AR_SUMMARY;  
  
  FUNCTION XXPRISM_UNIT_STATUS(P_PROJ_NAME IN VARCHAR2
  ,P_PROP_NAME IN VARCHAR2) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROJ_NAME); 
      dbms_output.Put_line(P_PROP_NAME);

      OPEN l_query_ref FOR 

/*BOOKED, BLOCKED*/
SELECT 
  XBH.BOOKING_HDR_ID BOOKING_HDR_ID,
  XBH.BOOKING_NUMBER BOOKING_NUMBER,
  XP.PROJECT_NUMBER PROJECT_NUMBER,
  XP.PROJECT_NAME PROJECT_NAME,
  XPU.UNIT_NUMBER UNIT_NO,
  XC.CUSTOMER_NAME CUSTOMER,
  (CASE WHEN XPU.STATUS ='BOOK'
       THEN XBD.BOOKING_AMOUNT
	   ELSE XPL.PL_AMOUNT
	   END ) UNIT_COST,
  XPA.VALUE UNIT,
  XPA.UOM AREA,
  XPL.BASE_PRICE SQFT_PRICE,
  XLU.LOOKUP_VALUE_NAME_DISP STATUS,
  CASE
    WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
    THEN
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XLV1.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XMD.INSTALLMENT_EVENT
      END
    ELSE
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
      END
  END EVENT_NAME,
  XBM.INSTALLMENT_PCT INST_PCT_AVG,
  NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')) PAY_DUE_DATE,
  NVL(XBM.INSTALLMENT_AMOUNT,0) INST_AMT,
  SUM(NVL(XRD.AMOUNT_APPLIED,0))RECEIVED_AMT,
  (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0))) OUTSTANDING_AMT,
  NULL DATE_CHANGE,
  NVL(
  CASE
    WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) > SYSDATE
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) NOT_DUE,
  NVL(
  CASE
    WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) <= SYSDATE
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) OVERDUE,
  NVL(
  CASE
    WHEN NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')) BETWEEN TO_DATE('01012019','DDMMYYYY') AND TO_DATE('30062019','DDMMYYYY')
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) JAN_JUNE_19,
  NVL(
  CASE
    WHEN NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')) BETWEEN TO_DATE('01072019','DDMMYYYY') AND TO_DATE('31122019','DDMMYYYY')
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) JULY_DEC_19,
  NVL(
  CASE
    WHEN NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')) BETWEEN TO_DATE('01012020','DDMMYYYY') AND TO_DATE('31122020','DDMMYYYY')
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) JAN_DEC_20,
  NVL(
  CASE
    WHEN NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')) BETWEEN TO_DATE('01012021','DDMMYYYY') AND TO_DATE('31122021','DDMMYYYY')
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) JAN_DEC_21,
  NVL(
  CASE
    WHEN NVL(TO_CHAR (XIH.DUE_DATE,'YYYY'), TO_CHAR (XBM.DUE_DATE,'YYYY')) > 2022
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) ONW_2022
FROM XXPM_BOOKING_HEADER XBH,
  XXPM_BOOKING_MILESTONES XBM,
  XXPM_BOOKING_DETAIL XBD,
  XXPM_BOOKING_CUSTOMER XBC,
  XXPM_PROPERTY_MASTER XPM,
  XXPM_PROPERTY_UNITS XPU,
  XXPM_PROPERTY_AREA XPA,
  XXPM_PL_LINES XPL,
  XXPM_MILESTONE_DTL XMD,
  XXSTG_PROJECTS XP,
  XXSTG_CUSTOMER XC,
  XXFND_LOOKUP_TYPES XLT,
  XXFND_LOOKUP_TYPES XLT1,
  XXFND_LOOKUP_VALUES XLV,
  XXFND_LOOKUP_VALUES XLV1,
  XXPM_INVOICE_HEADER XIH,
  XXPM_INVOICE_LINES XIL,
  XXPM_RECEIPT_DETAILS XRD,
  XXFND_LOOKUP_V XLU
WHERE 1                   =1
AND XBH.BOOKING_HDR_ID    = XBM.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID
AND XBD.UNIT_ID           = XPU.UNIT_ID
AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID
AND XPM.PROPERTY_ID       = XPU.PROPERTY_ID
AND XPU.UNIT_ID           = XPA.UNIT_ID
AND XPU.PROPERTY_ID       = XPL.PROPERTY_ID
AND XPU.UNIT_ID           = XPL.UNIT_ID
AND XPM.PROJECT_ID        = XP.PROJ_ID
AND XPM.ORG_ID            = XP.ORG_ID
AND XBC.CUST_ID           = XC.CUST_ID
AND XBH.BOOKING_HDR_ID    = XIH.BOOKING_ID(+)
AND XBM.INVOICE_ID        = XIH.INVOICE_ID(+)
AND XBM.INSTALLMENT_TYPE  = XIL.INSTALLMENT_TYPE(+)
AND XIH.INVOICE_ID        = XIL.INVOICE_ID(+)
AND XIH.INVOICE_ID        = XRD.INVOICE_ID(+)
AND XBM.MS_DTL_ID         = XMD.MS_DTL_ID(+)
AND XBM.INSTALLMENT_TYPE  = XLV.LOOKUP_VALUE_NAME(+)
AND XBM.INSTALLMENT_EVENT = XLV1.LOOKUP_VALUE_NAME(+)
AND XLT.LOOKUP_TYPE_ID    = XLV.LOOKUP_TYPE_ID(+)
AND XLT1.LOOKUP_TYPE_ID   = XLV1.LOOKUP_TYPE_ID(+)
AND XPU.STATUS            = XLU.LOOKUP_VALUE_NAME (+)
AND XLT.LOOKUP_TYPE_NAME  = 'MILESTONE_INSTALLMENT'
AND XLT1.LOOKUP_TYPE_NAME = 'BOOKING_EVENT'
AND XBC.PRIMARY_YN        = 'Y'
  --AND XP.PROJ_ID = 300000002086347
  --AND XPM.PROPERTY_NAME     = 'Omniyat001'
  --AND XPU.UNIT_NUMBER = 'OM001-008'
AND XPU.STATUS     IN ('BOOK', 'BLOCK', 'SOLD')
AND XBH.STATUS     <> 'CANCEL'
AND XP.PROJ_ID      = NVL(P_PROJ_NAME, XP.PROJ_ID)
AND XPM.PROPERTY_ID  = DECODE(P_PROP_NAME,59,XPM.PROPERTY_ID ,P_PROP_NAME)
GROUP BY 
  XBH.BOOKING_HDR_ID ,
  XBH.BOOKING_NUMBER ,
  XP.PROJECT_NUMBER ,
  XP.PROJECT_NAME ,
  XPU.UNIT_NUMBER ,
  XC.CUSTOMER_NAME ,
  (CASE WHEN XPU.STATUS ='BOOK'
       THEN XBD.BOOKING_AMOUNT
	   ELSE XPL.PL_AMOUNT
	   END ),
  
  XPA.VALUE ,
  XPA.UOM ,
  XPL.BASE_PRICE ,
  XLU.LOOKUP_VALUE_NAME_DISP ,
  CASE
    WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
    THEN
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XLV1.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XMD.INSTALLMENT_EVENT
      END
    ELSE
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
      END
  END ,
  XBM.INSTALLMENT_PCT ,
  NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')) ,
  NVL(XBM.INSTALLMENT_AMOUNT,0) ,
  NVL(XIH.DUE_DATE, XBM.DUE_DATE),
  NVL(TO_CHAR (XIH.DUE_DATE,'YYYY'), TO_CHAR (XBM.DUE_DATE,'YYYY'))

UNION ALL

/*ALLOTED, AVAILABLE*/
SELECT 
  NULL BOOKING_HDR_ID,
  NULL BOOKING_NUMBER ,
  XP.PROJECT_NUMBER PROJECT_NUMBER,
  XP.PROJECT_NAME PROJECT_NAME,
  XPU.UNIT_NUMBER UNIT_NO,
  NULL CUSTOMER,
  (XPL.PL_AMOUNT) UNIT_COST,
  -- (XPU.BASE_RATE * XPA.VALUE) UNIT_COST,
  XPA.VALUE UNIT,
  XPA.UOM AREA,
  XPL.BASE_PRICE SQFT_PRICE,
  XLU.LOOKUP_VALUE_NAME_DISP STATUS,
  NULL EVENT_NAME,
  NULL INST_PCT_AVG,
  NULL PAY_DUE_DATE,
  0 INST_AMT,
  0 RECEIVED_AMT,
  0 OUTSTANDING_AMT,
  NULL DATE_CHANGE,
  0 NOT_DUE,
  0 OVERDUE,
  0 JAN_JUNE_19,
  0 JULY_DEC_19,
  0 JAN_DEC_20,
  0 JAN_DEC_21,
  0 ONW_2022
FROM XXPM_PROPERTY_MASTER XPM,
  XXPM_PROPERTY_UNITS XPU,
  XXPM_PL_LINES XPL,
  XXPM_PROPERTY_AREA XPA,
  XXSTG_PROJECTS XP,
  XXFND_LOOKUP_V XLU
WHERE 1             =1
AND XPM.PROPERTY_ID = XPU.PROPERTY_ID
AND XPU.PROPERTY_ID = XPL.PROPERTY_ID
AND XPU.UNIT_ID     = XPL.UNIT_ID
AND XPU.UNIT_ID     = XPA.UNIT_ID(+)
AND XPM.PROJECT_ID  = XP.PROJ_ID
AND XPM.ORG_ID      = XP.ORG_ID
AND XPU.STATUS      = XLU.LOOKUP_VALUE_NAME (+)
AND XPU.STATUS     IN ('AVAL', 'ALOT')
  --AND XP.PROJ_ID = 300000002086347
  --AND XPM.PROPERTY_NAME     = 'Omniyat001'
  --AND XPU.UNIT_NUMBER IN ('OM001-020', 'OM001-017')
AND XP.PROJ_ID      = NVL(P_PROJ_NAME, XP.PROJ_ID)
AND XPM.PROPERTY_ID  = DECODE(P_PROP_NAME,59,XPM.PROPERTY_ID ,P_PROP_NAME)
GROUP BY XP.PROJECT_NUMBER,
  XP.PROJECT_NAME,
  XPU.UNIT_NUMBER,
  XPL.PL_AMOUNT ,
  XPA.VALUE ,
  XPA.UOM ,
  XPL.BASE_PRICE ,
  XLU.LOOKUP_VALUE_NAME_DISP,
  XPL.PL_AMOUNT
ORDER BY BOOKING_NUMBER,UNIT_NO;

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  END XXPRISM_UNIT_STATUS; 


   FUNCTION XXPRISM_SPA_REPORT(P_BLOCK_NUM IN VARCHAR2) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_BLOCK_NUM); 

      OPEN l_query_ref FOR 
		SELECT 
		XO.ORG_NAME,
    XC.CUSTOMER_NAME,
		XCC.PASSPORT_NUMBER,
		XCC.EMAIL_ID,
		XCS.CITY,
		XLV.LOOKUP_VALUE_NAME_DISP COUNTRY,
		XCC.PHONE_NUMBER,
		XCC.FAX_NUMBER,
		XPB.BUILD_NAME,
		XPU.UNIT_NAME,
		XPU.UNIT_TYPE,
		XPA.VALUE AREA,
		XP.COMPLETION_DATE,
		XBD.BOOKING_AMOUNT,
		XXPM_UTILITY_PKG.AMOUNT_IN_WORDS(NVL(XBD.BOOKING_AMOUNT,0),'AED') AMT_IN_WORDS,
		XBA.BANK_NAME,
		XBA.BANK_NUMBER,
		XBA.BRANCH_NAME,
		XBA.SWIFT_CODE,
		XBA.BANK_ACCOUNT_NUM,
		XBA.IBAN,
		NULL BANK_ACC_NAME,
		NULL ADDRESS,
		CURSOR
		(
		SELECT
		XBM.INSTALLMENT_TYPE,
		XBM.INSTALLMENT_AMOUNT,
		XBM.DUE_DATE,
		(SELECT LOOKUP_VALUE_NAME_DISP FROM XXFND_LOOKUP_V WHERE LOOKUP_TYPE_NAME = 'MILESTONE_DURATION' AND LOOKUP_VALUE_NAME = XBM.PERIOD_DURATION)PERIOD_DURATION ,
		XBM.MILESTONE_TYPE,
		XBM.INSTALLMENT_PCT,
		XLV.LOOKUP_VALUE_NAME_DISP INS_TYPE
		FROM
		XXPM_BOOKING_MILESTONES XBM,
		XXFND_LOOKUP_V XLV
		WHERE 
		XBM.BOOKING_HDR_ID       = XBD.BOOKING_HDR_ID
		AND XBM.INSTALLMENT_TYPE = XLV.LOOKUP_VALUE_NAME(+)
		AND XLV.LOOKUP_TYPE_NAME(+) = 'MILESTONE_INSTALLMENT'
		AND XBM.MILESTONE_TYPE = 'MS'
		ORDER BY XBM.DUE_DATE ASC
		) INSTALL_PAY

		FROM 

		XXSTG_ORGANIZATIONS XO,
		XXPM_BOOKING_CUSTOMER XBC,
		XXPM_BOOKING_HEADER XBH,
		XXPM_BOOKING_DETAIL XBD,
		XXPM_PROPERTY_BUILDINGS XPB,
		XXPM_PROPERTY_MASTER XPM,
		XXPM_PROPERTY_UNITS XPU,
		XXPM_PROPERTY_AREA XPA,
		XXSTG_CUSTOMER XC,
		XXSTG_CUST_SITES XCS,
		XXSTG_CUST_CONTACTS XCC,
		XXSTG_PROJECTS XP,
		XXPM_PROPERTY_ESCROW XPE,
		XXSTG_BANK_ACCOUNTS XBA,
		XXFND_LOOKUP_V XLV

		WHERE 1=1


		AND XBC.BOOKING_HDR_ID      = XBH.BOOKING_HDR_ID
		AND XBH.BOOKING_HDR_ID      = XBD.BOOKING_HDR_ID
		AND XBD.BUILDING_ID         = XPB.BUILD_ID
		AND XBD.UNIT_ID             = XPU.UNIT_ID
		AND XPU.UNIT_ID             = XPA.UNIT_ID
		AND XBH.PROPERTY_ID         = XPM.PROPERTY_ID(+)
		AND XPM.PROJECT_ID          = XP.PROJ_ID(+)
		AND XC.CUST_ID              = XCS.CUST_ID
		AND XCS.CUST_ID             = XCC.CUST_ID(+)
		AND XCS.CUST_SITE_ID        = XCC.CUST_SITE_ID(+)
		AND XLV.LOOKUP_VALUE_NAME   = XCS.COUNTRY(+)
		AND XBC.CUST_ID             = XC.CUST_ID (+)
		AND XLV.LOOKUP_TYPE_NAME(+) = 'COUNTRY'
		AND XPB.BUILD_ID            = XPE.BUILD_ID(+)
		AND XPE.BANK_ACNT_ID        = XBA.BANK_ACNT_ID(+)
		AND XBH.ORG_ID              = XO.ORG_ID
		AND XCS.ORG_ID              = XO.ORG_ID
AND XBH.BOOKING_NUMBER        = P_BLOCK_NUM;

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_SPA_REPORT; 

  FUNCTION XXPRISM_ARABIC_SPA_REPORT(
    P_BLOCK_NUM IN VARCHAR2)
  RETURN CLOB
IS
  l_query_ref SYS_REFCURSOR;
  l_handle dbms_xmlgen.ctxhandle;
  l_data_xml CLOB;
BEGIN
  dbms_output.Put_line(P_BLOCK_NUM);
  OPEN l_query_ref FOR 
 SELECT XO.ORG_NAME,
  XO.ORG_NAME_TL,
  XC.CUSTOMER_NAME,
  XC.TITLE TITLE_Y,
  XC.SUR_NAME SURNAME_Y,
  XC.MIDDLE_NAME MIDDLE_NAME_Y,
  XC.FIRST_NAME FIRST_NAME_Y,
  XC.CUSTOMER_NAME_TL,
  XCC.PASSPORT_NUMBER PASSPORT_NUMBER_Y,
  XCC.EMAIL_ID EMAIL_ID_Y,
  XCS.CITY CITY_Y,
  XCS.ADDRESS1
  ||', '
  ||XCS.CITY ADDRESS_Y,
  XLV.LOOKUP_VALUE_NAME_DISP COUNTRY_Y,
  XCC.PHONE_NUMBER PHONE_NUMBER_Y,
  XCC.FAX_NUMBER,
  XPM.PROPERTY_NAME ,
  XPM.PROPERTY_NAME_TL ,
  XPB.BUILD_NAME,
  XPU.UNIT_NAME,
  XPU.UNIT_TYPE,
  XPA.VALUE UNIT,
  XPA.UOM AREA,
  XP.COMPLETION_DATE,
  XP.START_DATE,
  XBD.BOOKING_AMOUNT,
  XBH.BOOKING_DATE,
  XXPM_UTILITY_PKG.AMOUNT_IN_WORDS(NVL(XBD.BOOKING_AMOUNT,0),'AED') AMT_IN_WORDS,
  XBA.BANK_NAME,
  XBA.BANK_NUMBER,
  XBA.BRANCH_NAME,
  XBA.SWIFT_CODE,
  XBA.BANK_ACCOUNT_NUM,
  XBA.IBAN,
  NULL BANK_ACC_NAME,
  XBA.BRANCH_NAME
  ||', '
  ||XBA.CITY BANK_ADDRESS,
  CURSOR
  (SELECT XBH.BOOKING_NUMBER,
    XC.TITLE TITLE_N,
    XC.SUR_NAME SURNAME_N,
    XC.MIDDLE_NAME MIDDLE_NAME_N,
    XC.FIRST_NAME FIRST_NAME_N,
    XC.PASSPORT_NO PASSPORT_NO_N,
    XCC.EMAIL_ID EMAIL_ID_N,
    XCS.CITY CITY_N,
    XCC.PHONE_NUMBER PHONE_NUMBER_N,
    XCS.ADDRESS1
    ||', '
    ||XCS.CITY ADDRESS_N,
    XLV.LOOKUP_VALUE_NAME_DISP COUNTRY_N
  FROM XXPM_BOOKING_CUSTOMER XBC,
    XXSTG_CUSTOMER XC,
    XXSTG_CUST_SITES XCS,
    XXSTG_CUST_CONTACTS XCC,
    XXFND_LOOKUP_V XLV,
    XXSTG_ORGANIZATIONS XO
  WHERE 1                     = 1
  AND XBH.BOOKING_HDR_ID      = XBC.BOOKING_HDR_ID
  AND XBC.CUST_ID             = XC.CUST_ID (+)
  AND XC.CUST_ID              = XCS.CUST_ID
  AND XCS.CUST_ID             = XCC.CUST_ID(+)
  AND XCS.CUST_SITE_ID        = XCC.CUST_SITE_ID(+)
  AND XLV.LOOKUP_VALUE_NAME   = XCS.COUNTRY(+)
  AND XCS.ORG_ID              = XO.ORG_ID
  AND XBH.ORG_ID              = XO.ORG_ID
  AND XLV.LOOKUP_TYPE_NAME(+) = 'COUNTRY'
    --  AND XBH.BOOKING_NUMBER      = 'BK-1000924'
  AND XBC.PRIMARY_YN = 'N'
  ) CUST,
  CURSOR
  (SELECT XBM.INSTALLMENT_TYPE,
    XBM.INSTALLMENT_AMOUNT,
    XBM.DUE_DATE,
    XBM.MILESTONE_TYPE,
    XBM.INSTALLMENT_PCT,
    XLV.LOOKUP_VALUE_NAME_DISP INS_TYPE,
    XMD.INSTALLMENT_EVENT,
    CASE
      WHEN XMD.INSTALLMENT_METHOD = 'Project Milestone'
      THEN XMD.INSTALLMENT_EVENT
      ELSE 'Not Applicable'
    END PERIOD_DURATION
    --    XMD.PERIOD_DURATION
  FROM XXPM_BOOKING_MILESTONES XBM,
    XXPM_MILESTONE_DTL XMD,
    XXFND_LOOKUP_V XLV
  WHERE XBM.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID
  AND XBM.MS_DTL_ID           = XMD.MS_DTL_ID(+)
  AND XBM.INSTALLMENT_TYPE    = XLV.LOOKUP_VALUE_NAME(+)
  AND XLV.LOOKUP_TYPE_NAME(+) = 'MILESTONE_INSTALLMENT'
  AND XBM.MILESTONE_TYPE      = 'MS'
  ORDER BY XBM.DUE_DATE ASC
  ) INSTALL_PAY
FROM XXSTG_ORGANIZATIONS XO,
  XXPM_BOOKING_CUSTOMER XBC,
  XXPM_BOOKING_HEADER XBH,
  XXPM_BOOKING_DETAIL XBD,
  XXPM_PROPERTY_BUILDINGS XPB,
  XXPM_PROPERTY_MASTER XPM,
  XXPM_PROPERTY_UNITS XPU,
  XXPM_PROPERTY_AREA XPA,
  XXSTG_CUSTOMER XC,
  XXSTG_CUST_SITES XCS,
  XXSTG_CUST_CONTACTS XCC,
  XXSTG_PROJECTS XP,
  XXPM_PROPERTY_ESCROW XPE,
  XXSTG_BANK_ACCOUNTS XBA,
  XXFND_LOOKUP_V XLV
WHERE 1                     =1
AND XBC.BOOKING_HDR_ID      = XBH.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID      = XBD.BOOKING_HDR_ID
AND XBD.BUILDING_ID         = XPB.BUILD_ID
AND XBD.UNIT_ID             = XPU.UNIT_ID
AND XPU.UNIT_ID             = XPA.UNIT_ID
AND XBH.PROPERTY_ID         = XPM.PROPERTY_ID(+)
AND XPM.PROJECT_ID          = XP.PROJ_ID(+)
AND XC.CUST_ID              = XCS.CUST_ID
AND XCS.CUST_ID             = XCC.CUST_ID(+)
AND XCS.CUST_SITE_ID        = XCC.CUST_SITE_ID(+)
AND XLV.LOOKUP_VALUE_NAME   = XCS.COUNTRY(+)
AND XBC.CUST_ID             = XC.CUST_ID (+)
AND XLV.LOOKUP_TYPE_NAME(+) = 'COUNTRY'
AND XPB.BUILD_ID            = XPE.BUILD_ID(+)
AND XPE.BANK_ACNT_ID        = XBA.BANK_ACNT_ID(+)
AND XBH.ORG_ID              = XO.ORG_ID
AND XCS.ORG_ID              = XO.ORG_ID
AND XBH.BOOKING_NUMBER      = NVL(P_BLOCK_NUM, XBH.BOOKING_NUMBER)
AND XBC.PRIMARY_YN          = 'Y';
l_handle := dbms_xmlgen.Newcontext (l_query_ref);
dbms_xmlgen.Setrowsettag (l_handle, 'PC');
dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD');
dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag);
l_data_xml := dbms_xmlgen.Getxml (l_handle);
RETURN ( l_data_xml );
EXCEPTION
WHEN OTHERS THEN
  RETURN ( NULL );
END XXPRISM_ARABIC_SPA_REPORT;

   FUNCTION XXPRISM_ALL_INVENTORY_STATUS(P_PROP_NAME IN VARCHAR2,P_BUILD_NAME IN VARCHAR2) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROP_NAME); 
	  dbms_output.Put_line(P_BUILD_NAME);

      OPEN l_query_ref FOR 

   SELECT
  XPM.PROPERTY_NAME,
  XPB.BUILD_NAME,
  XPU.UNIT_NAME,
  XPU.UNIT_SHORTCODE,
  nvl((select LOOKUP_VALUE_NAME_DISP 
       from xxfnd_lookup_v 
	   where LOOKUP_VALUE_NAME=xpu.view_type
	   and LOOKUP_TYPE_NAME  = 'UNIT_VIEW_TYPE' ),xpu.view_type) view_type,
  XPU.FLOOR_NUMBER,
  (SELECT LOOKUP_VALUE_NAME_DISP
  FROM XXFND_LOOKUP_V
  WHERE LOOKUP_TYPE_NAME LIKE '%UNIT_CATEGORY%'
  AND LOOKUP_VALUE_NAME = XPU.UNIT_CATEGORY
  )UNIT_CATEGORY,
  XPU.UNIT_TYPE,
  XPU.NO_OF_ROOMS,
  XPA.VALUE,
 CASE WHEN XPU.STATUS ='MNG_BLOCK' 
 THEN 
  (select BH.DESCRIPTION from XXPM_BLOCK_HEADER BH,XXPM_BLOCK_DETAIL BD where BH.BLOCK_TYPE='MB'
                                                                        AND BH.BLOCK_ID   =BD.BLOCK_ID 
                                                                        and XPU.UNIT_ID   =BD.UNIT_ID )
 ELSE (SELECT LOOKUP_VALUE_NAME_DISP
     FROM XXFND_LOOKUP_V
     WHERE LOOKUP_TYPE_NAME LIKE '%UNIT_STATUS%'
     AND LOOKUP_VALUE_NAME = XPU.STATUS
    )  
  END STATUS,
  XPU.UNIT_ID,
  (SELECT COUNT(carpark_id)
  FROM xxpm_property_carparks xpc
  WHERE xpc.unit_id = xbd.unit_id
  ) tot_car_park,
  
  (CASE WHEN XPU.STATUS in('BOOK','SOLD','HR')
       THEN XBD.BOOKING_RATE
	   ELSE XPL.BASE_PRICE
	   END ) rate,
  (CASE WHEN XPU.STATUS in('BOOK','SOLD','HR')
       THEN XBD.BOOKING_AMOUNT
	   ELSE XPL.PL_AMOUNT
	   END ) sales_vale,
  XPU.DESCRIPTION remarks
	   
FROM 
  XXPM_PROPERTY_MASTER XPM,
  XXPM_PROPERTY_BUILDINGS XPB,
  XXPM_PROPERTY_UNITS XPU,
  XXPM_PROPERTY_AREA XPA,
  XXPM_BOOKING_DETAIL XBD,
  XXPM_PL_LINES XPL
WHERE 				 1=1
AND XPM.PROPERTY_ID   = XPB.PROPERTY_ID
AND XPB.BUILD_ID      = XPU.BUILD_ID(+)
AND XPU.UNIT_ID       = XPA.UNIT_ID (+)
AND XPU.UNIT_ID       = XPA.UNIT_ID (+)
AND XPU.UNIT_ID       = XBD.UNIT_ID (+)
AND XPU.UNIT_ID       = XPL.UNIT_ID (+)
-- AND XPU.STATUS   	  <> 'SOLD'
AND XPU.STATUS        = 'AVAL' ---added on 17JUN2020
AND XPM.PROPERTY_ID   = DECODE(P_PROP_NAME,59,XPM.PROPERTY_ID ,P_PROP_NAME)
AND XPB.BUILD_ID      = DECODE(P_BUILD_NAME,0,XPB.BUILD_ID,P_BUILD_NAME);
-- AND XPM.PROPERTY_NAME = 'The Anwa By Omniyat'
-- AND XPB.BUILD_NAME    = 'Anwa Car Parks'

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_ALL_INVENTORY_STATUS; 

  FUNCTION XXPRISM_TRADE_RECEIVABLES(P_PROJ_NAME IN VARCHAR2,
   P_CUST_NUMB IN VARCHAR2,
   P_UNIT_NUMBER IN VARCHAR2,
   P_DATE IN STRING
   ) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROJ_NAME); 
	  dbms_output.Put_line(P_CUST_NUMB);
	  dbms_output.Put_line(P_UNIT_NUMBER);
	  dbms_output.Put_line(P_DATE);

      OPEN l_query_ref FOR 


	  SELECT XP.PROJECT_NAME,
  XBH.BOOKING_NUMBER,
  XLV.LOOKUP_VALUE_NAME_DISP COMPANY_NAME,
  XLV.LOOKUP_ADDL_VALUE COMPANY_NUMB,
  XPU.UNIT_NAME,
  XPU.UNIT_NUMBER,
  XC.CUSTOMER_NUMBER,
  XC.CUSTOMER_NAME,
  XPU.UNIT_TYPE,
  XPMO.ATTRIBUTE1 FIN_BY,
  XPMO.MORT_AMOUNT FIN_AMOUNT,
  SUM(NVL(MIL.INSTALLMENT_AMOUNT,0)) PRICE,
  SUM(NVL(BILLED.INV_AMOUNT,0)) BILLED_PRICE,
  CASE
    WHEN SUM(NVL(BILLED.INV_AMOUNT,0)) = 0
    THEN 0
    ELSE ((SUM(NVL(BILLED.INV_AMOUNT,0))) / (SUM(NVL(MIL.INSTALLMENT_AMOUNT,0))) * 100)
  END BILLED_PERC,
  SUM(NVL(COLLECTED.RECEIVED_AMOUNT,0)) COLLECTED_PRICE,
  CASE
    WHEN SUM(NVL(COLLECTED.RECEIVED_AMOUNT,0)) = 0
    THEN 0
    ELSE ((SUM(NVL(COLLECTED.RECEIVED_AMOUNT,0))) / (SUM(NVL(MIL.INSTALLMENT_AMOUNT,0))) * 100)
  END COLLECTED_PERC,
  SUM(NVL(BILLED.INV_AMOUNT,0)) - SUM(NVL(COLLECTED.RECEIVED_AMOUNT,0)) OUTSTANDING_AMT
FROM XXPM_BOOKING_HEADER XBH,
  XXPM_BOOKING_MILESTONES XBM,
  XXPM_BOOKING_DETAIL XBD,
  XXPM_BOOKING_CUSTOMER XBC,
  XXPM_PROPERTY_MASTER XPM,
  XXPM_PROPERTY_UNITS XPU,
  XXPM_PROPERTY_AREA XPA,
  XXPM_PROPERTY_MORTGAGE XPMO,
  XXSTG_PROJECTS XP,
  XXPM_MILESTONE_DTL XMD,
  XXSTG_CUSTOMER XC,
  XXFND_LOOKUP_VALUES XLV,
  (SELECT BOOKING_HDR_ID,
    BOOKING_MS_DTL_ID,
    INSTALLMENT_AMOUNT
  FROM XXPM_BOOKING_MILESTONES
  WHERE MILESTONE_TYPE IN ('Charge', 'MS', 'Fix')
  ) MIL,
  (SELECT XBM1.BOOKING_HDR_ID ,
    XBM1.BOOKING_MS_DTL_ID ,
    NVL(XBM1.INSTALLMENT_AMOUNT,0) INSTALLMENT_AMOUNT,
    (NVL(XIL.AMOUNT,0) + NVL(XIL.TAX_AMOUNT,0)) INV_AMOUNT
  FROM XXPM_BOOKING_MILESTONES XBM1 ,
    XXPM_INVOICE_HEADER XIH1 ,
    XXPM_INVOICE_LINES XIL
  WHERE 1               = 1
  AND XBM1.INVOICE_ID   = XIH1.INVOICE_ID
  AND XIH1.INVOICE_ID   = XIL.INVOICE_ID(+)
  AND XBM1.INVOICE_ID  IS NOT NULL
  AND XIH1.INVOICE_DATE <= P_DATE
  ) BILLED,
  (SELECT XBM2.BOOKING_HDR_ID ,
    XBM2.BOOKING_MS_DTL_ID ,
    NVL(XBM2.INSTALLMENT_AMOUNT,0) INSTALLMENT_AMOUNT,
    XPR.RECEIVED_AMOUNT
  FROM XXPM_BOOKING_MILESTONES XBM2 ,
    XXPM_INVOICE_HEADER XIH2 ,
    XXPM_RECEIPT_DETAILS XRD,
    XXPM_RECEIPT XPR
  WHERE 1               = 1
  AND XBM2.INVOICE_ID   = XIH2.INVOICE_ID
  AND XIH2.INVOICE_ID   = XRD.INVOICE_ID(+)
  AND XRD.RECEIPT_ID    = XPR.RECEIPT_ID(+)
  AND XBM2.INVOICE_ID  IS NOT NULL
  AND XPR.RECEIPT_DATE <= P_DATE
  ) COLLECTED
WHERE XBH.BOOKING_HDR_ID  = XBM.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID
AND XBD.UNIT_ID           = XPU.UNIT_ID
AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID
AND XPU.UNIT_ID           = XPA.UNIT_ID
AND XBH.BOOKING_HDR_ID    = XPMO.BOOKING_HDR_ID(+)
AND XPM.PROJECT_ID        = XP.PROJ_ID
AND XPM.ORG_ID            = XP.ORG_ID
AND XBC.CUST_ID           = XC.CUST_ID
AND XBM.MS_DTL_ID         = XMD.MS_DTL_ID(+)
AND XBM.BOOKING_MS_DTL_ID = MIL.BOOKING_MS_DTL_ID (+)
AND XBH.BOOKING_HDR_ID    = MIL.BOOKING_HDR_ID (+)
AND XBM.BOOKING_MS_DTL_ID = BILLED.BOOKING_MS_DTL_ID (+)
AND XBH.BOOKING_HDR_ID    = BILLED.BOOKING_HDR_ID (+)
AND XBM.BOOKING_MS_DTL_ID = COLLECTED.BOOKING_MS_DTL_ID (+)
AND XBH.BOOKING_HDR_ID    = COLLECTED.BOOKING_HDR_ID (+)
AND XP.PROJECT_NAME       = XLV.LOOKUP_VALUE_NAME(+)
AND XBH.USAGE             = 'S'
AND XBH.STATUS            = 'APR'
AND XBC.PRIMARY_YN        = 'Y'
AND XPM.PROJECT_ID        = NVL(P_PROJ_NAME , XPM.PROJECT_ID)
AND XBC.CUST_ID           = NVL(P_CUST_NUMB , XBC.CUST_ID)
AND XBD.UNIT_ID           = NVL(P_UNIT_NUMBER , XBD.UNIT_ID)
AND XBH.BOOKING_DATE     <= P_DATE
GROUP BY XP.PROJECT_NAME,
  XBH.BOOKING_NUMBER,
  XLV.LOOKUP_VALUE_NAME_DISP,
  XLV.LOOKUP_ADDL_VALUE,
  XPU.UNIT_NAME,
  XPU.UNIT_NUMBER,
  XC.CUSTOMER_NUMBER,
  XC.CUSTOMER_NAME,
  XPU.UNIT_TYPE,
  XPMO.ATTRIBUTE1,
  XPMO.MORT_AMOUNT;


   l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 

  end XXPRISM_TRADE_RECEIVABLES; 
  
  
  FUNCTION XXPRISM_TAX_INVOICE
  (p_bu_name IN VARCHAR2,
   p_inv_num IN VARCHAR2,
   p_booking_num IN VARCHAR2
   ) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
    dbms_output.Put_line(p_bu_name); 
	  dbms_output.Put_line(p_inv_num);
	  dbms_output.Put_line(p_booking_num);

      OPEN l_query_ref FOR 


	  SELECT xbh.booking_hdr_id,
  xo.org_id,
  xc.cust_id,
  xbh.booking_number,
  xpu.unit_name unit,
  xih.invoice_id,
  xih.invoice_number,
  TO_CHAR(xih.invoice_date,'DD-MON-YYYY','NLS_DATE_LANGUAGE = AMERICAN') invoice_date,
--  xih.invoice_date,
  xo.org_name,
  xc.customer_name,
  xcs.address1
  ||', '
  ||xcs.address2
  ||', '
  ||xcs.address3
  ||', '
  ||xcs.city cust_address,
  xlv.lookup_value_name_disp project_name,
  xlv.lookup_value_name_disp_tl company_trn,
  xlv.lookup_addl_value company_address,
  initcap(xbd.tax_code) tax_code,
  xpt.term_name,
  xba.bank_account_name,
  xba.bank_name,
  xba.swift_code,
  xba.bank_number,
  xba.iban,
  CURSOR
  (SELECT xil.description,
    --    xil.tax_code,
    (xil.quantity) quantity,
    SUM(NVL(xil.amount,0)) price_excl_vat ,
    SUM(NVL(xil.tax_amount,0)) tax_amount,
    NVL(SUM(xil.tax_perc),0) tax_perc,
    SUM(NVL(xil.amount,0)) + SUM(NVL(xil.tax_amount,0)) price_incl_vat
  FROM xxpm_invoice_lines xil
  WHERE 1            = 1
  AND xih.invoice_id = xil.invoice_id(+)
  GROUP BY xil.description,
    --    xil.tax_code,
    xil.quantity
  ) line
FROM xxpm_booking_header xbh,
  xxpm_booking_milestones xbm,
  xxpm_booking_detail xbd,
  xxpm_property_units xpu,
  xxpm_invoice_header xih,
  xxstg_organizations xo,
  xxstg_customer xc,
  xxstg_cust_sites xcs,
  xxstg_pay_terms xpt,
  xxfnd_lookup_types xlt,
  xxfnd_lookup_values xlv,
  xxpm_property_escrow xpe,
  xxstg_bank_accounts xba
WHERE 1                      = 1
AND xbh.booking_hdr_id       = xbm.booking_hdr_id(+)
AND xbh.booking_hdr_id       = xbd.booking_hdr_id(+)
AND xbd.unit_id              = xpu.unit_id(+)
AND xbh.booking_hdr_id       = xih.booking_id(+)
AND xbm.invoice_id           = xih.invoice_id(+)
AND xih.org_id               = xo.org_id(+)
AND xih.cust_id              = xc.cust_id
AND xc.cust_id               = xcs.cust_id
AND xo.org_id                = xcs.org_id
AND xih.payment_terms        = xpt.term_id(+)
AND SUBSTR(xo.org_name,1,23) = SUBSTR(xlv.lookup_value_name,1,23)
AND xlt.lookup_type_id       = xlv.lookup_type_id
AND xpu.property_id          = xpe.property_id(+)
AND xpe.bank_acnt_id         = xba.bank_acnt_id(+)
AND xbh.usage                = 'S'
--AND xbh.status               = 'APR'
AND xlt.lookup_type_name     = 'COMPANY_DETAILS'
AND xo.org_id                = NVL(p_bu_name, xo.org_id)
AND xih.invoice_number       = NVL(p_inv_num, xih.invoice_number) 
AND xbh.booking_hdr_id       = NVL(p_booking_num, xbh.booking_hdr_id)
  --AND xbh.booking_number = 'BK-2671'
ORDER BY xih.invoice_id;


   l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 

  end XXPRISM_TAX_INVOICE; 
  
  
  
  FUNCTION XXPRISM_CUSTOMER_STATEMENT
  (p_cust_id IN VARCHAR2,
   P_DATE IN DATE
   )
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
   OPEN l_query_ref FOR    
     
     SELECT DISTINCT 
     XC.CUSTOMER_NAME,
 CURSOR
		( select distinct
       		(NVL2(XCS.ADDRESS1,XCS.ADDRESS1,NULL)||
				NVL2(XCS.ADDRESS2,','||XCS.ADDRESS2,NULL)||
				NVL2(XCS.ADDRESS3,','||XCS.ADDRESS3,NULL)
			   )CUSTOMER_ADDRESS,
			  XCS.CITY,
			  XCS.POSTAL_CODE,
			  XCS.STATE,
			  (select lookup_value_name_disp from xxfnd_lookup_v where XCS.COUNTRY= LOOKUP_VALUE_NAME and lookup_type_name = 'COUNTRY') COUNTRY,
			  XCC.PHONE_NUMBER,
			  XCC.EMAIL_ID,
              XCC.PASSPORT_NUMBER PASSPORT
		FROM
		  XXPM_BOOKING_HEADER XBH, 
		  XXPM_BOOKING_CUSTOMER XBC,
		  XXSTG_CUST_CONTACTS XCC,
		  XXSTG_CUST_SITES XCS
		WHERE 1=1
		AND XBH.BOOKING_HDR_ID   = XBC.BOOKING_HDR_ID
		AND XBC.CUST_ID          = XC.CUST_ID 
		AND XBC.CUST_ID          = XCC.CUST_ID(+)
		AND XBC.CUST_ID          = XCS.CUST_ID(+)
		AND XBH.ORG_ID           = XCS.ORG_ID(+)
		)CUST_ADDRESS,
   CURSOR
  (SELECT distinct
    XBC.CUST_ID  BK_CUS,
    BKSTG.CUSTOMER_NAME  JOIN_OWNER_NAME
    FROM 
    XXPM_BOOKING_CUSTOMER_DTL XBC,
    XXSTG_CUSTOMER BKSTG
    WHERE 1=1
	AND XBC.BOOKING_CUST_ID  = XC.CUST_ID
    AND XBC.CUST_ID 		 = BKSTG.CUST_ID
  ) JOINT_OWNER,

  CURSOR
  (SELECT xp.project_name,
    xpb.build_name,
    xbh.booking_number,
    xpu.unit_name unit_no,
    xpa.value unit_area,
    xbd.booking_rate sqft_price
  FROM xxpm_booking_header xbh,
    xxpm_booking_detail xbd,
    xxpm_booking_customer xbc,
    xxpm_property_master xpm,
    xxpm_property_buildings xpb,
    xxpm_property_units xpu,
    xxpm_property_area xpa,
    xxstg_projects xp
  WHERE 1                      = 1
  AND xbh.booking_hdr_id       = xbd.booking_hdr_id
  AND xbh.booking_hdr_id       = xbc.booking_hdr_id
  AND xbd.unit_id              = xpu.unit_id
  AND xbd.BOOKING_DTL_ID       = xbd.BOOKING_DTL_ID +0
  AND xbh.property_id          = xpm.property_id
  AND xpm.property_id          = xpb.property_id
  AND xpb.build_id             = xpu.build_id
  AND xpu.unit_id              = xpa.unit_id
  AND xpa.AREA_ID              =xpa.AREA_ID+0
  AND xpm.project_id           = xp.proj_id
  AND xpm.org_id               = xp.org_id
  AND xbc.cust_id              = xc.cust_id
  AND xpa.area(+)              = 'CHARGE'
  AND TRUNC(xbh.booking_date) <= p_date
     AND XBH.STATUS            = 'APR'
  ORDER BY xp.project_name,
    xpb.build_name,
    xbh.booking_number,
    xpu.unit_name
  ) prop_dtl,
  CURSOR
  (SELECT xpu.unit_name unit_no,
    CURSOR
    (SELECT xpr.receipt_id,
      xpr.receipt_number,
      xih.invoice_number,
      xpr.receipt_date,
      SUM(NVL(xrd.amount_applied,0)) received_amt_rct,
      nvl(xpr.MODE_OF_RECEIPT,(select RECEIPT_METHOD_NAME from xxstg_receipt_method 
															where 1=1
															and xpr.ORG_ID = org_id
															and xpr.PAY_MODE = RECEIPT_METHOD_ID
															and xpr.REMIT_BANK_ACCT_USE_ID = REMIT_BANK_ACCT_USE_ID ))MODE_OF_PAY---added on 31_MAY_2020
    FROM xxpm_invoice_header xih,
      xxpm_receipt_details xrd,
      xxpm_receipt xpr
    WHERE 1                      = 1
    AND xbh.booking_hdr_id       = xih.booking_id
    AND xih.invoice_id           = xrd.invoice_id(+)
    AND xih.INVOICE_ID           = xih.INVOICE_ID   +0
    AND xrd.RECEIPT_DTL_ID       =xrd.RECEIPT_DTL_ID+0
    AND xrd.receipt_id           = xpr.receipt_id(+)
    AND xpr.receipt_id           = xpr.receipt_id +0
    AND TRUNC(xrd.applied_date) <= p_date
    GROUP BY xpr.receipt_id,
      xpr.receipt_number,
      xih.invoice_number,
      xpr.receipt_date,
      xpr.MODE_OF_RECEIPT,
	  xpr.ORG_ID, ---added on 31_MAY_2020
      xpr.PAY_MODE,---added on 31_MAY_2020
      xpr.REMIT_BANK_ACCT_USE_ID ---added on 31_MAY_2020
    ORDER BY xpr.receipt_number,
      xih.invoice_number
    )rct_line_dtl
  FROM xxpm_booking_header xbh,
    xxpm_booking_detail xbd,
    xxpm_booking_customer xbc,
    xxpm_property_units xpu
  WHERE 1                = 1
  AND xbh.booking_hdr_id = xbd.booking_hdr_id
  AND xbh.booking_hdr_id = xbc.booking_hdr_id
  AND xbd.unit_id        = xpu.unit_id
  AND xbd.BOOKING_DTL_ID = xbd.BOOKING_DTL_ID +0
  AND xbc.cust_id        = xc.cust_id
     AND XBH.STATUS            = 'APR'
  ORDER BY xpu.unit_name
  )rct_dtl,
  CURSOR
  (WITH booking_dtl AS
  (SELECT xbm.ms_dtl_id,
    xbh.booking_hdr_id,
    xbm.BOOKING_MS_DTL_ID,
    xbh.booking_number,
    xpm.property_id,
    xpm.property_name,
    xpu.unit_name unit_no,
    xbd.booking_rate unit_cost,
    xpa.value unit_area,
    xpa.uom uom,
    xbd.booking_rate sqft_price,
    CASE
      WHEN xmd.installment_event IS NOT NULL
      THEN
        CASE
          WHEN xlv1.lookup_value_name_disp IS NOT NULL
          THEN xlv.lookup_value_name_disp
            ||'-'
            ||xlv1.lookup_value_name_disp
          ELSE xlv.lookup_value_name_disp
            ||'-'
            ||xmd.installment_event
        END
      ELSE
        CASE
          WHEN xlv1.lookup_value_name_disp IS NOT NULL
          THEN xlv.lookup_value_name_disp
          ELSE xlv.lookup_value_name_disp
        END
    END event_name,
    xbm.installment_pct inst_pct_avg,
    NVL(xbm.installment_amount,0) inst_amt ,
    xpu.status property_status,
    xbh.created_by,
    xbm.period_duration,
    xbm.due_date,
    xbm.installment_type,
    xbm.invoice_id,
    xbc.cust_id,
    xpu.unit_id,
    XBM.SEQ_NUMBER display_order
--    xlv.display_order
  FROM xxpm_booking_header xbh,
    xxpm_booking_milestones xbm,
    xxpm_booking_detail xbd,
    xxpm_booking_customer xbc,
    xxpm_property_master xpm,
    xxpm_property_units xpu,
    xxpm_property_area xpa,
    xxpm_milestone_dtl xmd,
    xxfnd_lookup_types xlt,
    xxfnd_lookup_types xlt1,
    xxfnd_lookup_values xlv,
    xxfnd_lookup_values xlv1
  WHERE xbh.booking_hdr_id  = xbm.booking_hdr_id(+)
  AND xbh.booking_hdr_id    = xbd.booking_hdr_id(+)
  AND xbh.booking_hdr_id    = xbc.booking_hdr_id(+)
  AND xbd.unit_id           = xpu.unit_id(+)
  AND xbd.BOOKING_DTL_ID    = xbd.BOOKING_DTL_ID +0
  AND xbh.property_id       = xpm.property_id(+)
  AND xpu.unit_id           = xpa.unit_id(+)
  AND xpa.AREA_ID           =xpa.AREA_ID+0
  AND xbm.ms_dtl_id         = xmd.ms_dtl_id(+)
  AND xbm.installment_type  = xlv.lookup_value_name(+)
  AND xbm.installment_event = xlv1.lookup_value_name(+)
  AND xbm.BOOKING_MS_DTL_ID = xbm.BOOKING_MS_DTL_ID+0
  AND xlt.lookup_type_id    = xlv.lookup_type_id(+)
  AND xlt1.lookup_type_id   = xlv1.lookup_type_id(+)
  AND xlt.lookup_type_name  = 'MILESTONE_INSTALLMENT'
  AND xlt1.lookup_type_name = 'BOOKING_EVENT'
  AND xbh.usage             = 'S'
  AND xpa.area(+)           = 'CHARGE'
  AND xbm.milestone_type    = 'MS'
     AND XBH.STATUS            = 'APR'
  AND TRUNC(xbh.booking_date) <= p_date
  ),
  booking_dtl_1 AS
  (SELECT xbm.ms_dtl_id,
    xbh.booking_hdr_id,
    xbm.BOOKING_MS_DTL_ID,
    xbh.booking_number,
    xpm.property_id,
    xpm.property_name,
    xpu.unit_name unit_no,
    xbd.booking_rate unit_cost,
    xpa.value unit_area,
    xpa.uom uom,
    xbd.booking_rate sqft_price,
    xbm.installment_pct inst_pct_avg,
    NVL(xbm.installment_amount,0) inst_amt ,
    xpu.status property_status,
    xbh.created_by,
    xbm.period_duration,
    xbm.due_date,
    xbm.installment_type,
    xbm.invoice_id,
    xbc.cust_id,
    xpu.unit_id,
    xpc.cancel_number,
    xpc.cancel_date
  FROM xxpm_booking_header xbh,
    xxpm_booking_milestones xbm,
    xxpm_booking_detail xbd,
    xxpm_booking_customer xbc,
    xxpm_property_master xpm,
    xxpm_property_units xpu,
    xxpm_property_area xpa,
    xxpm_cancellation xpc
  WHERE xbh.booking_hdr_id  = xbm.booking_hdr_id(+)
  AND xbm.BOOKING_MS_DTL_ID = xbm.BOOKING_MS_DTL_ID+0
  AND xbh.booking_hdr_id    = xbd.booking_hdr_id(+)
  AND xbh.booking_hdr_id    = xbc.booking_hdr_id(+)
  AND xbd.unit_id           = xpu.unit_id(+)
  AND xbd.BOOKING_DTL_ID    = xbd.BOOKING_DTL_ID +0
  AND xbh.property_id       = xpm.property_id(+)
  AND xpu.unit_id           = xpa.unit_id(+)
  AND xpa.AREA_ID           =xpa.AREA_ID+0
  AND xbh.booking_hdr_id    = xpc.booking_id(+)
  AND xpc.CANCEL_ID         = xpc.CANCEL_ID +0
  AND xbh.usage             = 'S'
  AND xpa.area(+)           = 'CHARGE'
  AND xbm.milestone_type   != 'MS'
     AND XBH.STATUS            = 'APR'
  AND TRUNC(xbh.booking_date) <= p_date
  ),
  inv_dtl AS
  (SELECT xih.booking_id,
    xih.invoice_id,
    xil.installment_type,
    xih.due_date,
    xih.interface_status status,
    xih.invoice_date,
    xih.invoice_number,
    SUM(xil.amount) inv_amt
  FROM xxpm_invoice_header xih,
    xxpm_invoice_lines xil
  WHERE xih.invoice_id          = xil.invoice_id(+)
  AND xih.INVOICE_ID            = xih.INVOICE_ID     +0
  AND xil.INVOICE_LINE_ID       = xil.INVOICE_LINE_ID+0
  AND (TRUNC(xih.invoice_date) <= p_date
  OR TRUNC(xih.invoice_date)   IS NULL)
  GROUP BY xih.booking_id,
    xih.invoice_id,
    xil.installment_type,
    xih.due_date,
    xih.interface_status ,
    xih.invoice_date,
    xih.invoice_number
	having SUM(xil.amount)>0 ---added on 31_MAY_2020
  ),
  rct_dtl AS
  (SELECT xrd.invoice_id,
    xrd.receipt_id ,
    CASE
      WHEN PAY_MODE NOT IN ('300000002556165','300000002556160')
      THEN SUM(NVL(xrd.amount_applied,0))
      ELSE 0
    END received_amt,
    xpr.receipt_date,
    CASE
      WHEN xpr.PAY_MODE IN ('300000002556165')
      THEN SUM(NVL(xrd.amount_applied,0))
      ELSE 0
    END ADJ_REC,
    CASE
      WHEN xpr.PAY_MODE IN ('300000002556160')
      THEN SUM(NVL(xrd.amount_applied,0))
      ELSE 0
    END DIS_REC
  FROM xxpm_receipt_details xrd,
    xxpm_receipt xpr
  WHERE xrd.receipt_id          = xpr.receipt_id(+)
  AND xrd.RECEIPT_DTL_ID        =xrd.RECEIPT_DTL_ID+0
  AND xpr.receipt_id            = xpr.receipt_id   +0
  AND (TRUNC(xrd.applied_date) <= p_date
  OR TRUNC(xrd.applied_date)   IS NULL)
  GROUP BY xrd.invoice_id,
    xrd.receipt_id,
    xpr.receipt_date,
    xpr.PAY_MODE
  )
SELECT bkd.property_id ,
  bkd.BOOKING_MS_DTL_ID,
  bkd.unit_id,
  bkd.unit_no,
  bkd.display_order,
  bkd.unit_cost,
  bkd.unit_area,
  bkd.uom,
  bkd.event_name,
  CASE
    WHEN inv.status IS NULL
    THEN 'Not Invoiced'
    ELSE initcap(inv.status)
  END status,
  bkd.inst_pct_avg,
  NVL(inv.due_date , bkd.due_date) pay_due_date,
  NVL(bkd.inst_amt,0) inst_amt,
  CASE
    WHEN inv.status IS NULL
    THEN 0
    ELSE NVL(bkd.inst_amt,0)
  END inv_amt,
  SUM(NVL(rct.received_amt,0)) received_amt,
  SUM(NVL(rct.ADJ_REC,0)) ADJ_REC,
  SUM(NVL(rct.DIS_REC,0)) DIS_REC,
  CASE
    WHEN inv.status IS NULL
    THEN 0
    ELSE NVL(bkd.inst_amt,0)
  END                 - SUM(NVL(rct.received_amt,0))- SUM(NVL(rct.ADJ_REC,0)) - SUM(NVL(rct.DIS_REC,0))outstanding_amt,
  NVL(bkd.inst_amt,0) - SUM(NVL(rct.received_amt,0))- SUM(NVL(rct.ADJ_REC,0)) - SUM(NVL(rct.DIS_REC,0)) BALANCE,
  bkd.cust_id,
  inv.invoice_number,
  'SPA' milestone_type
FROM booking_dtl bkd ,
  inv_dtl inv,
  rct_dtl rct
WHERE 1                  = 1
AND bkd.booking_hdr_id   = inv.booking_id(+)
AND bkd.invoice_id       = inv.invoice_id(+)
AND bkd.installment_type = inv.installment_type(+)
AND inv.invoice_id       = rct.invoice_id(+)
AND xc.cust_id           = bkd.cust_id
AND bkd.inst_amt       > 0 ---added on 31MAY2020 
  --AND bkd.unit_id          = NVL(p_unit_id , bkd.unit_id)
GROUP BY bkd.property_id ,
  bkd.BOOKING_MS_DTL_ID,
  bkd.unit_id,
  bkd.unit_no,
  bkd.display_order,
  bkd.unit_cost,
  bkd.unit_area,
  bkd.uom,
  bkd.event_name,
  inv.status,
  bkd.inst_pct_avg,
  inv.due_date ,
  bkd.due_date ,
  bkd.inst_amt,
  bkd.period_duration,
  bkd.cust_id,
  inv.invoice_number
UNION ALL
SELECT DISTINCT bkd1.property_id ,
  bkd1.BOOKING_MS_DTL_ID,
  bkd1.unit_id,
  bkd1.unit_no,
  NULL display_order,
  bkd1.unit_cost,
  bkd1.unit_area,
  bkd1.uom,
  'Credit Memo' event_name,
  inv.status status,
  bkd1.inst_pct_avg,
  NVL(inv.due_date , bkd1.due_date) pay_due_date,
  NVL(bkd1.inst_amt,0) * -1 inst_amt,
  NVL(bkd1.inst_amt,0) * -1 inv_amt,
  0 received_amt,
  0 ADJ_REC,
  0 DIS_REC,
  NVL(bkd1.inst_amt,0) * -1 outstanding_amt,
  NVL(bkd1.inst_amt,0) * -1 BALANCE,
  bkd1.cust_id,
  inv.invoice_number,
  'Other' milestone_type
FROM booking_dtl_1 bkd1 ,
  inv_dtl inv
WHERE 1                 = 1
AND bkd1.booking_hdr_id = inv.booking_id(+)
AND bkd1.invoice_id     = inv.invoice_id
AND xc.cust_id          = bkd1.cust_id
AND bkd1.inst_amt  >  0 ---added on 31MAY2020
--AND bkd1.unit_id        = NVL(p_unit_id , bkd1.unit_id)
UNION ALL
SELECT DISTINCT bkd1.property_id ,
  bkd1.BOOKING_MS_DTL_ID,
  bkd1.unit_id,
  bkd1.unit_no,
  NULL display_order,
  bkd1.unit_cost,
  bkd1.unit_area,
  bkd1.uom,
  'Adjustment' event_name,
  NULL status,
  bkd1.inst_pct_avg,
  bkd1.cancel_date pay_due_date,
  0 inst_amt,
  0 inv_amt,
  0 received_amt,
  (SUM(NVL(rct.received_amt,0)) + SUM(NVL(rct.ADJ_REC,0)) + SUM(NVL(rct.DIS_REC,0))) * -1 ADJ_REC,
  0 DIS_REC,
  0 outstanding_amt,
  (SUM(NVL(rct.received_amt,0)) + SUM(NVL(rct.ADJ_REC,0)) + SUM(NVL(rct.DIS_REC,0))) BALANCE,
  bkd1.cust_id,
  bkd1.cancel_number invoice_number,
  'Other' milestone_type
FROM booking_dtl_1 bkd1 ,
  inv_dtl inv,
  rct_dtl rct,
  booking_dtl bkd
WHERE 1                  = 1
AND inv.invoice_id       = rct.invoice_id(+)
AND xc.cust_id           = bkd1.cust_id
AND bkd.booking_hdr_id   = inv.booking_id(+)
AND bkd.invoice_id       = inv.invoice_id(+)
AND bkd.installment_type = inv.installment_type(+)
AND xc.cust_id           = bkd.cust_id
AND bkd.booking_hdr_id   = bkd1.booking_hdr_id
GROUP BY bkd1.property_id ,
  bkd1.BOOKING_MS_DTL_ID,
  bkd1.unit_id,
  bkd1.unit_no,
  bkd1.unit_cost,
  bkd1.unit_area,
  bkd1.uom,
  bkd1.inst_pct_avg,
  bkd1.cancel_date ,
  bkd1.cust_id,
  bkd1.cancel_number
ORDER BY 4,
  5
  ) soa
FROM xxstg_customer xc
WHERE 1        = 1
AND xc.cust_id = p_cust_id;

  
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_CUSTOMER_STATEMENT; 
  
  FUNCTION XXPRISM_SOA_SUMMARY
  (p_cust_id IN VARCHAR2,
   P_DATE IN DATE
   )
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      OPEN l_query_ref FOR   
     
     SELECT 
  XC.CUSTOMER_NAME,
 CURSOR
		( select distinct
       		(NVL2(XCS.ADDRESS1,XCS.ADDRESS1,NULL)||
				NVL2(XCS.ADDRESS2,','||XCS.ADDRESS2,NULL)||
				NVL2(XCS.ADDRESS3,','||XCS.ADDRESS3,NULL)
			   )CUSTOMER_ADDRESS,
			  XCS.CITY,
			  XCS.POSTAL_CODE,
			  XCS.STATE,
			  (select lookup_value_name_disp from xxfnd_lookup_v where XCS.COUNTRY= LOOKUP_VALUE_NAME and lookup_type_name = 'COUNTRY') COUNTRY,
			  XCC.PHONE_NUMBER,
			  XCC.EMAIL_ID,
              XCC.PASSPORT_NUMBER PASSPORT
		FROM
		  XXPM_BOOKING_HEADER XBH, 
		  XXPM_BOOKING_CUSTOMER XBC,
		  XXSTG_CUST_CONTACTS XCC,
		  XXSTG_CUST_SITES XCS
		WHERE 1=1
		AND XBH.BOOKING_HDR_ID   = XBC.BOOKING_HDR_ID
		AND XBC.CUST_ID          = XC.CUST_ID 
		AND XBC.CUST_ID          = XCC.CUST_ID(+)
		AND XBC.CUST_ID          = XCS.CUST_ID(+)
		AND XBH.ORG_ID           = XCS.ORG_ID(+)
		)CUST_ADDRESS,
   CURSOR
  (SELECT distinct
    XBC.CUST_ID  BK_CUS,
    BKSTG.CUSTOMER_NAME  JOIN_OWNER_NAME
    FROM 
    XXPM_BOOKING_CUSTOMER_DTL XBC,
    XXSTG_CUSTOMER BKSTG
    WHERE 1=1
	AND XBC.BOOKING_CUST_ID  = XC.CUST_ID
    AND XBC.CUST_ID 		 = BKSTG.CUST_ID
  ) JOINT_OWNER,

 CURSOR
 (SELECT unit_no,
   SUM(inst_amt) inst_amt_s,
   SUM(inv_amt) inv_amt_s,
   SUM(received_amt) received_amt_s,
   SUM(adj_rec) adj_rec_s,
   SUM(dis_rec) dis_rec_s,
   SUM(outstanding_amt) outstanding_amt_s,
   SUM(balance) balance_s,
   (SUM(inv_amt) / SUM(inst_amt)) * 100 inv_perc
 FROM
   (WITH booking_dtl AS
   (SELECT xbm.ms_dtl_id,
     xbh.booking_hdr_id,
     xbm.BOOKING_MS_DTL_ID,
     xbh.booking_number,
     xpm.property_id,
     xpm.property_name,
     xpu.unit_name unit_no,
     xbd.booking_rate unit_cost,
     xpa.value unit_area,
     xpa.uom uom,
     xbd.booking_rate sqft_price,
     CASE
       WHEN xmd.installment_event IS NOT NULL
       THEN
         CASE
           WHEN xlv1.lookup_value_name_disp IS NOT NULL
           THEN xlv.lookup_value_name_disp
             ||'-'
             ||xlv1.lookup_value_name_disp
           ELSE xlv.lookup_value_name_disp
             ||'-'
             ||xmd.installment_event
         END
       ELSE
         CASE
           WHEN xlv1.lookup_value_name_disp IS NOT NULL
           THEN xlv.lookup_value_name_disp
           ELSE xlv.lookup_value_name_disp
         END
     END event_name,
     xbm.installment_pct inst_pct_avg,
     NVL(xbm.installment_amount,0) inst_amt ,
     xpu.status property_status,
     xbh.created_by,
     xbm.period_duration,
     xbm.due_date,
     xbm.installment_type,
     xbm.invoice_id,
     xbc.cust_id,
     xpu.unit_id,
     XBM.SEQ_NUMBER display_order
--      xlv.display_order
   FROM xxpm_booking_header xbh,
     xxpm_booking_milestones xbm,
     xxpm_booking_detail xbd,
     xxpm_booking_customer xbc,
     xxpm_property_master xpm,
     xxpm_property_units xpu,
     xxpm_property_area xpa,
     xxpm_milestone_dtl xmd,
     xxfnd_lookup_types xlt,
     xxfnd_lookup_types xlt1,
     xxfnd_lookup_values xlv,
     xxfnd_lookup_values xlv1
   WHERE xbh.booking_hdr_id  = xbm.booking_hdr_id(+)
   AND xbh.booking_hdr_id    = xbd.booking_hdr_id(+)
   AND xbh.booking_hdr_id    = xbc.booking_hdr_id(+)
   AND xbd.unit_id           = xpu.unit_id(+)
   AND xbd.BOOKING_DTL_ID    = xbd.BOOKING_DTL_ID +0
   AND xbh.property_id       = xpm.property_id(+)
   AND xpu.unit_id           = xpa.unit_id(+)
   AND xpa.AREA_ID           =xpa.AREA_ID+0
   AND xbm.ms_dtl_id         = xmd.ms_dtl_id(+)
   AND xbm.installment_type  = xlv.lookup_value_name(+)
   AND xbm.installment_event = xlv1.lookup_value_name(+)
   AND xbm.BOOKING_MS_DTL_ID = xbm.BOOKING_MS_DTL_ID+0
   AND xlt.lookup_type_id    = xlv.lookup_type_id(+)
   AND xlt1.lookup_type_id   = xlv1.lookup_type_id(+)
   AND xlt.lookup_type_name  = 'MILESTONE_INSTALLMENT'
   AND xlt1.lookup_type_name = 'BOOKING_EVENT'
   AND xbh.usage             = 'S'
   AND xpa.area(+)           = 'CHARGE'
   AND xbm.milestone_type    = 'MS'
      AND XBH.STATUS            = 'APR'
   AND TRUNC(xbh.booking_date) <= p_date
   ),
   booking_dtl_1 AS
   (SELECT xbm.ms_dtl_id,
     xbh.booking_hdr_id,
     xbm.BOOKING_MS_DTL_ID,
     xbh.booking_number,
     xpm.property_id,
     xpm.property_name,
     xpu.unit_name unit_no,
     xbd.booking_rate unit_cost,
     xpa.value unit_area,
     xpa.uom uom,
     xbd.booking_rate sqft_price,
     xbm.installment_pct inst_pct_avg,
     NVL(xbm.installment_amount,0) inst_amt ,
     xpu.status property_status,
     xbh.created_by,
     xbm.period_duration,
     xbm.due_date,
     xbm.installment_type,
     xbm.invoice_id,
     xbc.cust_id,
     xpu.unit_id,
     xpc.cancel_number,
     xpc.cancel_date
   FROM xxpm_booking_header xbh,
     xxpm_booking_milestones xbm,
     xxpm_booking_detail xbd,
     xxpm_booking_customer xbc,
     xxpm_property_master xpm,
     xxpm_property_units xpu,
     xxpm_property_area xpa,
     xxpm_cancellation xpc
   WHERE xbh.booking_hdr_id  = xbm.booking_hdr_id(+)
   AND xbm.BOOKING_MS_DTL_ID = xbm.BOOKING_MS_DTL_ID+0
   AND xbh.booking_hdr_id    = xbd.booking_hdr_id(+)
   AND xbh.booking_hdr_id    = xbc.booking_hdr_id(+)
   AND xbd.unit_id           = xpu.unit_id(+)
   AND xbd.BOOKING_DTL_ID    = xbd.BOOKING_DTL_ID +0
   AND xbh.property_id       = xpm.property_id(+)
   AND xpu.unit_id           = xpa.unit_id(+)
   AND xpa.AREA_ID           =xpa.AREA_ID+0
   AND xbh.booking_hdr_id    = xpc.booking_id(+)
   AND xpc.CANCEL_ID         = xpc.CANCEL_ID +0
   AND xbh.usage             = 'S'
   AND xpa.area(+)           = 'CHARGE'
   AND xbm.milestone_type   != 'MS'
      AND XBH.STATUS            = 'APR'
   AND TRUNC(xbh.booking_date) <= p_date
   ),
   inv_dtl AS
   (SELECT xih.booking_id,
     xih.invoice_id,
     xil.installment_type,
     xih.due_date,
     xih.interface_status status,
     xih.invoice_date,
     xih.invoice_number,
     SUM(xil.amount) inv_amt
   FROM xxpm_invoice_header xih,
     xxpm_invoice_lines xil
   WHERE xih.invoice_id          = xil.invoice_id(+)
   AND xih.INVOICE_ID            = xih.INVOICE_ID     +0
   AND xil.INVOICE_LINE_ID       = xil.INVOICE_LINE_ID+0
   AND (TRUNC(xih.invoice_date) <= p_date
   OR TRUNC(xih.invoice_date)   IS NULL)
   GROUP BY xih.booking_id,
     xih.invoice_id,
     xil.installment_type,
     xih.due_date,
     xih.interface_status ,
     xih.invoice_date,
     xih.invoice_number
   ),
   rct_dtl AS
   (SELECT xrd.invoice_id,
     xrd.receipt_id ,
     CASE
       WHEN PAY_MODE NOT IN ('300000002556165','300000002556160')
       THEN SUM(NVL(xrd.amount_applied,0))
       ELSE 0
     END received_amt,
     xpr.receipt_date,
     CASE
       WHEN xpr.PAY_MODE IN ('300000002556165')
       THEN SUM(NVL(xrd.amount_applied,0))
       ELSE 0
     END ADJ_REC,
     CASE
       WHEN xpr.PAY_MODE IN ('300000002556160')
       THEN SUM(NVL(xrd.amount_applied,0))
       ELSE 0
     END DIS_REC
   FROM xxpm_receipt_details xrd,
     xxpm_receipt xpr
   WHERE xrd.receipt_id          = xpr.receipt_id(+)
   AND xrd.RECEIPT_DTL_ID        =xrd.RECEIPT_DTL_ID+0
   AND xpr.receipt_id            = xpr.receipt_id   +0
   AND (TRUNC(xrd.applied_date) <= p_date
   OR TRUNC(xrd.applied_date)   IS NULL)
   GROUP BY xrd.invoice_id,
     xrd.receipt_id,
     xpr.receipt_date,
     xpr.PAY_MODE
   )
 SELECT bkd.property_id ,
   bkd.BOOKING_MS_DTL_ID,
   bkd.unit_id,
   bkd.unit_no,
   bkd.display_order,
   bkd.unit_cost,
   bkd.unit_area,
   bkd.uom,
   bkd.event_name,
   CASE
     WHEN inv.status IS NULL
     THEN 'Not Invoiced'
     ELSE initcap(inv.status)
   END status,
   bkd.inst_pct_avg,
   NVL(inv.due_date , bkd.due_date) pay_due_date,
   NVL(bkd.inst_amt,0) inst_amt,
   CASE
     WHEN inv.status IS NULL
     THEN 0
     ELSE NVL(bkd.inst_amt,0)
   END inv_amt,
   SUM(NVL(rct.received_amt,0)) received_amt,
   SUM(NVL(rct.ADJ_REC,0)) ADJ_REC,
   SUM(NVL(rct.DIS_REC,0)) DIS_REC,
   CASE
     WHEN inv.status IS NULL
     THEN 0
     ELSE NVL(bkd.inst_amt,0)
   END                 - SUM(NVL(rct.received_amt,0))- SUM(NVL(rct.ADJ_REC,0)) - SUM(NVL(rct.DIS_REC,0))outstanding_amt,
   NVL(bkd.inst_amt,0) - SUM(NVL(rct.received_amt,0))- SUM(NVL(rct.ADJ_REC,0)) - SUM(NVL(rct.DIS_REC,0)) BALANCE,
   bkd.cust_id,
   inv.invoice_number,
   'SPA' milestone_type
 FROM booking_dtl bkd ,
   inv_dtl inv,
   rct_dtl rct
 WHERE 1                  = 1
 AND bkd.booking_hdr_id   = inv.booking_id(+)
 AND bkd.invoice_id       = inv.invoice_id(+)
 AND bkd.installment_type = inv.installment_type(+)
 AND inv.invoice_id       = rct.invoice_id(+)
 AND xc.cust_id           = bkd.cust_id
   --AND bkd.unit_id          = NVL(p_unit_id , bkd.unit_id)
 GROUP BY bkd.property_id ,
   bkd.BOOKING_MS_DTL_ID,
   bkd.unit_id,
   bkd.unit_no,
   bkd.display_order,
   bkd.unit_cost,
   bkd.unit_area,
   bkd.uom,
   bkd.event_name,
   inv.status,
   bkd.inst_pct_avg,
   inv.due_date ,
   bkd.due_date ,
   bkd.inst_amt,
   bkd.period_duration,
   bkd.cust_id,
   inv.invoice_number
 UNION ALL
 SELECT DISTINCT bkd1.property_id ,
   bkd1.BOOKING_MS_DTL_ID,
   bkd1.unit_id,
   bkd1.unit_no,
   NULL display_order,
   bkd1.unit_cost,
   bkd1.unit_area,
   bkd1.uom,
   'Credit Memo' event_name,
   inv.status status,
   bkd1.inst_pct_avg,
   NVL(inv.due_date , bkd1.due_date) pay_due_date,
   NVL(bkd1.inst_amt,0) * -1 inst_amt,
   NVL(bkd1.inst_amt,0) * -1 inv_amt,
   0 received_amt,
   0 ADJ_REC,
   0 DIS_REC,
   NVL(bkd1.inst_amt,0) * -1 outstanding_amt,
   NVL(bkd1.inst_amt,0) * -1 BALANCE,
   bkd1.cust_id,
   inv.invoice_number,
   'Other' milestone_type
 FROM booking_dtl_1 bkd1 ,
   inv_dtl inv
 WHERE 1                 = 1
 AND bkd1.booking_hdr_id = inv.booking_id(+)
 AND bkd1.invoice_id     = inv.invoice_id
 AND xc.cust_id          = bkd1.cust_id
 --AND bkd1.unit_id        = NVL(p_unit_id , bkd1.unit_id)
 UNION ALL
 SELECT DISTINCT bkd1.property_id ,
   bkd1.BOOKING_MS_DTL_ID,
   bkd1.unit_id,
   bkd1.unit_no,
   NULL display_order,
   bkd1.unit_cost,
   bkd1.unit_area,
   bkd1.uom,
   'Adjustment' event_name,
   NULL status,
   bkd1.inst_pct_avg,
   bkd1.cancel_date pay_due_date,
   0 inst_amt,
   0 inv_amt,
   0 received_amt,
   (SUM(NVL(rct.received_amt,0)) + SUM(NVL(rct.ADJ_REC,0)) + SUM(NVL(rct.DIS_REC,0))) * -1 ADJ_REC,
   0 DIS_REC,
   0 outstanding_amt,
   (SUM(NVL(rct.received_amt,0)) + SUM(NVL(rct.ADJ_REC,0)) + SUM(NVL(rct.DIS_REC,0))) BALANCE,
   bkd1.cust_id,
   bkd1.cancel_number invoice_number,
   'Other' milestone_type
 FROM booking_dtl_1 bkd1 ,
   inv_dtl inv,
   rct_dtl rct,
   booking_dtl bkd
 WHERE 1                  = 1
 AND inv.invoice_id       = rct.invoice_id(+)
 AND xc.cust_id           = bkd1.cust_id
 AND bkd.booking_hdr_id   = inv.booking_id(+)
 AND bkd.invoice_id       = inv.invoice_id(+)
 AND bkd.installment_type = inv.installment_type(+)
 AND xc.cust_id           = bkd.cust_id
 AND bkd.booking_hdr_id   = bkd1.booking_hdr_id
 GROUP BY bkd1.property_id ,
   bkd1.BOOKING_MS_DTL_ID,
   bkd1.unit_id,
   bkd1.unit_no,
   bkd1.unit_cost,
   bkd1.unit_area,
   bkd1.uom,
   bkd1.inst_pct_avg,
   bkd1.cancel_date ,
   bkd1.cust_id,
   bkd1.cancel_number
   )
 GROUP BY unit_no
 ORDER BY unit_no
 ) summary
FROM xxstg_customer xc
WHERE 1        = 1
AND xc.cust_id = p_cust_id;

  
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_SOA_SUMMARY; 
  
  
   function XXPRISM_COLLECTION_REPORT( 
    P_PROP_NAME IN VARCHAR2,
    PFROM IN DATE,
    PTO IN DATE
   -- p_date IN DATE
	
    ) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROP_NAME); 
      --dbms_output.Put_line(p_date);
      dbms_output.Put_line(PFROM); 
	  dbms_output.Put_line(PTO); 

      OPEN l_query_ref FOR 
     
     
     SELECT 
     xbh.booking_hdr_id,
  xp.project_name,
  xpb.build_name,
  xpu.unit_name unit_no,
  xbh.booking_number,
  xc.customer_name,
  xpr.receipt_number,
  xpr.pdc_number check_number,
  xpr.receipt_date,
  xpr.mode_of_receipt pay_mode,
  -- xpr.bank_name,
  -- xpr.bank_branch_name,
  -- xpr.bank_account_num,
  
  xrm.rec_bank_name bank_name,
  xrm.rec_bank_branch_name bank_branch_name,
  xrm.rec_bank_acc_num  bank_account_num,
  
  nvl(xpr.receipt_amount, xpr.RECEIVED_AMOUNT) receipt_amount,
  -- xrd.applied_date,
  xpr.pay_rec_date maturity_date,
  CASE
    WHEN TRUNC(xpr.gl_date) <= pto
    THEN SUM(NVL(xrd.amount_applied,0))
    ELSE 0
  END received_amt,
  nvl(xpr.receipt_amount, xpr.RECEIVED_AMOUNT) -
  CASE
    WHEN TRUNC(xpr.gl_date) <= pto
    THEN SUM(NVL(xrd.amount_applied,0))
    ELSE 0
  END unapplied_amount,
  xpr.interface_status status,
  xrm.bank_name remittance_bank
FROM xxpm_booking_header xbh,
  xxpm_booking_milestones xbm,
  xxpm_booking_detail xbd,
  xxpm_booking_customer xbc,
  xxpm_property_master xpm,
  xxpm_property_units xpu,
  xxpm_property_area xpa,
  xxpm_property_buildings xpb,
  xxstg_projects xp,
  xxstg_customer xc,
  xxpm_invoice_header xih,
  xxpm_receipt xpr,
  xxpm_receipt_details xrd,
  xxpm_cancellation xpc,
  xxstg_receipt_method xrm ---for adding remittance bank name on 08APR2020
WHERE xbh.booking_hdr_id = xbm.booking_hdr_id(+)
AND xbh.booking_hdr_id   = xbd.booking_hdr_id(+)
AND xbh.booking_hdr_id   = xbc.booking_hdr_id(+)
AND xbd.unit_id (+)      = xpu.unit_id
AND xbh.property_id      = xpm.property_id(+)
AND xpu.unit_id          = xpa.unit_id(+)
AND xpm.property_id      = xpb.property_id(+)
AND xpb.build_id         = xpu.build_id
AND xpm.project_id       = xp.proj_id(+)
AND xpm.org_id           = xp.org_id(+)
AND xbc.cust_id          = xc.cust_id(+)
AND xbh.booking_hdr_id   = xih.booking_id(+)
AND xbm.invoice_id       = xih.invoice_id(+)
AND xih.invoice_id       = xrd.invoice_id(+)
  --AND xbh.booking_hdr_id   = xpr.source_func_ref_id
AND xpu.unit_id(+)       = xpr.unit_id
AND xpr.receipt_id       = xrd.receipt_id
AND xbh.booking_hdr_id   = xpc.booking_id(+)
AND xpr.org_id		           = xrm.org_id(+)
and xpr.MODE_OF_RECEIPT        = xrm.RECEIPT_METHOD_NAME(+)
and xpr.REMIT_BANK_ACCT_USE_ID = xrm.REMIT_BANK_ACCT_USE_ID(+)

AND xbc.PRIMARY_YN       = 'Y'
AND xbh.usage            = 'S'
AND xpa.area(+)          = 'CHARGE'
AND xpc.cancel_type(+)     != 'UT'
AND xpr.interface_status = 'Unapplied'
AND EXISTS
  (SELECT 1
  FROM xxpm_receipt xr,
    xxpm_receipt_details xrd1
  WHERE xr.receipt_id     = xrd1.receipt_id
  AND xr.receipt_id       = xpr.receipt_id
  AND xrd1.receipt_dtl_id = xrd.receipt_dtl_id
  UNION ALL
  SELECT 1
  FROM xxpm_receipt xr1,
    xxpm_receipt_details xrd2
  WHERE xr1.receipt_id                   = xrd2.receipt_id(+)
  AND xr1.receipt_id                     = xpr.receipt_id
  HAVING SUM(NVL(xrd2.amount_applied,0)) = 0
  )
--AND xpm.property_id = NVL(p_prop_name, xpm.property_id)
AND xpm.property_id = DECODE(P_PROP_NAME,59,xpm.property_id ,P_PROP_NAME)
AND xpr.gl_date    between pfrom and pto
AND NVL(xpc.cancel_date,sysdate)    >= pto

GROUP BY xbh.booking_hdr_id,
  xp.project_name,
  xpb.build_name,
  xpu.unit_name ,
  xbh.booking_number,
  xc.customer_name,
  xpr.receipt_number,
  xpr.gl_date,
  xpr.receipt_date,
  xpr.mode_of_receipt,
  xrm.rec_bank_name ,
  xrm.rec_bank_branch_name ,
  xrm.rec_bank_acc_num ,
  xrm.bank_name,
  nvl(xpr.receipt_amount, xpr.RECEIVED_AMOUNT),
  -- xrd.applied_date,
  -- xrd.gl_date,
  xpr.pay_rec_date ,
  xpr.pdc_number,
  xpr.interface_status
UNION ALL
SELECT xbh.booking_hdr_id,
  xp.project_name,
  xpb.build_name,
  xpu.unit_name unit_no,
  xbh.booking_number,
  xc.customer_name,
  xpr.receipt_number,
  xpr.pdc_number check_number,
  xpr.receipt_date,
  xpr.mode_of_receipt pay_mode,
  xrm.rec_bank_name bank_name,
  xrm.rec_bank_branch_name bank_branch_name,
  xrm.rec_bank_acc_num  bank_account_num,
  nvl(xpr.receipt_amount, xpr.RECEIVED_AMOUNT) receipt_amount,
  -- xrd.applied_date,
  xpr.pay_rec_date maturity_date,
  CASE
    WHEN TRUNC(xpr.gl_date) <= pto
    THEN SUM(NVL(xrd.amount_applied,0))
    ELSE 0
  END received_amt,
  nvl(xpr.receipt_amount, xpr.RECEIVED_AMOUNT) -
  CASE
    WHEN TRUNC(xpr.gl_date) <= pto
    THEN SUM(NVL(xrd.amount_applied,0))
    ELSE 0
  END unapplied_amount,
  xpr.interface_status status,
  xrm.bank_name remittance_bank
FROM xxpm_booking_header xbh,
  xxpm_booking_milestones xbm,
  xxpm_booking_detail xbd,
  xxpm_booking_customer xbc,
  xxpm_property_master xpm,
  xxpm_property_units xpu,
  xxpm_property_area xpa,
  xxpm_property_buildings xpb,
  xxstg_projects xp,
  xxstg_customer xc,
  xxpm_invoice_header xih,
  xxpm_receipt xpr,
  xxpm_receipt_details xrd,
  xxpm_cancellation xpc,
  xxstg_receipt_method xrm
WHERE xbh.booking_hdr_id = xbm.booking_hdr_id(+)
AND xbh.booking_hdr_id   = xbd.booking_hdr_id(+)
AND xbh.booking_hdr_id   = xbc.booking_hdr_id(+)
AND xbd.unit_id (+)      = xpu.unit_id
AND xbh.property_id      = xpm.property_id(+)
AND xpu.unit_id          = xpa.unit_id(+)
AND xpm.property_id      = xpb.property_id(+)
AND xpb.build_id         = xpu.build_id
AND xpm.project_id       = xp.proj_id(+)
AND xpm.org_id           = xp.org_id(+)
AND xbc.cust_id          = xc.cust_id(+)
AND xbh.booking_hdr_id   = xih.booking_id(+)
AND xbm.invoice_id       = xih.invoice_id(+)
AND xih.invoice_id       = xrd.invoice_id(+)
--AND xbh.booking_hdr_id   = xpr.source_func_ref_id
AND xpu.unit_id(+)    = xpr.unit_id
AND xrd.receipt_id         = xpr.receipt_id
AND xbh.booking_hdr_id     = xpc.booking_id(+)

AND xpr.org_id		           = xrm.org_id(+)
and xpr.MODE_OF_RECEIPT        = xrm.RECEIPT_METHOD_NAME(+)
and xpr.REMIT_BANK_ACCT_USE_ID = xrm.REMIT_BANK_ACCT_USE_ID(+)

AND xbc.PRIMARY_YN         = 'Y'
AND xbh.usage              = 'S'
AND xpa.area(+)            = 'CHARGE'
AND xpc.cancel_type(+)     != 'UT'
AND (xpr.interface_status != 'Unapplied'
OR xpr.interface_status   IS NULL)
--AND xpm.property_id        = NVL(p_prop_name, xpm.property_id)
AND xpm.property_id = DECODE(P_PROP_NAME,59,xpm.property_id ,P_PROP_NAME)
--AND xpr.gl_date           <= pto
AND NVL(xpc.cancel_date,sysdate)    >= pto
AND xpr.gl_date    between pfrom and pto
--AND NVL(xpc.cancel_date,sysdate)    > p_to
GROUP BY xbh.booking_hdr_id,
  xp.project_name,
  xpb.build_name,
  xpu.unit_name ,
  xbh.booking_number,
  xc.customer_name,
  xpr.receipt_number,
  xpr.gl_date,
  xpr.receipt_date,
  xpr.mode_of_receipt,
  xrm.rec_bank_name ,
  xrm.rec_bank_branch_name ,
  xrm.rec_bank_acc_num ,
  xrm.bank_name,
  nvl(xpr.receipt_amount, xpr.RECEIVED_AMOUNT),
  -- xrd.applied_date,
  -- xrd.gl_date,
  xpr.pay_rec_date ,
  xpr.pdc_number,
  xpr.interface_status
ORDER BY 4;

  
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_COLLECTION_REPORT; 
  
  function XXPRISM_ERROR_STATUS
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      OPEN l_query_ref FOR 
     
     
 SELECT 'Invoice' rep_type,
  xih.invoice_number trx_no,
  xih.invoice_date trx_date,
  xih.booking_number,
  xil.unit_number,
  SUM(xil.line_amount) amount,
  DECODE(xih.interface_status,'ERROR','User to validate', xih.interface_status) interface_status,
  TO_CHAR(xih.interface_error_msg) error_msg,
  xih.status,
  xo.org_name,
  xo.org_name_tl proj_name,
  xc.customer_number,
  xc.customer_name,
  trunc(xih.created_date) creation_date,
  inv_type.charge_type
FROM xxpm_invoice_header xih,
  xxpm_invoice_lines xil,
  xxstg_organizations xo,
  xxstg_customer xc,
  (SELECT invoice_id,
    DECODE(charge_type, 'CMC', 'Credit Memo', 'SOU', 'Invoice', 'CAN_DEB_MO', 'Debit Memo') charge_type
  FROM xxpm_booking_milestones
  ) inv_type
WHERE 1                   = 1
AND xih.invoice_id        = xil.invoice_id(+)
AND xih.org_id            = xo.org_id(+)
AND xih.cust_id           = xc.cust_id(+)
AND xih.interface_status IN ('Error', 'ERROR','PROCESSED','BASE_TABLE_ERROR') --BASE_TABLE_ERROR added on 14JUL2020
AND xih.invoice_id        = inv_type.invoice_id(+)
GROUP BY xih.invoice_number,
  xih.invoice_date,
  xih.booking_number,
  xil.unit_number,
  xih.interface_status,
  TO_CHAR(xih.interface_error_msg),
  xih.status,
  xo.org_name,
  xo.org_name_tl,
  xc.customer_number,
  xc.customer_name,
  xih.created_date,
  inv_type.charge_type
UNION ALL
SELECT 'Receipt' rep_type,
  xpr.receipt_number trx_no,
  xpr.receipt_date trx_date,
  NULL booking_number,
  xpu.unit_name unit_number,
  xpr.receipt_amount amount,
  xpr.interface_status,
  TO_CHAR(xpr.interface_error_msg) error_msg,
  xpr.status,
  xo.org_name,
  xo.org_name_tl proj_name,
  xc.customer_number,
  xc.customer_name,
  trunc(xpr.creation_date) creation_date,
  NULL charge_type
FROM xxpm_receipt xpr,
  xxstg_organizations xo,
  xxstg_customer xc,
  xxpm_property_units xpu
WHERE 1                   = 1
AND xpr.org_id            = xo.org_id(+)
AND xpr.cust_id           = xc.cust_id(+)
AND xpr.unit_id           = xpu.unit_id(+)
AND xpr.interface_status IN ('Draft','ERROR','Error','PROCESSED')
UNION ALL
SELECT 'Receipt_Dtl' rep_type,
  xpr.receipt_number trx_no,
  xpr.receipt_date trx_date,
  NULL booking_number,
  xpu.unit_name unit_number,
  xpr.receipt_amount amount,
  xrd.interface_status,
  TO_CHAR(xrd.interface_error_msg) error_msg,
  NULL status,
  xo.org_name,
  xo.org_name_tl proj_name,
  xc.customer_number,
  xc.customer_name,
  NVL(trunc(xrd.creation_date), trunc(xrd.applied_date)) creation_date,
  NULL charge_type
FROM xxpm_receipt_details xrd,
  xxpm_receipt xpr,
  xxstg_organizations xo,
  xxstg_customer xc,
  xxpm_property_units xpu
WHERE 1                       = 1
AND xrd.receipt_id            = xpr.receipt_id
AND xpr.org_id                = xo.org_id
AND xpr.cust_id               = xc.cust_id
AND xpr.unit_id               = xpu.unit_id
AND xrd.interface_status NOT IN ('Applied');
--AND xrd.interface_status IN ('Applied');

  
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
--      RETURN ( NULL ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_ERROR_STATUS; 


function XXPRISM_SALES_REPORT( 
    p_bu_id IN VARCHAR2,
    p_unit_type IN VARCHAR2,
    p_date_from IN DATE,
    p_date_to IN DATE
    )
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      OPEN l_query_ref FOR 
     
 SELECT
    booking_hdr_id
   ,booking_number
   ,booking_date
   ,offer_number
   ,customer_name
   ,org_name
   ,agent_name
   ,agency_name
   ,nationality
   ,project_name
   ,floor_number
   ,unit_number
   ,unit_type
   ,unit_type_disp
   ,tot_car_park
   ,view_type
   ,unit_area
   ,unit_cost
   ,booking_amount
   ,selling_price
   ,received_amt
   ,approval_status
   ,unit_status
   ,inv_status
   ,creation_date
   ,spa_flag
   ,created_by
   ,milestone_name
   ,lead_source_name
   ,request_id
   ,sales_manager_name
   ,spa_date
   ,reser_contract_date
   ,man_n_non
   ,fur_n_non
   ,interior_sch
   ,Anti_compl_date
   ,case when disc_amount < 0 then disc_amount end disc_pct
   ,Decode (unit_area,0,0,(selling_price/unit_area)) sold_rate_per_sq_ft
   ,(selling_price - received_amt) total_out_standing
   ,nvl(total_credits,0)total_credits
   ,(selling_price - received_amt) - nvl(total_credits,0) net_outstanding 
   
FROM(SELECT 
  xbh.booking_hdr_id,
  xbh.booking_number,
  xbh.booking_date,
  xoh.offer_hdr_id,
  xoh.offer_number,
  xc.customer_name,
  xo.org_id,
  xo.org_name,
  xoh.agent_name,
  xoh.agency_name,
  xlv1.lookup_value_name_disp nationality,
  xp.project_name,
  xpu.floor_number,
  xpu.unit_number,
  xpu.unit_type,
  xlv.lookup_value_name_disp unit_type_disp,
  (SELECT COUNT(carpark_id) FROM xxpm_property_carparks xpc
                             WHERE xpc.unit_id = xbd.unit_id) tot_car_park,
  nvl((select LOOKUP_VALUE_NAME_DISP from xxfnd_lookup_v 
									 where LOOKUP_VALUE_NAME=xpu.view_type
									 and LOOKUP_TYPE_NAME  = 'UNIT_VIEW_TYPE' ),xpu.view_type) view_type,
  xpa.value unit_area,
  xbd.booking_rate unit_cost,
  xbd.booking_amount,
  -- xbd.disc_pct,
  -- xbd.disc_amount,
  (SELECT SUM(installment_amount)
  FROM xxpm_booking_milestones
  WHERE xbh.booking_hdr_id = booking_hdr_id(+)
  AND charge_type NOT     IN ('CMC','CAN_DEB_MO')
  ) selling_price,
  (xbd.booking_amount - (SELECT SUM(installment_amount)
						  FROM xxpm_booking_milestones
						  WHERE xbh.booking_hdr_id = booking_hdr_id(+)
						  AND charge_type NOT     IN ('CMC','CAN_DEB_MO')
						)) disc_amount,
  SUM(NVL(xrd.amount_applied,0)) received_amt,
  (select LOOKUP_VALUE_NAME_DISP from xxfnd_lookup_v 
								 where LOOKUP_VALUE_NAME=xbh.status 
								 and LOOKUP_TYPE_NAME  ='BOOKING_STATUS')approval_status, 
  (select LOOKUP_VALUE_NAME_DISP from xxfnd_lookup_v 
								 where LOOKUP_VALUE_NAME=xpu.status 
								 and LOOKUP_TYPE_NAME  ='UNIT_STATUS')unit_status, 
  (select LOOKUP_VALUE_NAME_DISP from xxfnd_lookup_v 
								 where LOOKUP_VALUE_NAME=xih.status 
								 and LOOKUP_TYPE_NAME  ='TRANSACTION_STATUS')inv_status,
  TRUNC(xbh.creation_date) creation_date,
  NVL(xbe.active_yn, 'N') spa_flag,
  xbh.created_by,
  xmh.milestone_name ,
  xoh.lead_source_name,
  CASE
    WHEN xoh.offer_number LIKE 'O-%'
    THEN 'Y'
    ELSE 'N'
  END request_id,
  xoh.sales_manager_name,
  case when xbe.EVENT_TYPE='SSD' then xbe.EVENT_DATE end SPA_DATE,
  case when xbe.EVENT_TYPE='OSRERCONT' then xbe.EVENT_DATE end Reser_contract_date,
  case when xbe.EVENT_TYPE='ACD' then xbe.EVENT_DATE end Anti_compl_date,
  xpu.unit_segment man_n_non,
  null fur_n_non,
  (select LOOKUP_VALUE_NAME_DISP from xxfnd_lookup_v 
                               where LOOKUP_VALUE_NAME=xpu.unit_class
                               and LOOKUP_TYPE_NAME='UNIT_CLASS') interior_sch,
  (case when xrm.receipt_method_name='Discount Receipt'
       then SUM(NVL(xrd.amount_applied,0))
	   else 0
	   end ) Total_Credits
 
FROM xxpm_booking_header xbh,
  xxpm_offer_header xoh,
  xxpm_booking_detail xbd,
  xxpm_booking_customer xbc,
  xxpm_property_master xpm,
  xxpm_property_units xpu,
  xxpm_property_area xpa,
  xxstg_projects xp,
  xxstg_customer xc,
  xxstg_cust_sites xcs,
  xxstg_organizations_v xo,
  xxpm_invoice_header xih,
  xxpm_receipt_details xrd,
  xxpm_receipt xpr,
  xxstg_receipt_method xrm,----added on 24-JUN-2020 for calculate total credits
  xxpm_milestone_hdr xmh,
  xxpm_booking_events xbe,
  xxfnd_lookup_v xlv,
  xxfnd_lookup_v xlv1

WHERE xbh.offer_hdr_id   	   = xoh.offer_hdr_id(+)
AND xbh.booking_hdr_id   	   = xbd.booking_hdr_id(+)
AND xbh.booking_hdr_id   	   = xbc.booking_hdr_id(+)
AND xbd.unit_id          	   = xpu.unit_id(+)
AND xbh.property_id      	   = xpm.property_id(+)
AND xpu.unit_id          	   = xpa.unit_id(+)
AND xpm.project_id       	   = xp.proj_id(+)
AND xpm.org_id           	   = xp.org_id(+)
AND xbc.cust_id          	   = xc.cust_id(+)
AND xc.cust_id           	   = xcs.cust_id(+)
AND xbh.org_id           	   = xcs.org_id(+)
AND xbh.org_id           	   = xo.org_id(+)
AND xbh.booking_hdr_id   	   = xih.booking_id(+)
AND xih.invoice_id       	   = xrd.invoice_id(+)
AND xrd.receipt_id       	   = xpr.receipt_id(+)
AND xbh.ms_hdr_id        	   = xmh.ms_hdr_id(+)
AND xbh.booking_hdr_id   	   = xbe.booking_hdr_id(+)
AND xpu.unit_type        	   = xlv.lookup_value_name(+)
AND xcs.country          	   = xlv1.lookup_value_name(+)
AND xbc.primary_yn       	   = 'Y'
AND xbh.usage            	   = 'S'
AND xpa.area(+)          	   = 'CHARGE'
AND xlv.lookup_type_name 	   = 'UNIT_TYPE'
AND xlv1.lookup_type_name	   = 'COUNTRY'
AND xpu.status                 in('BOOK','SOLD','HR')
AND xpr.org_id		           = xrm.org_id(+)
and xpr.pay_mode               = xrm.receipt_method_id(+)
and xpr.REMIT_BANK_ACCT_USE_ID = xrm.REMIT_BANK_ACCT_USE_ID(+)
AND xo.org_id                  = DECODE(p_bu_id,1,xo.org_id ,p_bu_id)
  --AND xlv.LOOKUP_VALUE_ID        = NVL(p_unit_type, xlv.LOOKUP_VALUE_ID)
AND xbh.booking_date BETWEEN NVL(p_date_from, xbh.booking_date) AND NVL(p_date_to, xbh.booking_date)
GROUP BY xbh.booking_hdr_id,
  xbh.booking_number,
  xbh.booking_date,
  xoh.offer_hdr_id,
  xoh.offer_number,
  xc.customer_name,
  xo.org_id,
  xo.org_name,
  xoh.agent_name,
  xoh.agency_name,
  xlv1.lookup_value_name_disp,
  xp.project_name,
  xpu.floor_number,
  xpu.unit_number,
  xpu.unit_type,
  xlv.lookup_value_name_disp,
  xpu.view_type,
  xpa.value ,
  xbd.booking_rate ,
  xbd.booking_amount,
  xbh.status,
  xbh.creation_date,
  xbh.created_by,
  xmh.milestone_name,
  xpu.status,
  xbe.active_yn,
  xih.status ,
  xoh.lead_source_name,
  xoh.sales_manager_name,
  xbd.unit_id,
  case when xbe.EVENT_TYPE='SSD' then xbe.EVENT_DATE end ,
  case when xbe.EVENT_TYPE='OSRERCONT' then xbe.EVENT_DATE end,
  case when xbe.EVENT_TYPE='ACD' then xbe.EVENT_DATE end,
  xpu.unit_class,
  xpu.unit_segment,
  xrm.receipt_method_name
  )
  Order by booking_number,unit_number,floor_number;
  
  
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_SALES_REPORT; 
  
  
  function XXPRISM_CANCELLATION( 
    p_prop_name IN VARCHAR2,
    p_date IN DATE
    )
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      OPEN l_query_ref FOR 
     
     
     SELECT xpm.property_id,
  xpm.property_name,
  xp.proj_id,
  xp.project_name,
  xpu.unit_id,
  xpu.unit_name unit_no,
  xbh.booking_hdr_id,
  xbh.booking_number,
  xpu.unit_type,
  xc.cust_id,
  xc.customer_name,
  xpa.value unit_area,
  xbd.booking_rate unit_cost,
  xbd.booking_amount,
  SUM(NVL(xil.amount,0)) + SUM(NVL(xil.tax_amount,0)) inv_amt,
  SUM(NVL(xrd.amount_applied,0)) received_amt,
  xpa.uom uom,
  xpc.description,
  xbh.booking_date,
  xpc.cancel_date,
  xpc.created_by cancelled_by,
  xpc.cancel_number,
  xpu.status property_status,
  xoh.agent_name,
  COUNT(DISTINCT free_car_park.carpark_id) free_car_park,
  COUNT(DISTINCT paid_car_park.carpark_id) paid_car_park,
  SUM(NVL(car_park_amt.installment_amount,0)) car_park_amt
FROM xxpm_cancellation xpc,
  xxpm_booking_header xbh,
  xxpm_booking_detail xbd,
  xxpm_booking_customer xbc,
  xxpm_property_master xpm,
  xxpm_property_units xpu,
  xxpm_property_area xpa,
  xxstg_projects xp,
  xxstg_customer xc,
  xxpm_offer_header xoh,
  xxpm_invoice_header xih,
  xxpm_invoice_lines xil,
  xxpm_receipt_details xrd,
  xxpm_receipt xpr,
  (SELECT unit_id,
    carpark_id
  FROM xxpm_property_carparks
  WHERE allot_type = 'FREE'
  ) free_car_park,
  (SELECT unit_id,
    carpark_id
  FROM xxpm_property_carparks
  WHERE allot_type = 'PAID'
  ) paid_car_park,
  (SELECT booking_hdr_id,
    (installment_amount) installment_amount
  FROM xxpm_booking_milestones
  WHERE milestone_type = 'Fix'
  AND installment_type = 'CAR_PARKING'
  ) car_park_amt
WHERE xpc.booking_id   = xbh.booking_hdr_id(+)
AND xbh.booking_hdr_id = xbd.booking_hdr_id(+)
AND xbh.booking_hdr_id = xbc.booking_hdr_id(+)
AND xbd.unit_id        = xpu.unit_id(+)
AND xbh.property_id    = xpm.property_id(+)
AND xpu.unit_id        = xpa.unit_id(+)
AND xpm.project_id     = xp.proj_id(+)
AND xpm.org_id         = xp.org_id(+)
AND xbc.cust_id        = xc.cust_id(+)
AND xbh.offer_hdr_id   = xoh.offer_hdr_id(+)
AND xbh.booking_hdr_id = xih.booking_id(+)
AND xih.invoice_id     = xil.invoice_id(+)
AND xih.invoice_id     = xrd.invoice_id(+)
AND xrd.receipt_id     = xpr.receipt_id(+)
AND xpu.unit_id        = free_car_park.unit_id(+)
AND xpu.unit_id        = paid_car_park.unit_id(+)
AND xpr.unit_id        = free_car_park.unit_id(+)
AND xpr.unit_id        = paid_car_park.unit_id(+)
AND xbh.booking_hdr_id = car_park_amt.booking_hdr_id(+)
AND xbc.primary_yn     = 'Y'
AND xpm.property_id    = DECODE(p_prop_name,59,xpm.property_id ,p_prop_name)
AND xpc.cancel_date   <= p_date
GROUP BY xpm.property_id,
  xpm.property_name,
  xp.proj_id,
  xp.project_name,
  xpu.unit_id,
  xpu.unit_name ,
  xbh.booking_hdr_id,
  xbh.booking_number,
  xpu.unit_type,
  xc.cust_id,
  xc.customer_name,
  xpa.value ,
  xbd.booking_rate ,
  xbd.booking_amount,
  xpa.uom ,
  xpc.description,
  xbh.booking_date,
  xpc.cancel_date,
  xpc.created_by ,
  xpc.cancel_number,
  xpu.status,
  xoh.agent_name
ORDER BY xp.project_name,
  xpu.unit_name;

  
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_CANCELLATION; 
  

 function XXPRISM_PDC_REPORT( 
    P_PROP_NAME IN VARCHAR2,
    P_DATE IN DATE
    ) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROP_NAME); 
      dbms_output.Put_line(P_DATE); 
      OPEN l_query_ref FOR 
     
     
        SELECT    
            BOOK.booking_hdr_id,
            BOOK.booking_number,
			PROP.build_name,
			PROP.unit_no,
			PROP.unit_id,
			xp.project_name,
			xc.customer_name,
			xpr.receipt_number,
			xpr.receipt_date,
			SUM(nvl(xpr.receipt_amount, xpr.received_amount)) receipt_amount,
			xpr.pdc_number ,
			xpr.pdc_date,
			xpr.pdc_remarks,
			xpr.mode_of_receipt pay_mode,
			xrm.rec_bank_name bank_name,
			xrm.rec_bank_branch_name bank_branch_name,
			xrm.rec_bank_acc_num  bank_account_num,
			xrm.bank_name remittance_bank,
			xpr.interface_status status
			
		FROM 
		  
		  (
		  SELECT 
		         xbh.booking_hdr_id
				,xbh.booking_number
				,xbh.property_id
				,xbm.invoice_id
				,xbd.unit_id 
				,xbc.cust_id
				
		  FROM
		  xxpm_booking_header xbh,
		  xxpm_booking_milestones xbm,
		  xxpm_booking_detail xbd,
		  xxpm_booking_customer xbc
		  WHERE 1=1
		  AND xbh.booking_hdr_id 	   = xbm.booking_hdr_id(+)
		  AND xbh.booking_hdr_id   	   = xbd.booking_hdr_id(+)
		  AND xbh.booking_hdr_id   	   = xbc.booking_hdr_id(+)
		  AND xbc.PRIMARY_YN      	   = 'Y'
		  AND xbh.usage           	   = 'S'
		  )BOOK,
		  (SELECT
				 xpm.property_id
				,xpm.project_id
				,xpm.org_id
				,xpu.unit_id
				,xpu.build_id
				,xpu.unit_name unit_no
				,xpb.build_name
				
		  
		  FROM
		  xxpm_property_master xpm,
		  xxpm_property_units xpu,
		  xxpm_property_area xpa,
		  xxpm_property_buildings xpb
		  WHERE 1=1
		  AND xpm.property_id      	   = xpb.property_id(+)
		  AND xpu.unit_id          	   = xpa.unit_id(+)
		  AND xpm.property_id      	   = xpb.property_id(+)
		  AND xpb.build_id         	   = xpu.build_id
		  AND xpa.area(+)         	   = 'CHARGE'
		  )PROP,
		  xxstg_projects xp,
		  xxstg_customer xc,
		  xxpm_invoice_header xih,
		  xxpm_receipt xpr,		  
		  xxpm_cancellation xpc,
		  xxstg_receipt_method xrm 
		WHERE 1=1
		AND PROP.unit_id               = BOOK.unit_id
		AND BOOK.property_id      	   = PROP.property_id(+)
		AND PROP.project_id       	   = xp.proj_id(+)
		AND PROP.org_id           	   = xp.org_id(+)
		AND BOOK.cust_id          	   = xc.cust_id(+)
		AND BOOK.booking_hdr_id   	   = xih.booking_id(+)
		AND BOOK.invoice_id       	   = xih.invoice_id(+)
		AND xpr.unit_id       	       = PROP.unit_id 
		AND BOOK.booking_hdr_id   	   = xpc.booking_id(+)
		AND xpr.org_id		           = xrm.org_id(+)
		and xpr.MODE_OF_RECEIPT        = xrm.RECEIPT_METHOD_NAME(+)
		and xpr.REMIT_BANK_ACCT_USE_ID = xrm.REMIT_BANK_ACCT_USE_ID(+)
		AND xpc.cancel_type(+)  	  != 'UT'
		
		-- AND xpr.receipt_number			   = '18693'
		AND PROP.property_id 		   = DECODE(P_PROP_NAME,59,PROP.property_id ,P_PROP_NAME)
        AND xpr.pdc_date <=  p_date
	GROUP BY
	        BOOK.booking_hdr_id,
            BOOK.booking_number,
			PROP.build_name,
			PROP.unit_no,
			PROP.unit_id,
			xp.project_name,
			xc.customer_name,
			xpr.receipt_number,
			xpr.receipt_date,
			xpr.pdc_number ,
			xpr.pdc_date,
			xpr.pdc_remarks,
			xpr.mode_of_receipt ,
			xrm.rec_bank_name ,
			xrm.rec_bank_branch_name ,
			xrm.rec_bank_acc_num  ,
			xrm.bank_name ,
			xpr.interface_status 

ORDER BY 2,3,4;
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 
	  
      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_PDC_REPORT; 
  
 FUNCTION XXPRISM_UNIT_STATUS_NEW (
                      P_PROJ_NAME IN VARCHAR2
                      ,P_PROP_NAME IN VARCHAR2) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROJ_NAME); 
      dbms_output.Put_line(P_PROP_NAME);

      OPEN l_query_ref FOR 

SELECT 
  XBH.BOOKING_HDR_ID BOOKING_HDR_ID,
  XBH.BOOKING_NUMBER BOOKING_NUMBER,
  XP.PROJECT_NUMBER PROJECT_NUMBER,
  XP.PROJECT_NAME PROJECT_NAME,
  XPU.UNIT_NUMBER UNIT_NO,
  XC.CUSTOMER_NAME CUSTOMER,
  (CASE WHEN XPU.STATUS in('BOOK','SOLD','HR')
        THEN XBD.BOOKING_AMOUNT
	    ELSE (select XPL.PL_AMOUNT from XXPM_PL_LINES XPL where XPU.PROPERTY_ID = XPL.PROPERTY_ID
															AND XPU.UNIT_ID     = XPL.UNIT_ID
															AND ROWNUM =1
			 )
	   END ) UNIT_COST,
  XPA.VALUE UNIT,
  XPA.UOM AREA,
  (select XPL.BASE_PRICE from XXPM_PL_LINES XPL where  XPU.PROPERTY_ID = XPL.PROPERTY_ID
												AND    XPU.UNIT_ID     = XPL.UNIT_ID
												AND    ROWNUM =1) SQFT_PRICE,
  (select LOOKUP_VALUE_NAME_DISP from xxfnd_lookup_v where LOOKUP_VALUE_NAME=XPU.STATUS and LOOKUP_TYPE_NAME='UNIT_STATUS') STATUS,
  nvl((select LOOKUP_VALUE_NAME_DISP from xxfnd_lookup_v 
									 where LOOKUP_VALUE_NAME=XPU.VIEW_TYPE
									 and LOOKUP_TYPE_NAME  = 'UNIT_VIEW_TYPE' ),xpu.view_type) view_type,
  XPU.FLOOR_NUMBER,
  XPU.NO_OF_ROOMS,
  XPU.UNIT_SEGMENT Man_n_nonman,
  (SELECT COUNT(carpark_id)
  FROM xxpm_property_carparks xpc
  WHERE xpc.unit_id = xbd.unit_id
  ) tot_car_park,
  XPU.UNIT_TYPE,
  case when xbe.EVENT_TYPE='SSD' then xbe.EVENT_DATE end SPA_DATE,
  (select LOOKUP_VALUE_NAME_DISP from xxfnd_lookup_v 
                               where LOOKUP_VALUE_NAME=xpu.unit_class
                               and LOOKUP_TYPE_NAME='UNIT_CLASS')INTERIOR_SCHEMA
  
FROM XXPM_BOOKING_HEADER XBH,
  XXPM_BOOKING_DETAIL XBD,
  XXPM_BOOKING_CUSTOMER XBC,
  XXPM_PROPERTY_MASTER XPM,
  XXPM_PROPERTY_UNITS XPU,
  XXPM_PROPERTY_AREA XPA,
  XXSTG_PROJECTS XP,
  XXSTG_CUSTOMER XC,
  XXPM_BOOKING_EVENTS XBE
WHERE 1=1
AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID
AND XBD.UNIT_ID           = XPU.UNIT_ID
AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID
AND XPM.PROPERTY_ID       = XPU.PROPERTY_ID
AND XPU.UNIT_ID           = XPA.UNIT_ID
AND XPM.PROJECT_ID        = XP.PROJ_ID
AND XPM.ORG_ID            = XP.ORG_ID
AND XBC.CUST_ID           = XC.CUST_ID
AND XBC.PRIMARY_YN        = 'Y'
AND XBH.STATUS            <> 'CANCEL'
AND XPU.UNIT_TYPE         <> 'CAR_PARKING'
AND XBH.BOOKING_HDR_ID    = XBE.BOOKING_HDR_ID(+)
AND XP.PROJ_ID            = NVL(P_PROJ_NAME, XP.PROJ_ID)
AND XPM.PROPERTY_ID       = DECODE(P_PROP_NAME,59,XPM.PROPERTY_ID ,P_PROP_NAME)
-- AND XBH.BOOKING_HDR_ID=2670
ORDER BY XBH.BOOKING_NUMBER,XPU.FLOOR_NUMBER;

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  END XXPRISM_UNIT_STATUS_NEW; 
  
     function XXPRISM_PDC_DUE_REPORT( 
    P_DUE_ALERT IN VARCHAR2
    ) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_DUE_ALERT); 
	  
      OPEN l_query_ref FOR 
	  
       SELECT 
             project_name
			,sub_project
			,unit_no
			,receipt_amount pdc_amount
			,pdc_number 
			,pdc_date
			,(pdc_date -1) due_date
			,pdc_remarks
			,pdc_due
			,receipt_number
            ,case when p_due_alert='Y' and pdc_due='Y' then 'print'
                  when p_due_alert='Y' and pdc_due='N' then 'No print'
                  end layout_check
				
       FROM(
	    SELECT   
		      xp.project_name,
		      BOOK.booking_hdr_id,
			  BOOK.booking_number,
			  PROP.build_name sub_project,
			  PROP.unit_no,
			  xc.customer_name,
			  xpr.receipt_number,
			  xpr.receipt_date,
			  nvl(xpr.receipt_amount, xpr.received_amount) receipt_amount,
			  xpr.pdc_number ,
			  xpr.pdc_date,
			  case when (xpr.pdc_date - 1) = trunc(sysdate)
			       then 'Y'
				   else 'N'
			  end pdc_due,
			  xpr.pdc_remarks,
			  xpr.mode_of_receipt pay_mode,
			  xpr.interface_status status,
			  xrm.rec_bank_name bank_name,
			  xrm.rec_bank_branch_name bank_branch_name,
			  xrm.rec_bank_acc_num  bank_account_num,
			  xrm.bank_name remittance_bank
		FROM 
		(
		  SELECT 
		         xbh.booking_hdr_id
				,xbh.booking_number
				,xbh.property_id
				,xbm.invoice_id
				,xbd.unit_id 
				,xbc.cust_id
				
		  FROM
		  xxpm_booking_header xbh,
		  xxpm_booking_milestones xbm,
		  xxpm_booking_detail xbd,
		  xxpm_booking_customer xbc
		  WHERE 1=1
		  AND xbh.booking_hdr_id 	   = xbm.booking_hdr_id(+)
		  AND xbh.booking_hdr_id   	   = xbd.booking_hdr_id(+)
		  AND xbh.booking_hdr_id   	   = xbc.booking_hdr_id(+)
		  AND xbc.PRIMARY_YN      	   = 'Y'
		  AND xbh.usage           	   = 'S'
		  )BOOK,
		  (SELECT
				 xpm.property_id
				,xpm.project_id
				,xpm.org_id
				,xpu.unit_id
				,xpu.build_id
				,xpu.unit_name unit_no
				,xpb.build_name
				
		  
		  FROM
		  xxpm_property_master xpm,
		  xxpm_property_units xpu,
		  xxpm_property_area xpa,
		  xxpm_property_buildings xpb
		  WHERE 1=1
		  AND xpm.property_id      	   = xpb.property_id(+)
		  AND xpu.unit_id          	   = xpa.unit_id(+)
		  AND xpm.property_id      	   = xpb.property_id(+)
		  AND xpb.build_id         	   = xpu.build_id
		  AND xpa.area(+)         	   = 'CHARGE'
		  )PROP,
		  xxstg_projects xp,
		  xxstg_customer xc,
		  xxpm_invoice_header xih,
		  xxpm_receipt xpr,	
		  xxpm_receipt_details xrd,		  
		  xxpm_cancellation xpc,
		  xxstg_receipt_method xrm 
		WHERE 1=1
		AND PROP.unit_id               = BOOK.unit_id
		AND BOOK.property_id      	   = PROP.property_id(+)
		AND PROP.project_id       	   = xp.proj_id(+)
		AND PROP.org_id           	   = xp.org_id(+)
		AND BOOK.cust_id          	   = xc.cust_id(+)
		AND BOOK.booking_hdr_id   	   = xih.booking_id(+)
		AND BOOK.invoice_id       	   = xih.invoice_id(+)
		AND xih.invoice_id             = xrd.invoice_id(+)
		AND xpr.unit_id       	       = PROP.unit_id 
		AND xpr.receipt_id             = xrd.receipt_id
		AND BOOK.booking_hdr_id   	   = xpc.booking_id(+)
		AND xpr.org_id		           = xrm.org_id(+)
		and xpr.MODE_OF_RECEIPT        = xrm.RECEIPT_METHOD_NAME(+)
		and xpr.REMIT_BANK_ACCT_USE_ID = xrm.REMIT_BANK_ACCT_USE_ID(+)
		AND xpc.cancel_type(+)  	  != 'UT'
		)
        WHERE 1=1
        and pdc_date is not null
		AND pdc_due = nvl(p_due_alert,pdc_due)
		   -- AND pdc_due = 'N'
     ORDER BY 2,3,4;
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 
	  
      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_PDC_DUE_REPORT;
  
  FUNCTION XXPRISM_EMAIL_RECEIPT_REPORT(P_RECP_NUM IN VARCHAR2)
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB;
	LN_BLOCKING_CNT NUMBER;
	LN_BOOKING_CNT NUMBER;
	IN_NULL NUMBER;
  BEGIN 
      dbms_output.Put_line(P_RECP_NUM); 

		SELECT COUNT(*) 
        INTO LN_BLOCKING_CNT
        FROM XXPM_RECEIPT XR,XXPM_BLOCK_HEADER XBH
       WHERE XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER)
         AND XBH.BLOCK_ID  = XR.SOURCE_FUNC_REF_ID
		 AND XR.SOURCE_FUNC_ID IS NOT NULL; 

		 SELECT COUNT(*) 
        INTO LN_BOOKING_CNT
        FROM XXPM_RECEIPT XR,XXPM_BOOKING_HEADER XBH
       WHERE XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER)
         AND XBH.BOOKING_HDR_ID  = XR.SOURCE_FUNC_REF_ID
         AND XR.SOURCE_FUNC_ID IS NOT NULL; 	

        SELECT COUNT(*) 
        INTO IN_NULL
        FROM XXPM_RECEIPT XR
       WHERE XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER)
         AND XR.SOURCE_FUNC_ID IS NULL;		 

	  IF LN_BLOCKING_CNT > 0 THEN 

      OPEN l_query_ref FOR 

              SELECT (CASE WHEN XBH.BLOCK_TYPE = 'SBT' THEN  XBH.BLOCK_NUMBER END) BLOCK_NUMBER,
			 NULL BOOKING_NUMBER,
            CASE WHEN XBH.BLOCK_TYPE IN('ROF','QR') THEN  XBH.BLOCK_NUMBER END RESEV_NUMBER,
			XPM.PROPERTY_NAME,
			XPB.BUILD_NAME,
			XPU.UNIT_NAME,
            XR.ORG_ID,
			(select trim(replace(org_name,'BU','')) name from XXSTG_ORGANIZATIONS  where XR.ORG_ID = ORG_ID	) bu_name,
			(SELECT CUSTOMER_NAME FROM XXSTG_CUSTOMER WHERE CUST_ID = XR.CUST_ID) CUSTOMER_NAME,
            (SELECT LOOKUP_VALUE_NAME_DISP  FROM XXFND_LOOKUP_V  WHERE LOOKUP_TYPE_NAME LIKE '%CHARGE_TYPE%' AND LOOKUP_VALUE_NAME =XR.RCT_TYPE) REC_TYPE,
			CURSOR
			(SELECT SOURCE_FUNC_REF_ID,
			RECEIPT_NUMBER,
			RECEIPT_DATE,
			PAY_REF_NUMBER,
			PAY_REC_DATE PAY_REF_DATE,
			BANK_NAME,
			BANK_BRANCH_NAME,
			CURRENCY_CODE,
			DRAWN_BY RECE_BY,
			NVL(RECEIVED_AMOUNT,0) AMOUNT,
			nvl(xr.MODE_OF_RECEIPT,(select RECEIPT_METHOD_NAME from xxstg_receipt_method 
															where 1=1
															and xr.ORG_ID = org_id
															and xr.PAY_MODE = RECEIPT_METHOD_ID
															and xr.REMIT_BANK_ACCT_USE_ID = REMIT_BANK_ACCT_USE_ID ))PAY_MODE,
			
			xr.CREATED_BY,
			trunc(xr.CREATION_DATE) CREATION_DATE
			FROM XXPM_RECEIPT 
			WHERE RECEIPT_ID = XR.RECEIPT_ID )RECE,
			(select project_name from xxstg_projects where XR.ORG_ID = ORG_ID) project_name,
			cursor 
			( select LOOKUP_VALUE_NAME_DISP INSTALLMENT
            from 
            XXPM_BOOKING_MILESTONES XBM,
            XXFND_LOOKUP_V l,
            XXPM_RECEIPT_DETAILS Xrd
            where 1=1
            AND XR.RECEIPT_ID         = xrd.RECEIPT_ID
            AND XR.SOURCE_FUNC_REF_ID = XBM.SOURCE_FUNC_REF_ID
            AND xrd.invoice_id        = xbm.invoice_id
            AND XBM.INSTALLMENT_TYPE  = l.LOOKUP_VALUE_NAME   
            AND l.LOOKUP_TYPE_NAME    = 'MILESTONE_INSTALLMENT') INSTALLMENT
			FROM XXPM_RECEIPT XR,
			XXPM_BLOCK_HEADER XBH,
			XXPM_BLOCK_DETAIL XBD,
			XXPM_PROPERTY_MASTER XPM,
			XXPM_PROPERTY_BUILDINGS XPB,
			XXPM_PROPERTY_UNITS XPU
			 

			WHERE 1             =1
			AND XR.SOURCE_FUNC_REF_ID = XBH.BLOCK_ID
			AND XBH.BLOCK_ID    = XBD.BLOCK_ID(+)
			AND XBD.PROPERTY_ID = XPM.PROPERTY_ID(+)
			AND XBD.BUILD_ID    = XPB.BUILD_ID(+)
			AND XBD.UNIT_ID     = XPU.UNIT_ID(+) 
           	
			AND XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER);

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

	  END IF; 

	  IF LN_BOOKING_CNT > 0 THEN 

      OPEN l_query_ref FOR 

              SELECT 
			  NULL BLOCK_NUMBER,
			  XBH.BOOKING_NUMBER,
			  NULL RESEV_NUMBER,
			XPM.PROPERTY_NAME,
			XPB.BUILD_NAME,
			XPU.UNIT_NAME,
            XR.ORG_ID,
			(select trim(replace(org_name,'BU','')) name from XXSTG_ORGANIZATIONS  where XR.ORG_ID = ORG_ID	) bu_name,
			(SELECT CUSTOMER_NAME FROM XXSTG_CUSTOMER WHERE CUST_ID = XR.CUST_ID) CUSTOMER_NAME,
      (SELECT LOOKUP_VALUE_NAME_DISP  FROM XXFND_LOOKUP_V  WHERE LOOKUP_TYPE_NAME LIKE '%CHARGE_TYPE%' AND LOOKUP_VALUE_NAME =XR.RCT_TYPE) REC_TYPE,
			CURSOR
			(SELECT SOURCE_FUNC_REF_ID,
			RECEIPT_NUMBER,
			RECEIPT_DATE,
			PAY_REF_NUMBER,
			PAY_REC_DATE PAY_REF_DATE,
			BANK_NAME,
			BANK_BRANCH_NAME,
			CURRENCY_CODE,
			DRAWN_BY RECE_BY,
			NVL(RECEIVED_AMOUNT,0) AMOUNT,
			nvl(xr.MODE_OF_RECEIPT,(select RECEIPT_METHOD_NAME from xxstg_receipt_method 
															where 1=1
															and xr.ORG_ID = org_id
															and xr.PAY_MODE = RECEIPT_METHOD_ID
															and xr.REMIT_BANK_ACCT_USE_ID = REMIT_BANK_ACCT_USE_ID ))PAY_MODE,
			
			xr.CREATED_BY,
			trunc(xr.CREATION_DATE) CREATION_DATE
			FROM XXPM_RECEIPT 
			WHERE RECEIPT_ID = XR.RECEIPT_ID )RECE,
			(select project_name from xxstg_projects where XR.ORG_ID = ORG_ID) project_name,
			cursor 
			(select LOOKUP_VALUE_NAME_DISP INSTALLMENT
            from 
            XXPM_BOOKING_MILESTONES XBM,
            XXFND_LOOKUP_V l,
            XXPM_RECEIPT_DETAILS Xrd
            where 1=1
            AND XR.RECEIPT_ID         = xrd.RECEIPT_ID
            AND XR.SOURCE_FUNC_REF_ID = XBM.SOURCE_FUNC_REF_ID
            AND xrd.invoice_id        = xbm.invoice_id
            AND XBM.INSTALLMENT_TYPE  = l.LOOKUP_VALUE_NAME   
            AND l.LOOKUP_TYPE_NAME    = 'MILESTONE_INSTALLMENT') INSTALLMENT
			FROM XXPM_RECEIPT XR,
			XXPM_BOOKING_HEADER XBH,
			XXPM_BOOKING_DETAIL XBD,
			XXPM_PROPERTY_MASTER XPM,
			XXPM_PROPERTY_BUILDINGS XPB,
			XXPM_PROPERTY_UNITS XPU

			WHERE 1             =1
			AND XBH.BOOKING_HDR_ID     = XR.SOURCE_FUNC_REF_ID
			AND XBH.BOOKING_HDR_ID     = XBD.BOOKING_HDR_ID(+)
			AND XBD.PROPERTY_ID        = XPM.PROPERTY_ID(+)
			AND XBD.BUILDING_ID        = XPB.BUILD_ID(+)
			AND XBD.UNIT_ID            = XPU.UNIT_ID(+)			  		
      AND XR.RECEIPT_NUMBER      = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER);

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

	  END IF; 


	  IF IN_NULL > 0 THEN 

      OPEN l_query_ref FOR 

              SELECT
               NULL BLOCK_NUMBER,
			  XBH.BOOKING_NUMBER,

              NULL RESEV_NUMBER,
			XPM.PROPERTY_NAME,
			XPB.BUILD_NAME,
			XPU.UNIT_NAME,
            XR.ORG_ID,
			(select trim(replace(org_name,'BU','')) name from XXSTG_ORGANIZATIONS  where XR.ORG_ID = ORG_ID	) bu_name,
			(SELECT CUSTOMER_NAME FROM XXSTG_CUSTOMER WHERE CUST_ID = XR.CUST_ID) CUSTOMER_NAME,
            (SELECT LOOKUP_VALUE_NAME_DISP  FROM XXFND_LOOKUP_V  WHERE LOOKUP_TYPE_NAME LIKE '%CHARGE_TYPE%' AND LOOKUP_VALUE_NAME =XR.RCT_TYPE) REC_TYPE,
			CURSOR
			(SELECT SOURCE_FUNC_REF_ID,
			RECEIPT_NUMBER,
			RECEIPT_DATE,
			PAY_REF_NUMBER,
			PAY_REC_DATE PAY_REF_DATE,
			BANK_NAME,
			BANK_BRANCH_NAME,
			CURRENCY_CODE,
			DRAWN_BY RECE_BY,
			NVL(RECEIVED_AMOUNT,0) AMOUNT,
			nvl(xr.MODE_OF_RECEIPT,(select RECEIPT_METHOD_NAME from xxstg_receipt_method 
															where 1=1
															and xr.ORG_ID = org_id
															and xr.PAY_MODE = RECEIPT_METHOD_ID
															and xr.REMIT_BANK_ACCT_USE_ID = REMIT_BANK_ACCT_USE_ID ))PAY_MODE,
			
			xr.CREATED_BY,
			trunc(xr.CREATION_DATE) CREATION_DATE
			FROM XXPM_RECEIPT 
			WHERE RECEIPT_ID = XR.RECEIPT_ID )RECE,
			(select project_name from xxstg_projects where XR.ORG_ID = ORG_ID) project_name,
			cursor 
			(select LOOKUP_VALUE_NAME_DISP INSTALLMENT
            from 
            XXPM_BOOKING_MILESTONES XBM,
            XXFND_LOOKUP_V l,
            XXPM_RECEIPT_DETAILS Xrd
            where 1=1
            AND XR.RECEIPT_ID         = xrd.RECEIPT_ID
            AND XR.SOURCE_FUNC_REF_ID = XBM.SOURCE_FUNC_REF_ID
            AND xrd.invoice_id        = xbm.invoice_id
            AND XBM.INSTALLMENT_TYPE  = l.LOOKUP_VALUE_NAME   
            AND l.LOOKUP_TYPE_NAME    = 'MILESTONE_INSTALLMENT') INSTALLMENT
			FROM XXPM_RECEIPT XR,
            XXPM_RECEIPT_DETAILS XRD,
            XXPM_INVOICE_HEADER XIH,
			XXPM_BOOKING_HEADER XBH,
			XXPM_BOOKING_DETAIL XBD,
			XXPM_PROPERTY_MASTER XPM,
			XXPM_PROPERTY_BUILDINGS XPB,
			XXPM_PROPERTY_UNITS XPU

			WHERE 1             =1
            AND XR.RECEIPT_ID          =XRD.RECEIPT_ID(+)
            AND XRD.INVOICE_ID         = XIH.INVOICE_ID(+)
			AND XIH.BOOKING_ID         = XBH.BOOKING_HDR_ID     
			AND XBH.BOOKING_HDR_ID     = XBD.BOOKING_HDR_ID(+)
			AND XBD.PROPERTY_ID        = XPM.PROPERTY_ID(+)
			AND XBD.BUILDING_ID        = XPB.BUILD_ID(+)
			AND XBD.UNIT_ID            = XPU.UNIT_ID(+)			  		
      AND XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER);

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

	  END IF; 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_EMAIL_RECEIPT_REPORT;
  
  FUNCTION XXPRISM_CUST_MASTER(P_CUST IN NUMBER) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_CUST); 
      OPEN l_query_ref FOR 
SELECT 
  XC.CUSTOMER_NAME, 
  XCC.MOBILE_NUMBER,
  XCC.PHONE_NUMBER,
  XCC.FAX_NUMBER,
  XCC.EMAIL_ID,
  XCC.PASSPORT_NUMBER,
  (NVL2(XCS.ADDRESS1,XCS.ADDRESS1,NULL)||
        NVL2(XCS.ADDRESS2,','||XCS.ADDRESS2,NULL)||
	    NVL2(XCS.ADDRESS3,','||XCS.ADDRESS3,NULL)||
		NVL2(XCS.ADDRESS4,','||XCS.ADDRESS4,NULL)
  )CUST_ADDRESS,
  XCS.CITY,
  XCS.POSTAL_CODE,
  (SELECT L.LOOKUP_VALUE_NAME_DISP FROM XXFND_LOOKUP_V L 
									WHERE L.LOOKUP_VALUE_NAME = XCS.COUNTRY 
									AND   L.LOOKUP_TYPE_NAME  = 'COUNTRY'
  )COUNTRY ,
  XBE_SSD.EVENT_DATE  SPA_DATE,
  XPM.PROPERTY_NAME,
  XPU.UNIT_NAME UNIT_NO,
  XP.PROJECT_NAME,
  XPB.BUILD_NAME SUB_PROJ,
  (XC.FIRST_NAME||XC.MIDDLE_NAME) FNAME,
  XC.SUR_NAME LNAME,
  F_O.*,
  S_O.*,
  (select count(CUST_ID) from XXPM_BOOKING_CUSTOMER_DTL where BOOKING_CUST_ID=XC.CUST_ID) count_jo

FROM
  XXPM_BOOKING_HEADER   XBH, 
  XXPM_BOOKING_DETAIL   XBD,
  XXPM_BOOKING_CUSTOMER XBC,
  XXPM_PROPERTY_MASTER  XPM,
  XXSTG_PROJECTS        XP,
  XXPM_PROPERTY_UNITS   XPU,
  XXPM_PROPERTY_BUILDINGS XPB,
  XXPM_BOOKING_EVENTS   XBE_SSD,
  XXSTG_CUSTOMER        XC,
  XXSTG_CUST_CONTACTS   XCC,
  XXSTG_CUST_SITES      XCS,
  (SELECT J1.*
  FROM(SELECT 
    XBCD.BOOKING_HDR_ID   F_BOOKING_HDR_ID ,
	XBCD.BOOKING_CUST_ID  F_BOOKING_CUST_ID,
	XBCD.CUST_ID		  F_CUST_ID,
    XC.CUSTOMER_NAME      F_CUSTOMER,
    (XC.FIRST_NAME||XC.MIDDLE_NAME) F_FNAME,
	XC.SUR_NAME           F_LNAME,
	(NVL2(XCS.ADDRESS1,XCS.ADDRESS1,NULL)||
	NVL2(XCS.ADDRESS2,','||XCS.ADDRESS2,NULL)||
	NVL2(XCS.ADDRESS3,','||XCS.ADDRESS3,NULL)||
	NVL2(XCS.ADDRESS4,','||XCS.ADDRESS4,NULL)
    )F_CUST_ADDRESS,
	XCC.MOBILE_NUMBER   F_MOBILE_NUMBER,
	XCC.PHONE_NUMBER    F_PHONE_NUMBER,
	XCC.FAX_NUMBER      F_FAX_NUMBER,
	XCC.EMAIL_ID        F_EMAIL_ID,
	XCC.PASSPORT_NUMBER F_PASSPORT_NUMBER,
	XCS.CITY 			F_CITY,
	XCS.POSTAL_CODE 	F_POSTAL_CODE,
	(SELECT L.LOOKUP_VALUE_NAME_DISP FROM XXFND_LOOKUP_V L 
									WHERE L.LOOKUP_VALUE_NAME = XCS.COUNTRY 
									AND   L.LOOKUP_TYPE_NAME  = 'COUNTRY'
    )F_COUNTRY 
    FROM 
	XXPM_BOOKING_HEADER   XBH,
    XXPM_BOOKING_CUSTOMER_DTL XBCD,
    XXSTG_CUSTOMER XC,
	XXSTG_CUST_CONTACTS XCC,
    XXSTG_CUST_SITES XCS
    WHERE 1=1
	AND XBH.BOOKING_HDR_ID   = XBCD.BOOKING_HDR_ID
    AND XBCD.CUST_ID 		 = XC.CUST_ID
	AND XC.CUST_ID           = XCC.CUST_ID(+)
	AND XC.CUST_ID           = XCS.CUST_ID(+)
	AND XBH.ORG_ID           = XCS.ORG_ID(+)
	AND XBCD.BOOKING_HDR_ID  = (select max(BOOKING_HDR_ID) from XXPM_BOOKING_CUSTOMER_DTL where CUST_ID=XBCD.CUST_ID)
  )J1
  WHERE F_CUST_ID=(SELECT MAX(CUST_ID) FROM XXPM_BOOKING_CUSTOMER_DTL WHERE BOOKING_CUST_ID=J1.F_BOOKING_CUST_ID)
  )F_O,
  (SELECT J2.*
  FROM(SELECT 
    XBCD.BOOKING_HDR_ID   S_BOOKING_HDR_ID ,
	XBCD.BOOKING_CUST_ID  S_BOOKING_CUST_ID,
	XBCD.CUST_ID		  S_CUST_ID,
    XC.CUSTOMER_NAME      S_CUSTOMER,
    (XC.FIRST_NAME||XC.MIDDLE_NAME) S_FNAME,
	XC.SUR_NAME           S_LNAME,
	(NVL2(XCS.ADDRESS1,XCS.ADDRESS1,NULL)||
	NVL2(XCS.ADDRESS2,','||XCS.ADDRESS2,NULL)||
	NVL2(XCS.ADDRESS3,','||XCS.ADDRESS3,NULL)||
	NVL2(XCS.ADDRESS4,','||XCS.ADDRESS4,NULL)
    )S_CUST_ADDRESS,
	XCC.MOBILE_NUMBER   S_MOBILE_NUMBER,
	XCC.PHONE_NUMBER    S_PHONE_NUMBER,
	XCC.FAX_NUMBER      S_FAX_NUMBER,
	XCC.EMAIL_ID        S_EMAIL_ID,
	XCC.PASSPORT_NUMBER S_PASSPORT_NUMBER,
	XCS.CITY 			S_CITY,
	XCS.POSTAL_CODE 	S_POSTAL_CODE,
	(SELECT L.LOOKUP_VALUE_NAME_DISP FROM XXFND_LOOKUP_V L 
									WHERE L.LOOKUP_VALUE_NAME = XCS.COUNTRY 
									AND   L.LOOKUP_TYPE_NAME  = 'COUNTRY'
    )S_COUNTRY 
    FROM 
	XXPM_BOOKING_HEADER   XBH,
    XXPM_BOOKING_CUSTOMER_DTL XBCD,
    XXSTG_CUSTOMER XC,
	XXSTG_CUST_CONTACTS XCC,
    XXSTG_CUST_SITES XCS
    WHERE 1=1
	AND XBH.BOOKING_HDR_ID   = XBCD.BOOKING_HDR_ID
    AND XBCD.CUST_ID 		 = XC.CUST_ID
	AND XC.CUST_ID           = XCC.CUST_ID(+)
	AND XC.CUST_ID           = XCS.CUST_ID(+)
	AND XBH.ORG_ID           = XCS.ORG_ID(+)
	AND XBCD.BOOKING_HDR_ID  = (select max(BOOKING_HDR_ID) from XXPM_BOOKING_CUSTOMER_DTL where CUST_ID=XBCD.CUST_ID)
  )J2
  WHERE S_CUST_ID=(SELECT MAX(XBCD.CUST_ID) FROM XXPM_BOOKING_CUSTOMER_DTL XBCD WHERE XBCD.BOOKING_CUST_ID=J2.S_BOOKING_CUST_ID 
																		         AND XBCD.CUST_ID<(SELECT MAX(XBCD1.CUST_ID) 
																								   FROM XXPM_BOOKING_CUSTOMER_DTL XBCD1
																								   WHERE XBCD1.BOOKING_CUST_ID=XBCD.BOOKING_CUST_ID)
				  )
  )S_O
  
  
WHERE 1=1
AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID(+)
AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID(+)
AND XBD.UNIT_ID           = XPU.UNIT_ID(+)
AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID(+)
AND XPM.PROJECT_ID        = XP.PROJ_ID(+)
AND XBH.BOOKING_HDR_ID    = XBE_SSD.BOOKING_HDR_ID(+)
AND XPM.PROPERTY_ID       = XPB.PROPERTY_ID(+)
AND XPB.BUILD_ID          = XPU.BUILD_ID
AND XBC.CUST_ID           = XC.CUST_ID 
AND XC.CUST_ID            = XCC.CUST_ID(+)
AND XC.CUST_ID            = XCS.CUST_ID(+)
AND XBH.ORG_ID            = XCS.ORG_ID(+)
AND XC.CUST_ID            = F_O.F_BOOKING_CUST_ID(+)
AND XC.CUST_ID            = S_O.S_BOOKING_CUST_ID(+)
AND XC.CUST_ID            = Decode(P_CUST,0,XC.CUST_ID,P_CUST)
-- AND XC.CUSTOMER_NUMBER    = '211665'
ORDER BY 1;
  
  
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_CUST_MASTER; 
 FUNCTION XXPRISM_UNAPPLIED_RECEIPT(
      P_PROP_NAME IN VARCHAR2,
	  P_DATE IN DATE
	  ) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROP_NAME); 
	  dbms_output.Put_line(P_DATE); 
      OPEN l_query_ref FOR 
SELECT
PROJECT_NAME
,PROPERTY_NAME
,BUILD_NAME
,RECEIPT_NUMBER
,RECEIPT_DATE
,PAY_MODE
,BANK_NAME
,BANK_BRANCH_NAME
,BANK_ACCOUNT_NUM
,REMITTANCE_BANK
,INTERFACE_STATUS
,RECEIVED_AMOUNT
,AMOUNT_APPLIED
,CUSTOMER_NAME
,(RECEIVED_AMOUNT-AMOUNT_APPLIED) UNAPPLIED_AMOUNT
,CASE WHEN RECEIVED_AMOUNT=AMOUNT_APPLIED THEN 'Applied' ELSE 'Unapplied' END STATUS
,BU_NAME
FROM(SELECT
XP.PROJECT_NAME,
XPM.PROPERTY_NAME,
(select BUILD_NAME from XXPM_PROPERTY_BUILDINGS where BUILD_ID = XPR.BUILD_ID) BUILD_NAME,
XPR.RECEIPT_NUMBER,
XPR.RECEIPT_DATE,
NVL(XPR.MODE_OF_RECEIPT,XRM.RECEIPT_METHOD_NAME) PAY_MODE,
XRM.REC_BANK_NAME BANK_NAME,
XRM.REC_BANK_BRANCH_NAME BANK_BRANCH_NAME,
XRM.REC_BANK_ACC_NUM  BANK_ACCOUNT_NUM,
XRM.BANK_NAME REMITTANCE_BANK,
XPR.INTERFACE_STATUS ,
NVL(XPR.RECEIVED_AMOUNT,0) RECEIVED_AMOUNT,
nvl((select SUM(NVL(AMOUNT_APPLIED,0)) 
from XXPM_RECEIPT_DETAILS  
where  XPR.RECEIPT_ID = RECEIPT_ID
AND TRUNC(APPLIED_DATE)<=P_DATE),0) AMOUNT_APPLIED,
XPR.CUSTOMER_NAME,
(SELECT ORG_NAME FROM XXSTG_ORGANIZATIONS WHERE ORG_ID = XPR.ORG_ID) BU_NAME

  
FROM 
XXPM_BOOKING_HEADER XBH,
XXPM_PROPERTY_MASTER XPM,
XXPM_BOOKING_DETAIL XBD,
XXSTG_PROJECTS XP,
XXPM_RECEIPT XPR,
XXSTG_RECEIPT_METHOD XRM
WHERE 1=1
AND XBH.PROPERTY_ID            = XPM.PROPERTY_ID
AND XBH.BOOKING_HDR_ID         = XBD.BOOKING_HDR_ID
AND XPM.PROJECT_ID             = XP.PROJ_ID(+)
AND XPM.ORG_ID                 = XP.ORG_ID(+)
AND XPM.ORG_ID                 = XPR.ORG_ID(+)
AND XPR.ORG_ID		           = XRM.ORG_ID(+)
AND XPR.PAY_MODE               = XRM.RECEIPT_METHOD_ID(+)
AND XPR.REMIT_BANK_ACCT_USE_ID = XRM.REMIT_BANK_ACCT_USE_ID(+)
AND XPM.PROPERTY_ID            = DECODE(P_PROP_NAME,59,XPM.PROPERTY_ID ,P_PROP_NAME)
--AND XPR.INTERFACE_STATUS      <>'Reversed'
--AND XPR.GL_DATE           <= P_DATE
AND (
(XPR.INTERFACE_STATUS ='Reversed' AND (XPR.GL_DATE <= P_DATE AND XPR.REV_GL_DATE > P_DATE)) 
OR (XPR.INTERFACE_STATUS<>'Reversed' and XPR.GL_DATE <= P_DATE)
   )
 

GROUP BY
XP.PROJECT_NAME,
XPM.PROPERTY_NAME,
XPR.BUILD_ID,
XPR.RECEIPT_NUMBER,
XPR.RECEIPT_DATE,
NVL(XPR.MODE_OF_RECEIPT,XRM.RECEIPT_METHOD_NAME) ,
XRM.REC_BANK_NAME ,
XRM.REC_BANK_BRANCH_NAME ,
XRM.REC_BANK_ACC_NUM  ,
XRM.BANK_NAME ,
XPR.INTERFACE_STATUS ,
NVL(XPR.RECEIVED_AMOUNT,0) ,
XPR.CUSTOMER_NAME,
XPR.RECEIPT_ID,
XPR.ORG_ID
)
WHERE 1=1
AND (RECEIVED_AMOUNT-AMOUNT_APPLIED) <> 0
ORDER BY 2,3,4;
  
  
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_UNAPPLIED_RECEIPT;  
  END XXPRISM_REPORT_PKG;
