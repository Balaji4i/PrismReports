--------------------------------------------------------
--  DDL for Package XX_TEST
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "XX_TEST" 
IS
  FUNCTION XXAR_DETAIL(
      P_PROJ_NAME IN VARCHAR2,
      P_PROP_NAME IN VARCHAR2,
      P_USER_NAME IN VARCHAR2)
    RETURN CLOB;
END XX_TEST;


--------------------------------------------------------
--  DDL for Package Body XX_TEST
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "XX_TEST" 
IS
FUNCTION XXAR_DETAIL(
    P_PROJ_NAME IN VARCHAR2,
    P_PROP_NAME IN VARCHAR2,
    P_USER_NAME IN VARCHAR2)
  RETURN CLOB
IS
  l_query_ref SYS_REFCURSOR;
  l_handle dbms_xmlgen.ctxhandle;
  l_data_xml CLOB;
BEGIN
  dbms_output.Put_line(P_PROJ_NAME);
  dbms_output.Put_line(P_PROP_NAME);
  dbms_output.Put_line(P_USER_NAME);
  OPEN l_query_ref FOR       
  SELECT XBM.MS_DTL_ID,
  XBH.BOOKING_HDR_ID,
  XBH.BOOKING_NUMBER,
  XP.PROJECT_NUMBER ,
  XP.PROJECT_NAME,
  XPU.UNIT_NAME UNIT_NO,
  XC.CUSTOMER_NAME,
  XBD.BOOKING_RATE UNIT_COST,
  XPA.VALUE UNIT,
  XPA.UOM AREA,
  XBD.BOOKING_RATE SQFT_PRICE,
  CASE
    WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
    THEN
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XLV1.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XMD.INSTALLMENT_EVENT
      END
    ELSE
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
      END
  END EVENT_NAME,
  XBM.INSTALLMENT_PCT INST_PCT_AVG,
  NVL(XIH.DUE_DATE, XBM.DUE_DATE) PAY_DUE_DATE,
  NVL(XBM.INSTALLMENT_AMOUNT,0) INST_AMT,
  SUM(NVL(XRD.AMOUNT_APPLIED,0)) RECEIVED_AMT,
  (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0))) OUTSTANDING_AMT,
  XP.COMPLETION_DATE,
  (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) DUE_DAYS,
  CASE
    WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) < SYSDATE
    THEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')))
    ELSE NULL
  END DUE_DAYS_1,
  NVL(
  CASE
    WHEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 0 AND 30
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                       - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) AMT_0_30,
  NVL(
  CASE
    WHEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 31 AND 60
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                       - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) AMT_31_60,
  NVL(
  CASE
    WHEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 61 AND 90
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                       - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) AMT_61_90,
  NVL(
  CASE
    WHEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) > 90
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                       - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) AMT_90,
  NVL(
  CASE
    WHEN XBM.PERIOD_DURATION = 'Due Before Completion'
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) BEFORE_COMPL,
  NVL(
  CASE
    WHEN XBM.PERIOD_DURATION = 'Due On Completion'
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) ON_COMPL,
  NVL(
  CASE
    WHEN XBM.PERIOD_DURATION = 'Due Post Completion'
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) AFTER_COMPL,
  XPU.STATUS,
  XBH.CREATED_BY
FROM XXPM_BOOKING_HEADER XBH,
  XXPM_BOOKING_MILESTONES XBM,
  XXPM_BOOKING_DETAIL XBD,
  XXPM_BOOKING_CUSTOMER XBC,
  XXPM_PROPERTY_MASTER XPM,
  XXPM_PROPERTY_UNITS XPU,
  XXPM_PROPERTY_AREA XPA,
  XXPM_MILESTONE_DTL XMD,
  XXSTG_PROJECTS XP,
  XXSTG_CUSTOMER XC,
  XXFND_LOOKUP_TYPES XLT,
  XXFND_LOOKUP_TYPES XLT1,
  XXFND_LOOKUP_VALUES XLV,
  XXFND_LOOKUP_VALUES XLV1,
  XXPM_INVOICE_HEADER XIH,
  XXPM_INVOICE_LINES XIL,
  XXPM_RECEIPT_DETAILS XRD
WHERE XBH.BOOKING_HDR_ID  = XBM.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID
AND XBD.UNIT_ID           = XPU.UNIT_ID
AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID
AND XPU.UNIT_ID           = XPA.UNIT_ID
AND XPM.PROJECT_ID        = XP.PROJ_ID
AND XPM.ORG_ID            = XP.ORG_ID
AND XBC.CUST_ID           = XC.CUST_ID
AND XBH.BOOKING_HDR_ID    = XIH.BOOKING_ID(+)
AND XBM.INVOICE_ID        = XIH.INVOICE_ID(+)
AND XBM.INSTALLMENT_TYPE  = XIL.INSTALLMENT_TYPE(+)
AND XIH.INVOICE_ID        = XIL.INVOICE_ID(+)
AND XIH.INVOICE_ID        = XRD.INVOICE_ID(+)
AND XBM.MS_DTL_ID         = XMD.MS_DTL_ID(+)
AND XBM.INSTALLMENT_TYPE  = XLV.LOOKUP_VALUE_NAME(+)
AND XBM.INSTALLMENT_EVENT = XLV1.LOOKUP_VALUE_NAME(+)
AND XLT.LOOKUP_TYPE_ID    = XLV.LOOKUP_TYPE_ID(+)
AND XLT1.LOOKUP_TYPE_ID   = XLV1.LOOKUP_TYPE_ID(+)
AND XLT.LOOKUP_TYPE_NAME  = 'MILESTONE_INSTALLMENT'
AND XLT1.LOOKUP_TYPE_NAME = 'BOOKING_EVENT'-- 'MILESTONE_INSTALLMENT'
AND XBH.USAGE             = 'S'
AND XBH.STATUS            = 'APR'
AND XBC.PRIMARY_YN        = 'Y'
AND XP.PROJ_ID            = NVL(P_PROJ_NAME, XP.PROJ_ID)
AND XPM.PROPERTY_ID       = NVL(P_PROP_NAME, XPM.PROPERTY_ID)
GROUP BY XBM.MS_DTL_ID,
  XBH.BOOKING_HDR_ID,
  XBH.BOOKING_NUMBER,
  XP.PROJECT_NUMBER ,
  XP.PROJECT_NAME,
  XPU.UNIT_NAME ,
  XC.CUSTOMER_NAME,
  XBD.BOOKING_RATE ,
  XPA.VALUE ,
  XPA.UOM ,
  XBD.BOOKING_RATE ,
  CASE
    WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
    THEN
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XLV1.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XMD.INSTALLMENT_EVENT
      END
    ELSE
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
      END
  END,
  XBM.INSTALLMENT_PCT ,
  NVL(XIH.DUE_DATE, XBM.DUE_DATE) ,
  NVL(XBM.INSTALLMENT_AMOUNT,0),
  XP.COMPLETION_DATE,
  (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) ,
  CASE
    WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) < SYSDATE
    THEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')))
    ELSE NULL
  END,
  XBM.PERIOD_DURATION,
  XPU.STATUS,
  XBH.CREATED_BY
ORDER BY XBM.MS_DTL_ID;
l_handle := dbms_xmlgen.Newcontext (l_query_ref);
dbms_xmlgen.Setrowsettag (l_handle, 'PC');
dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD');
dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag);
l_data_xml := dbms_xmlgen.Getxml (l_handle);
RETURN ( l_data_xml );
EXCEPTION
WHEN OTHERS THEN
  RETURN ( NULL );
END XXAR_DETAIL;
END XX_TEST;
