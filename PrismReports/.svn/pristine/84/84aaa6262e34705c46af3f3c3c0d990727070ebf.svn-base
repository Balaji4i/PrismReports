CREATE OR REPLACE PACKAGE "XXPRISM_REPORT_PKG" 
is 

  function XXPRISM_RESERVATION_CONTRACT( 
    p_BLOCK_num IN VARCHAR2) 
  RETURN CLOB; 

  FUNCTION XXPRISM_RECEIPT_REPORT( 
        P_RECP_NUM IN VARCHAR2) 
  RETURN CLOB; 

  function XXPRISM_AR_DETAIL( 
    P_PROJ_NAME IN VARCHAR2,
    P_PROP_NAME IN VARCHAR2,
    P_DATE IN DATE
    ) 
  RETURN CLOB; 

    function XXPRISM_AR_SUMMARY( 
    P_PROJ_NAME IN VARCHAR2,
    P_PROP_NAME IN VARCHAR2,
    P_DATE IN DATE
    ) 
  RETURN CLOB; 

  function XXPRISM_UNIT_STATUS( 
    P_PROJ_NAME IN VARCHAR2,
    P_PROP_NAME IN VARCHAR2
    ) 
  RETURN CLOB; 

  FUNCTION XXPRISM_SPA_REPORT(
   P_BLOCK_NUM IN VARCHAR2) 
  RETURN CLOB;

  FUNCTION XXPRISM_ARABIC_SPA_REPORT(
   P_BLOCK_NUM IN VARCHAR2) 
  RETURN CLOB;

   FUNCTION XXPRISM_ALL_INVENTORY_STATUS
   (P_PROP_NAME IN VARCHAR2,
   P_BUILD_NAME IN VARCHAR2) 
  RETURN CLOB;

   FUNCTION XXPRISM_TRADE_RECEIVABLES
   (P_PROJ_NAME IN VARCHAR2,
   P_CUST_NUMB IN VARCHAR2,
   P_UNIT_NUMBER IN VARCHAR2,
   P_DATE IN STRING
   ) 
  RETURN CLOB;
  
  FUNCTION XXPRISM_TAX_INVOICE
   (p_bu_name IN VARCHAR2,
   p_inv_num IN VARCHAR2,
   p_booking_num IN VARCHAR2
   ) 
  RETURN CLOB;
  
  FUNCTION XXPRISM_CUSTOMER_STATEMENT
   (p_cust_id IN VARCHAR2,
--   p_unit_id IN VARCHAR2,
   P_DATE IN DATE
   ) 
  RETURN CLOB;
  
  function XXPRISM_COLLECTION_REPORT( 
    P_PROP_NAME IN VARCHAR2,
    P_DATE IN DATE
    ) 
  RETURN CLOB;
  
  function XXPRISM_ERROR_STATUS 
  RETURN CLOB;

END XXPRISM_report_pkg;
/


CREATE OR REPLACE PACKAGE BODY "XXPRISM_REPORT_PKG" 
IS 
  FUNCTION XXPRISM_RESERVATION_CONTRACT(p_BLOCK_num IN VARCHAR2) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(p_BLOCK_num); 

      OPEN l_query_ref FOR 

                          SELECT xpm.property_name,
                          xpu.unit_name,
                          xpu.unit_type,
                          xso.org_name bu_name,
                          xl.location_name,
                          xl.address1,
                          xl.address2,
                          xl.city,
                          xl.postal_code,
                          xl.country,
                          xba.bank_account_num,
                          xba.iban,
                          xba.branch_name,
                          xba.swift_code,
                          xc.customer_name,
                          xpu.floor_number,
                          xoh.offer_type,
                          xod.quantity area,
                          xod.offer_amount,
                          XOD.OFFER_HDR_ID,
                          (SELECT COUNT(carpark_id)
                          FROM xxpm_property_carparks xpc
                          WHERE xpc.unit_id = xod.unit_id
                          ) tot_car_park,
                          (xr.RECEIPT_AMOUNT) purchase_amt,
                          CURSOR
                          (SELECT INSTALLMENT_TYPE,
                            INSTALLMENT_PCT,
                            INSTALLMENT_AMOUNT,
                            (SELECT LOOKUP_VALUE_NAME_DISP
                            FROM XXFND_LOOKUP_V
                            WHERE LOOKUP_TYPE_NAME LIKE '%BOOKING_EVENT%'
                            AND LOOKUP_VALUE_NAME= XOMD.INSTALLMENT_EVENT
                            ) INSTALLMENT_EVENT
                          FROM XXPM_OFFER_MILESTONE_DETAIL XOMD
                          WHERE XOMD.OFFER_HDR_ID = XOD.OFFER_HDR_ID
                          order by XOMD.MS_DTL_ID
                          ) PAYMENT_PLAN
                          FROM xxpm_block_header xbh,
                          xxpm_block_detail xbd,
                          xxpm_offer_header xoh,
                          xxpm_offer_detail xod,
                          xxpm_property_units xpu,
                          xxpm_property_master xpm,
                          xxstg_organizations xso,
                          xxstg_locations xl,
                          xxpm_property_buildings xpb,
                          xxpm_property_escrow xpe,
                          xxstg_bank_accounts xba,
                          xxstg_customer xc,
                          XXPM_RECEIPT xr
                          WHERE xbh.block_id   = xbd.block_id (+)
                          AND xbh.offer_hdr_id = xoh.offer_hdr_id (+)
                          AND xoh.offer_hdr_id = xod.offer_hdr_id (+)
                          AND xod.unit_id      = xpu.unit_id (+)
                          AND xod.property_id  = xpm.property_id (+)
                          AND xoh.org_id       = xso.org_id (+)
                          AND xpm.location_id  = xl.loc_id (+)
                          AND xod.building_id  = xpb.build_id (+)
                          AND xod.property_id  = xpe.property_id (+)
                          AND xod.building_id  = xpe.build_id (+)
                          AND xpe.bank_acnt_id = xba.bank_acnt_id (+)
                          AND xbh.cust_id      = xc.cust_id (+)
                          AND xbh.BLOCK_ID     = xr.SOURCE_FUNC_REF_ID(+)
                          and xbh.FUNC_ID      = xr.SOURCE_FUNC_ID(+)
                          AND XBH.BLOCK_NUMBER = NVL(P_BLOCK_NUM, XBH.BLOCK_NUMBER); 

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_RESERVATION_CONTRACT; 

    FUNCTION XXPRISM_RECEIPT_REPORT(P_RECP_NUM IN VARCHAR2)
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB;
	LN_BLOCKING_CNT NUMBER;
	LN_BOOKING_CNT NUMBER;
	IN_NULL NUMBER;
  BEGIN 
      dbms_output.Put_line(P_RECP_NUM); 

		SELECT COUNT(*) 
        INTO LN_BLOCKING_CNT
        FROM XXPM_RECEIPT XR,XXPM_BLOCK_HEADER XBH
       WHERE XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER)
         AND XBH.BLOCK_ID  = XR.SOURCE_FUNC_REF_ID
		 AND XR.SOURCE_FUNC_ID IS NOT NULL; 

		 SELECT COUNT(*) 
        INTO LN_BOOKING_CNT
        FROM XXPM_RECEIPT XR,XXPM_BOOKING_HEADER XBH
       WHERE XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER)
         AND XBH.BOOKING_HDR_ID  = XR.SOURCE_FUNC_REF_ID
         AND XR.SOURCE_FUNC_ID IS NOT NULL; 	

        SELECT COUNT(*) 
        INTO IN_NULL
        FROM XXPM_RECEIPT XR
       WHERE XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER)
         AND XR.SOURCE_FUNC_ID IS NULL;		 

	  IF LN_BLOCKING_CNT > 0 THEN 

      OPEN l_query_ref FOR 

              SELECT (CASE WHEN XBH.BLOCK_TYPE = 'SBT' THEN  XBH.BLOCK_NUMBER END) BLOCK_NUMBER,
			 NULL BOOKING_NUMBER,
            CASE WHEN XBH.BLOCK_TYPE IN('ROF','QR') THEN  XBH.BLOCK_NUMBER END RESEV_NUMBER,
			XPM.PROPERTY_NAME,
			XPB.BUILD_NAME,
			XPU.UNIT_NAME,
			(SELECT CUSTOMER_NAME FROM XXSTG_CUSTOMER WHERE CUST_ID = XR.CUST_ID) CUSTOMER_NAME,
            (SELECT LOOKUP_VALUE_NAME_DISP  FROM XXFND_LOOKUP_V  WHERE LOOKUP_TYPE_NAME LIKE '%CHARGE_TYPE%' AND LOOKUP_VALUE_NAME =XR.RCT_TYPE) REC_TYPE,
			CURSOR
			(SELECT SOURCE_FUNC_REF_ID,
			RECEIPT_NUMBER,
			RECEIPT_DATE,
			(SELECT RECEIPT_METHOD_NAME  FROM XXSTG_RECEIPT_METHOD WHERE RECEIPT_METHOD_ID = XR.PAY_MODE and org_id = xr.org_id  AND REMIT_BANK_ACCT_USE_ID = xr.REMIT_BANK_ACCT_USE_ID) PAY_MODE,
			PAY_REF_NUMBER,
			PAY_REC_DATE PAY_REF_DATE,
			BANK_NAME,
			BANK_BRANCH_NAME,
			CURRENCY_CODE,
			DRAWN_BY RECE_BY,
			NVL(RECEIVED_AMOUNT,0) AMOUNT
			--    SUM(NVL(RECEIPT_AMOUNT,0)) OVER (partition BY RECEIPT_NUMBER) TOT_AMT,
			--    XXPM_UTILITY_PKG.AMOUNT_IN_WORDS(SUM(NVL(RECEIPT_AMOUNT,0)) OVER (partition BY RECEIPT_NUMBER),'AED') AMT_IN_WORDS
			FROM XXPM_RECEIPT 
			WHERE RECEIPT_ID = XR.RECEIPT_ID )RECE
			FROM XXPM_RECEIPT XR,
			XXPM_BLOCK_HEADER XBH,
			XXPM_BLOCK_DETAIL XBD,
			XXPM_PROPERTY_MASTER XPM,
			XXPM_PROPERTY_BUILDINGS XPB,
			XXPM_PROPERTY_UNITS XPU

			WHERE 1             =1
			AND XR.SOURCE_FUNC_REF_ID = XBH.BLOCK_ID
			AND XBH.BLOCK_ID    = XBD.BLOCK_ID(+)
			AND XBD.PROPERTY_ID = XPM.PROPERTY_ID(+)
			AND XBD.BUILD_ID    = XPB.BUILD_ID(+)
			AND XBD.UNIT_ID     = XPU.UNIT_ID(+)            
			AND XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER);

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

	  END IF; 

	  IF LN_BOOKING_CNT > 0 THEN 

      OPEN l_query_ref FOR 

              SELECT 
			  NULL BLOCK_NUMBER,
			  XBH.BOOKING_NUMBER,
			  NULL RESEV_NUMBER,
			XPM.PROPERTY_NAME,
			XPB.BUILD_NAME,
			XPU.UNIT_NAME,
			(SELECT CUSTOMER_NAME FROM XXSTG_CUSTOMER WHERE CUST_ID = XR.CUST_ID) CUSTOMER_NAME,
      (SELECT LOOKUP_VALUE_NAME_DISP  FROM XXFND_LOOKUP_V  WHERE LOOKUP_TYPE_NAME LIKE '%CHARGE_TYPE%' AND LOOKUP_VALUE_NAME =XR.RCT_TYPE) REC_TYPE,
			CURSOR
			(SELECT SOURCE_FUNC_REF_ID,
			RECEIPT_NUMBER,
			RECEIPT_DATE,
			(SELECT RECEIPT_METHOD_NAME  FROM XXSTG_RECEIPT_METHOD WHERE RECEIPT_METHOD_ID = XR.PAY_MODE and org_id = xr.org_id  AND REMIT_BANK_ACCT_USE_ID = xr.REMIT_BANK_ACCT_USE_ID) PAY_MODE,
			PAY_REF_NUMBER,
			PAY_REC_DATE PAY_REF_DATE,
			BANK_NAME,
			BANK_BRANCH_NAME,
			CURRENCY_CODE,
			DRAWN_BY RECE_BY,
			NVL(RECEIVED_AMOUNT,0) AMOUNT
			--    SUM(NVL(RECEIPT_AMOUNT,0)) OVER (partition BY RECEIPT_NUMBER) TOT_AMT,
			--    XXPM_UTILITY_PKG.AMOUNT_IN_WORDS(SUM(NVL(RECEIPT_AMOUNT,0)) OVER (partition BY RECEIPT_NUMBER),'AED') AMT_IN_WORDS
			FROM XXPM_RECEIPT
			WHERE RECEIPT_ID = XR.RECEIPT_ID )RECE
			FROM XXPM_RECEIPT XR,
			XXPM_BOOKING_HEADER XBH,
			XXPM_BOOKING_DETAIL XBD,
			XXPM_PROPERTY_MASTER XPM,
			XXPM_PROPERTY_BUILDINGS XPB,
			XXPM_PROPERTY_UNITS XPU

			WHERE 1             =1
			AND XBH.BOOKING_HDR_ID     = XR.SOURCE_FUNC_REF_ID
			AND XBH.BOOKING_HDR_ID     = XBD.BOOKING_HDR_ID(+)
			AND XBD.PROPERTY_ID        = XPM.PROPERTY_ID(+)
			AND XBD.BUILDING_ID        = XPB.BUILD_ID(+)
			AND XBD.UNIT_ID            = XPU.UNIT_ID(+)			  		
      AND XR.RECEIPT_NUMBER      = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER);

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

	  END IF; 


	  IF IN_NULL > 0 THEN 

      OPEN l_query_ref FOR 

              SELECT
               NULL BLOCK_NUMBER,
			  XBH.BOOKING_NUMBER,

              NULL RESEV_NUMBER,
			XPM.PROPERTY_NAME,
			XPB.BUILD_NAME,
			XPU.UNIT_NAME,
			(SELECT CUSTOMER_NAME FROM XXSTG_CUSTOMER WHERE CUST_ID = XR.CUST_ID) CUSTOMER_NAME,
            (SELECT LOOKUP_VALUE_NAME_DISP  FROM XXFND_LOOKUP_V  WHERE LOOKUP_TYPE_NAME LIKE '%CHARGE_TYPE%' AND LOOKUP_VALUE_NAME =XR.RCT_TYPE) REC_TYPE,
			CURSOR
			(SELECT SOURCE_FUNC_REF_ID,
			RECEIPT_NUMBER,
			RECEIPT_DATE,
			(SELECT RECEIPT_METHOD_NAME  FROM XXSTG_RECEIPT_METHOD WHERE RECEIPT_METHOD_ID = XR.PAY_MODE and org_id = xr.org_id  AND REMIT_BANK_ACCT_USE_ID = xr.REMIT_BANK_ACCT_USE_ID) PAY_MODE,
			PAY_REF_NUMBER,
			PAY_REC_DATE PAY_REF_DATE,
			BANK_NAME,
			BANK_BRANCH_NAME,
			CURRENCY_CODE,
			DRAWN_BY RECE_BY,
			NVL(RECEIVED_AMOUNT,0) AMOUNT
			--    SUM(NVL(RECEIPT_AMOUNT,0)) OVER (partition BY RECEIPT_NUMBER) TOT_AMT,
			--    XXPM_UTILITY_PKG.AMOUNT_IN_WORDS(SUM(NVL(RECEIPT_AMOUNT,0)) OVER (partition BY RECEIPT_NUMBER),'AED') AMT_IN_WORDS
			FROM XXPM_RECEIPT
			WHERE RECEIPT_ID = XR.RECEIPT_ID )RECE
			FROM XXPM_RECEIPT XR,
            XXPM_RECEIPT_DETAILS XRD,
            XXPM_INVOICE_HEADER XIH,
			XXPM_BOOKING_HEADER XBH,
			XXPM_BOOKING_DETAIL XBD,
			XXPM_PROPERTY_MASTER XPM,
			XXPM_PROPERTY_BUILDINGS XPB,
			XXPM_PROPERTY_UNITS XPU

			WHERE 1             =1
            AND XR.RECEIPT_ID          =XRD.RECEIPT_ID(+)
            AND XRD.INVOICE_ID         = XIH.INVOICE_ID(+)
			AND XIH.BOOKING_ID         = XBH.BOOKING_HDR_ID     
			AND XBH.BOOKING_HDR_ID     = XBD.BOOKING_HDR_ID(+)
			AND XBD.PROPERTY_ID        = XPM.PROPERTY_ID(+)
			AND XBD.BUILDING_ID        = XPB.BUILD_ID(+)
			AND XBD.UNIT_ID            = XPU.UNIT_ID(+)			  		
      AND XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER);

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

	  END IF; 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_RECEIPT_REPORT; 


  FUNCTION XXPRISM_AR_DETAIL(P_PROJ_NAME IN VARCHAR2
  , P_PROP_NAME IN VARCHAR2
  , P_DATE IN DATE
  ) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
       dbms_output.Put_line(P_PROJ_NAME); 
      dbms_output.Put_line(P_PROP_NAME); 
      dbms_output.Put_line(P_DATE); 

      OPEN l_query_ref FOR 

--           SELECT XBM.MS_DTL_ID,
--  XBH.BOOKING_HDR_ID,
--  XBH.BOOKING_NUMBER,
--  XP.PROJECT_NUMBER ,
--  XP.PROJECT_NAME,
--  XPM.PROPERTY_NAME,
--  XPU.UNIT_NAME UNIT_NO,
--  XC.CUSTOMER_NAME,
--  XBD.BOOKING_RATE UNIT_COST,
--  XPA.VALUE UNIT_AREA,
--  XPA.UOM UOM,
--  XBD.BOOKING_RATE SQFT_PRICE,
--  CASE
--    WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
--    THEN
--      CASE
--        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
--        THEN XLV.LOOKUP_VALUE_NAME_DISP
--          ||'-'
--          ||XLV1.LOOKUP_VALUE_NAME_DISP
--        ELSE XLV.LOOKUP_VALUE_NAME_DISP
--          ||'-'
--          ||XMD.INSTALLMENT_EVENT
--      END
--    ELSE
--      CASE
--        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
--        THEN XLV.LOOKUP_VALUE_NAME_DISP
--        ELSE XLV.LOOKUP_VALUE_NAME_DISP
--      END
--  END EVENT_NAME,
--  XBM.INSTALLMENT_PCT INST_PCT_AVG,
--  NVL(XIH.DUE_DATE, XBM.DUE_DATE) PAY_DUE_DATE,
--  NVL(XBM.INSTALLMENT_AMOUNT,0) INST_AMT,
--  SUM(NVL(XRD.AMOUNT_APPLIED,0)) RECEIVED_AMT,
--  (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0))) OUTSTANDING_AMT,
--  XP.COMPLETION_DATE,
--  (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) DUE_DAYS,
--  CASE
--    WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) < P_DATE
--    THEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')))
--    ELSE NULL
--  END DUE_DAYS_1,
--  NVL(
--  CASE
--    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) < 0
--    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                      - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
--  END,0) DUE_NOW,
--  NVL(
--  CASE
--    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 0 AND 30
--    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                      - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
--  END,0) AMT_0_30,
--  NVL(
--  CASE
--    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 31 AND 60
--    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                      - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
--  END,0) AMT_31_60,
--  NVL(
--  CASE
--    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 61 AND 90
--    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                      - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
--  END,0) AMT_61_90,
--  NVL(
--  CASE
--    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 91 AND 120
--    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                      - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
--  END,0) AMT_91_120,
--  NVL(
--  CASE
--    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 121 AND 180
--    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                      - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
--  END,0) AMT_121_180,
--  NVL(
--  CASE
--    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) > 180
--    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                      - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
--  END,0) AMT_180,
--  NVL(
--  CASE
--    WHEN XBM.PERIOD_DURATION = 'Due Before Completion'
--    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
--  END,0) BEFORE_COMPL,
--  NVL(
--  CASE
--    WHEN XBM.PERIOD_DURATION = 'Due On Completion'
--    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
--  END,0) ON_COMPL,
--  NVL(
--  CASE
--    WHEN XBM.PERIOD_DURATION = 'Due Post Completion'
--    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
--  END,0) AFTER_COMPL,
--  XPU.STATUS PROPERTY_STATUS,
--  XBH.CREATED_BY,
--  XIH.INTERFACE_STATUS STATUS
--FROM XXPM_BOOKING_HEADER XBH,
--  XXPM_BOOKING_MILESTONES XBM,
--  XXPM_BOOKING_DETAIL XBD,
--  XXPM_BOOKING_CUSTOMER XBC,
--  XXPM_PROPERTY_MASTER XPM,
--  XXPM_PROPERTY_UNITS XPU,
--  XXPM_PROPERTY_AREA XPA,
--  XXPM_MILESTONE_DTL XMD,
--  XXSTG_PROJECTS XP,
--  XXSTG_CUSTOMER XC,
--  XXFND_LOOKUP_TYPES XLT,
--  XXFND_LOOKUP_TYPES XLT1,
--  XXFND_LOOKUP_VALUES XLV,
--  XXFND_LOOKUP_VALUES XLV1,
--  XXPM_INVOICE_HEADER XIH,
--  XXPM_INVOICE_LINES XIL,
--  XXPM_RECEIPT_DETAILS XRD,
--  XXPM_RECEIPT XPR
--WHERE XBH.BOOKING_HDR_ID  = XBM.BOOKING_HDR_ID(+)
--AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID(+)
--AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID(+)
--AND XBD.UNIT_ID           = XPU.UNIT_ID(+)
--AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID(+)
--AND XPU.UNIT_ID           = XPA.UNIT_ID(+)
--AND XPM.PROJECT_ID        = XP.PROJ_ID(+)
--AND XPM.ORG_ID            = XP.ORG_ID(+)
--AND XBC.CUST_ID           = XC.CUST_ID(+)
--AND XBH.BOOKING_HDR_ID    = XIH.BOOKING_ID(+)
--AND XBM.INVOICE_ID        = XIH.INVOICE_ID(+)
--AND XBM.INSTALLMENT_TYPE  = XIL.INSTALLMENT_TYPE(+)
--AND XIH.INVOICE_ID        = XIL.INVOICE_ID(+)
--AND XIH.INVOICE_ID        = XRD.INVOICE_ID(+)
--AND XBM.MS_DTL_ID         = XMD.MS_DTL_ID(+)
--AND XBM.INSTALLMENT_TYPE  = XLV.LOOKUP_VALUE_NAME(+)
--AND XBM.INSTALLMENT_EVENT = XLV1.LOOKUP_VALUE_NAME(+)
--AND XLT.LOOKUP_TYPE_ID    = XLV.LOOKUP_TYPE_ID(+)
--AND XLT1.LOOKUP_TYPE_ID   = XLV1.LOOKUP_TYPE_ID(+)
--AND XRD.RECEIPT_ID        = XPR.RECEIPT_ID(+)
--AND XLT.LOOKUP_TYPE_NAME  = 'MILESTONE_INSTALLMENT'
--AND XLT1.LOOKUP_TYPE_NAME = 'BOOKING_EVENT'-- 'MILESTONE_INSTALLMENT'
--AND XBH.USAGE             = 'S'
--  --AND XBH.STATUS            = 'APR'
--AND (XRD.ATTRIBUTE1                              <> 'D'
--OR XRD.ATTRIBUTE1                                IS NULL)
--AND XPA.AREA(+)                                   = 'CHARGE'
--AND XBM.MILESTONE_TYPE                            = 'MS'
--AND (XIH.INVOICE_DATE      <= p_date
--OR XIH.INVOICE_DATE                              IS NULL
--OR TRUNC(XRD.APPLIED_DATE) <= p_date
--OR TRUNC(XRD.APPLIED_DATE)                       IS NULL)
--  --AND XP.PROJ_ID            = NVL(P_PROJ_NAME, XP.PROJ_ID)
--AND XPM.PROPERTY_ID = NVL(P_PROP_NAME, XPM.PROPERTY_ID)
--  --AND XBH.BOOKING_NUMBER = 'BK-1000404'
--  --AND XP.PROJECT_NAME  = 'The Pad Project'
--GROUP BY XBM.MS_DTL_ID,
--  XBH.BOOKING_HDR_ID,
--  XBH.BOOKING_NUMBER,
--  XP.PROJECT_NUMBER ,
--  XP.PROJECT_NAME,
--  XPM.PROPERTY_NAME,
--  XPU.UNIT_NAME ,
--  XC.CUSTOMER_NAME,
--  XBD.BOOKING_RATE ,
--  XPA.VALUE,
--  XPA.UOM,
--  XBD.BOOKING_RATE ,
--  CASE
--    WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
--    THEN
--      CASE
--        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
--        THEN XLV.LOOKUP_VALUE_NAME_DISP
--          ||'-'
--          ||XLV1.LOOKUP_VALUE_NAME_DISP
--        ELSE XLV.LOOKUP_VALUE_NAME_DISP
--          ||'-'
--          ||XMD.INSTALLMENT_EVENT
--      END
--    ELSE
--      CASE
--        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
--        THEN XLV.LOOKUP_VALUE_NAME_DISP
--        ELSE XLV.LOOKUP_VALUE_NAME_DISP
--      END
--  END,
--  XBM.INSTALLMENT_PCT ,
--  NVL(XIH.DUE_DATE, XBM.DUE_DATE) ,
--  NVL(XBM.INSTALLMENT_AMOUNT,0),
--  XP.COMPLETION_DATE,
--  (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) ,
--  CASE
--    WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) < P_DATE
--    THEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')))
--    ELSE NULL
--  END,
--  XBM.PERIOD_DURATION,
--  XPU.STATUS,
--  XBH.CREATED_BY,
--  XIH.INTERFACE_STATUS
--UNION ALL
--SELECT XBM.MS_DTL_ID,
--  XBH.BOOKING_HDR_ID,
--  XBH.BOOKING_NUMBER,
--  XP.PROJECT_NUMBER ,
--  XP.PROJECT_NAME,
--  XPM.PROPERTY_NAME,
--  XPU.UNIT_NAME UNIT_NO,
--  XC.CUSTOMER_NAME,
--  XBD.BOOKING_RATE UNIT_COST,
--  XPA.VALUE UNIT_AREA,
--  XPA.UOM UOM,
--  XBD.BOOKING_RATE SQFT_PRICE,
--  'Credit Memo' EVENT_NAME,
--  XBM.INSTALLMENT_PCT INST_PCT_AVG,
--  NVL(XIH.DUE_DATE, XBM.DUE_DATE) PAY_DUE_DATE,
--  NVL(XBM.INSTALLMENT_AMOUNT,0)* -1 INST_AMT,
--  0 RECEIVED_AMT,
--  NVL(XBM.INSTALLMENT_AMOUNT,0)* -1 OUTSTANDING_AMT,
--  NULL COMPLETION_DATE,
--  0 DUE_DAYS,
--  0 DUE_DAYS_1,
--  0 DUE_NOW,
--  0 AMT_0_30,
--  0 AMT_31_60,
--  0 AMT_61_90,
--  0 AMT_91_120,
--  0 AMT_121_180,
--  0 AMT_180,
--  0 BEFORE_COMPL,
--  0 ON_COMPL,
--  0 AFTER_COMPL,
--  XPU.STATUS PROPERTY_STATUS,
--  XBH.CREATED_BY,
--  XIH.INTERFACE_STATUS STATUS
--FROM XXPM_BOOKING_HEADER XBH,
--  XXPM_BOOKING_MILESTONES XBM,
--  XXPM_BOOKING_DETAIL XBD,
--  XXPM_BOOKING_CUSTOMER XBC,
--  XXPM_PROPERTY_MASTER XPM,
--  XXPM_PROPERTY_UNITS XPU,
--  XXPM_PROPERTY_AREA XPA,
--  XXPM_MILESTONE_DTL XMD,
--  XXSTG_PROJECTS XP,
--  XXSTG_CUSTOMER XC,
--  XXFND_LOOKUP_TYPES XLT,
--  XXFND_LOOKUP_TYPES XLT1,
--  XXFND_LOOKUP_VALUES XLV,
--  XXFND_LOOKUP_VALUES XLV1,
--  XXPM_INVOICE_HEADER XIH,
--  XXPM_INVOICE_LINES XIL,
--  XXPM_RECEIPT_DETAILS XRD,
--  XXPM_RECEIPT XPR
--WHERE XBH.BOOKING_HDR_ID  = XBM.BOOKING_HDR_ID(+)
--AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID(+)
--AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID(+)
--AND XBD.UNIT_ID           = XPU.UNIT_ID(+)
--AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID(+)
--AND XPU.UNIT_ID           = XPA.UNIT_ID(+)
--AND XPM.PROJECT_ID        = XP.PROJ_ID(+)
--AND XPM.ORG_ID            = XP.ORG_ID(+)
--AND XBC.CUST_ID           = XC.CUST_ID(+)
--AND XBH.BOOKING_HDR_ID    = XIH.BOOKING_ID(+)
--AND XBM.INVOICE_ID        = XIH.INVOICE_ID(+)
--AND XBM.INSTALLMENT_TYPE  = XIL.INSTALLMENT_TYPE(+)
--AND XIH.INVOICE_ID        = XIL.INVOICE_ID(+)
--AND XIH.INVOICE_ID        = XRD.INVOICE_ID(+)
--AND XBM.MS_DTL_ID         = XMD.MS_DTL_ID(+)
--AND XBM.INSTALLMENT_TYPE  = XLV.LOOKUP_VALUE_NAME(+)
--AND XBM.INSTALLMENT_EVENT = XLV1.LOOKUP_VALUE_NAME(+)
--AND XLT.LOOKUP_TYPE_ID    = XLV.LOOKUP_TYPE_ID(+)
--AND XLT1.LOOKUP_TYPE_ID   = XLV1.LOOKUP_TYPE_ID(+)
--AND XRD.RECEIPT_ID        = XPR.RECEIPT_ID(+)
--AND XLT.LOOKUP_TYPE_NAME  = 'MILESTONE_INSTALLMENT'
--AND XLT1.LOOKUP_TYPE_NAME = 'BOOKING_EVENT'-- 'MILESTONE_INSTALLMENT'
--AND XBH.USAGE             = 'S'
--  --AND XBH.STATUS            = 'APR'
--AND (XRD.ATTRIBUTE1    <> 'D'
--OR XRD.ATTRIBUTE1      IS NULL)
--AND XPA.AREA(+)         = 'CHARGE'
--AND XBM.MILESTONE_TYPE != 'MS'
--  --AND (to_date(TO_CHAR(XIH.INVOICE_DATE ,'dd-MM-yyyy'),'dd-MM-yyyy')      <= to_date(TO_CHAR(P_DATE,'dd-MM-yyyy'),'dd-MM-yyyy')
--  --OR XIH.INVOICE_DATE        IS NULL
--  --OR to_date(TO_CHAR(TRUNC(XRD.APPLIED_DATE) ,'dd-MM-yyyy'),'dd-MM-yyyy') <= to_date(TO_CHAR(P_DATE,'dd-MM-yyyy'),'dd-MM-yyyy')
--  --OR TRUNC(XRD.APPLIED_DATE) IS NULL)
--AND (XIH.INVOICE_DATE      <= p_date
--OR XIH.INVOICE_DATE                              IS NULL
--OR TRUNC(XRD.APPLIED_DATE) <= p_date
--OR TRUNC(XRD.APPLIED_DATE)                       IS NULL)
--AND XPM.PROPERTY_ID                               = NVL(P_PROP_NAME, XPM.PROPERTY_ID);



WITH BOOKING_DTL AS
  (SELECT XBM.MS_DTL_ID,
    XBH.BOOKING_HDR_ID,
    XBH.BOOKING_NUMBER,
    XP.PROJECT_NUMBER ,
    XP.PROJECT_NAME,
    XPM.PROPERTY_ID,
    XPM.PROPERTY_NAME,
    XPU.UNIT_NAME UNIT_NO,
    XC.CUSTOMER_NAME,
    XBD.BOOKING_RATE UNIT_COST,
    XPA.VALUE UNIT_AREA,
    XPA.UOM UOM,
    XBD.BOOKING_RATE SQFT_PRICE,
    CASE
      WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
      THEN
        CASE
          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
          THEN XLV.LOOKUP_VALUE_NAME_DISP
            ||'-'
            ||XLV1.LOOKUP_VALUE_NAME_DISP
          ELSE XLV.LOOKUP_VALUE_NAME_DISP
            ||'-'
            ||XMD.INSTALLMENT_EVENT
        END
      ELSE
        CASE
          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
          THEN XLV.LOOKUP_VALUE_NAME_DISP
          ELSE XLV.LOOKUP_VALUE_NAME_DISP
        END
    END EVENT_NAME,
    XBM.INSTALLMENT_PCT INST_PCT_AVG,
    NVL(XBM.INSTALLMENT_AMOUNT,0) INST_AMT ,
    XP.COMPLETION_DATE,
    XPU.STATUS PROPERTY_STATUS,
    XBH.CREATED_BY,
    XBM.PERIOD_DURATION,
    XBM.DUE_DATE,
    XBM.INSTALLMENT_TYPE,
    XBM.INVOICE_ID
  FROM XXPM_BOOKING_HEADER XBH,
    XXPM_BOOKING_MILESTONES XBM,
    XXPM_BOOKING_DETAIL XBD,
    XXPM_BOOKING_CUSTOMER XBC,
    XXPM_PROPERTY_MASTER XPM,
    XXPM_PROPERTY_UNITS XPU,
    XXPM_PROPERTY_AREA XPA,
    XXPM_MILESTONE_DTL XMD,
    XXSTG_PROJECTS XP,
    XXSTG_CUSTOMER XC,
    XXFND_LOOKUP_TYPES XLT,
    XXFND_LOOKUP_TYPES XLT1,
    XXFND_LOOKUP_VALUES XLV,
    XXFND_LOOKUP_VALUES XLV1
  WHERE XBH.BOOKING_HDR_ID  = XBM.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID(+)
  AND XBD.UNIT_ID           = XPU.UNIT_ID(+)
  AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID(+)
  AND XPU.UNIT_ID           = XPA.UNIT_ID(+)
  AND XPM.PROJECT_ID        = XP.PROJ_ID(+)
  AND XPM.ORG_ID            = XP.ORG_ID(+)
  AND XBC.CUST_ID           = XC.CUST_ID(+)
  AND XBM.MS_DTL_ID         = XMD.MS_DTL_ID(+)
  AND XBM.INSTALLMENT_TYPE  = XLV.LOOKUP_VALUE_NAME(+)
  AND XBM.INSTALLMENT_EVENT = XLV1.LOOKUP_VALUE_NAME(+)
  AND XLT.LOOKUP_TYPE_ID    = XLV.LOOKUP_TYPE_ID(+)
  AND XLT1.LOOKUP_TYPE_ID   = XLV1.LOOKUP_TYPE_ID(+)
  AND XLT.LOOKUP_TYPE_NAME  = 'MILESTONE_INSTALLMENT'
  AND XLT1.LOOKUP_TYPE_NAME = 'BOOKING_EVENT'
  AND XBH.USAGE             = 'S'
  AND XPA.AREA(+)           = 'CHARGE'
  AND XBM.MILESTONE_TYPE   = 'MS'
  AND XBH.BOOKING_DATE     <= P_DATE
  ),
  BOOKING_DTL_1 AS
  (SELECT XBM.MS_DTL_ID,
    XBH.BOOKING_HDR_ID,
    XBH.BOOKING_NUMBER,
    XP.PROJECT_NUMBER ,
    XP.PROJECT_NAME,
    XPM.PROPERTY_ID,
    XPM.PROPERTY_NAME,
    XPU.UNIT_NAME UNIT_NO,
    XC.CUSTOMER_NAME,
    XBD.BOOKING_RATE UNIT_COST,
    XPA.VALUE UNIT_AREA,
    XPA.UOM UOM,
    XBD.BOOKING_RATE SQFT_PRICE,
    CASE
      WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
      THEN
        CASE
          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
          THEN XLV.LOOKUP_VALUE_NAME_DISP
            ||'-'
            ||XLV1.LOOKUP_VALUE_NAME_DISP
          ELSE XLV.LOOKUP_VALUE_NAME_DISP
            ||'-'
            ||XMD.INSTALLMENT_EVENT
        END
      ELSE
        CASE
          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
          THEN XLV.LOOKUP_VALUE_NAME_DISP
          ELSE XLV.LOOKUP_VALUE_NAME_DISP
        END
    END EVENT_NAME,
    XBM.INSTALLMENT_PCT INST_PCT_AVG,
    NVL(XBM.INSTALLMENT_AMOUNT,0) INST_AMT ,
    XP.COMPLETION_DATE,
    XPU.STATUS PROPERTY_STATUS,
    XBH.CREATED_BY,
    XBM.PERIOD_DURATION,
    XBM.DUE_DATE,
    XBM.INSTALLMENT_TYPE,
    XBM.INVOICE_ID
  FROM XXPM_BOOKING_HEADER XBH,
    XXPM_BOOKING_MILESTONES XBM,
    XXPM_BOOKING_DETAIL XBD,
    XXPM_BOOKING_CUSTOMER XBC,
    XXPM_PROPERTY_MASTER XPM,
    XXPM_PROPERTY_UNITS XPU,
    XXPM_PROPERTY_AREA XPA,
    XXPM_MILESTONE_DTL XMD,
    XXSTG_PROJECTS XP,
    XXSTG_CUSTOMER XC,
    XXFND_LOOKUP_TYPES XLT,
    XXFND_LOOKUP_TYPES XLT1,
    XXFND_LOOKUP_VALUES XLV,
    XXFND_LOOKUP_VALUES XLV1
  WHERE XBH.BOOKING_HDR_ID  = XBM.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID(+)
  AND XBD.UNIT_ID           = XPU.UNIT_ID(+)
  AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID(+)
  AND XPU.UNIT_ID           = XPA.UNIT_ID(+)
  AND XPM.PROJECT_ID        = XP.PROJ_ID(+)
  AND XPM.ORG_ID            = XP.ORG_ID(+)
  AND XBC.CUST_ID           = XC.CUST_ID(+)
  AND XBM.MS_DTL_ID         = XMD.MS_DTL_ID(+)
  AND XBM.INSTALLMENT_TYPE  = XLV.LOOKUP_VALUE_NAME(+)
  AND XBM.INSTALLMENT_EVENT = XLV1.LOOKUP_VALUE_NAME(+)
  AND XLT.LOOKUP_TYPE_ID    = XLV.LOOKUP_TYPE_ID(+)
  AND XLT1.LOOKUP_TYPE_ID   = XLV1.LOOKUP_TYPE_ID(+)
  AND XLT.LOOKUP_TYPE_NAME  = 'MILESTONE_INSTALLMENT'
  AND XLT1.LOOKUP_TYPE_NAME = 'BOOKING_EVENT'
  AND XBH.USAGE             = 'S'
  AND XPA.AREA(+)           = 'CHARGE'
  AND XBM.MILESTONE_TYPE    != 'MS'
  AND XBH.BOOKING_DATE     <= P_DATE
  ),
  INV_DTL AS
  (SELECT XIH.BOOKING_ID,
    XIH.INVOICE_ID,
    XIL.INSTALLMENT_TYPE,
    XIH.DUE_DATE,
    XIH.INTERFACE_STATUS STATUS,
    XIH.INVOICE_DATE
  FROM XXPM_INVOICE_HEADER XIH,
    XXPM_INVOICE_LINES XIL
  WHERE XIH.INVOICE_ID   = XIL.INVOICE_ID(+)
  AND (XIH.INVOICE_DATE <= P_DATE
  OR XIH.INVOICE_DATE   IS NULL)
  ),
  RCT_DTL AS
  (SELECT XRD.INVOICE_ID,
    XRD.RECEIPT_ID ,
    SUM(NVL(XRD.AMOUNT_APPLIED,0)) RECEIVED_AMT,
    XPR.RECEIPT_DATE
  FROM XXPM_RECEIPT_DETAILS XRD,
    XXPM_RECEIPT XPR
  WHERE XRD.RECEIPT_ID          = XPR.RECEIPT_ID(+)
  AND (TRUNC(XRD.APPLIED_DATE) <= P_DATE
  OR TRUNC(XRD.APPLIED_DATE)   IS NULL)
  GROUP BY XRD.INVOICE_ID,
    XRD.RECEIPT_ID,
    XPR.RECEIPT_DATE
  )
SELECT BKD.PROPERTY_ID ,
  BKD.PROJECT_NAME,
  BKD.UNIT_NO,
  BKD.CUSTOMER_NAME,
  BKD.UNIT_COST,
  BKD.UNIT_AREA,
  BKD.UOM,
  BKD.EVENT_NAME,
  CASE
    WHEN INV.STATUS IS NULL
    THEN 'Not Invoiced'
    ELSE INITCAP(INV.STATUS)
  END STATUS,
  BKD.INST_PCT_AVG,
  NVL(INV.DUE_DATE , BKD.DUE_DATE) PAY_DUE_DATE,
  NVL(BKD.INST_AMT,0) INST_AMT,
  SUM(NVL(RCT.RECEIVED_AMT,0)) RECEIVED_AMT,
  NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0)) OUTSTANDING_AMT,
  CASE
    WHEN INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END DUE_NOW,
  CASE
    WHEN INV.STATUS IS NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END NOT_DUE,
  (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) DUE_DAYS,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 0 AND 30
    AND INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_0_30,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 31 AND 60
    AND INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_31_60,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 61 AND 90
    AND INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_61_90,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 91 AND 120
    AND INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_91_120,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 121 AND 180
    AND INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_121_180,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) > 180
    AND INV.STATUS                                                                                                                                                                     IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_180,
  CASE
    WHEN BKD.PERIOD_DURATION = 'DUE BEFORE COMPLETION'
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END BEFORE_COMPL,
  CASE
    WHEN BKD.PERIOD_DURATION = 'DUE ON COMPLETION'
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END ON_COMPL,
  CASE
    WHEN BKD.PERIOD_DURATION = 'DUE POST COMPLETION'
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AFTER_COMPL
FROM BOOKING_DTL BKD ,
  INV_DTL INV,
  RCT_DTL RCT
WHERE 1                  = 1
AND BKD.BOOKING_HDR_ID   = INV.BOOKING_ID(+)
AND BKD.INVOICE_ID       = INV.INVOICE_ID(+)
AND BKD.INSTALLMENT_TYPE = INV.INSTALLMENT_TYPE(+)
AND INV.INVOICE_ID       = RCT.INVOICE_ID(+)
--AND BKD.PROPERTY_ID      = NVL(P_PROP_NAME, BKD.PROPERTY_ID)
AND BKD.PROPERTY_ID  = DECODE(P_PROP_NAME,59,BKD.PROPERTY_ID ,P_PROP_NAME)
GROUP BY BKD.PROPERTY_ID ,
  BKD.PROJECT_NAME,
  BKD.UNIT_NO,
  BKD.CUSTOMER_NAME,
  BKD.UNIT_COST,
  BKD.UNIT_AREA,
  BKD.UOM,
  BKD.EVENT_NAME,
  INV.STATUS,
  BKD.INST_PCT_AVG,
  INV.DUE_DATE ,
  BKD.DUE_DATE ,
  BKD.INST_AMT,
  BKD.PERIOD_DURATION
UNION ALL
SELECT distinct BKD1.PROPERTY_ID ,
  BKD1.PROJECT_NAME,
  BKD1.UNIT_NO,
  BKD1.CUSTOMER_NAME,
  BKD1.UNIT_COST,
  BKD1.UNIT_AREA,
  BKD1.UOM,
  'Credit Memo' EVENT_NAME,
  INV.STATUS STATUS,
  BKD1.INST_PCT_AVG,
  NVL(INV.DUE_DATE , BKD1.DUE_DATE) PAY_DUE_DATE,
  NVL(BKD1.INST_AMT,0) * -1 INST_AMT,
  0 RECEIVED_AMT,
  NVL(BKD1.INST_AMT,0) * -1 OUTSTANDING_AMT,
  NVL(BKD1.INST_AMT,0) * -1 DUE_NOW,
  0 NOT_DUE,
  0 DUE_DAYS,
  0 AMT_0_30,
  0 AMT_31_60,
  0 AMT_61_90,
  0 AMT_91_120,
  0 AMT_121_180,
  0 AMT_180,
  0 BEFORE_COMPL,
  0 ON_COMPL,
  0 AFTER_COMPL
FROM BOOKING_DTL_1 BKD1 ,
  INV_DTL INV
WHERE 1                  = 1
AND BKD1.BOOKING_HDR_ID   = INV.BOOKING_ID(+)
AND BKD1.INVOICE_ID       = INV.INVOICE_ID
--AND BKD1.INSTALLMENT_TYPE = INV.INSTALLMENT_TYPE(+)
--AND BKD1.PROPERTY_ID      = NVL(P_PROP_NAME, BKD1.PROPERTY_ID)
AND BKD1.PROPERTY_ID  = DECODE(P_PROP_NAME,59,BKD1.PROPERTY_ID ,P_PROP_NAME)
ORDER BY 1,3; 
  
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_AR_DETAIL; 

  FUNCTION XXPRISM_AR_SUMMARY(P_PROJ_NAME IN VARCHAR2
  ,P_PROP_NAME IN VARCHAR2,
  P_DATE IN DATE) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROJ_NAME); 
      dbms_output.Put_line(P_PROP_NAME);
      dbms_output.Put_line(P_DATE);

      OPEN l_query_ref FOR 

--SELECT PROJECT_NAME,
--  CUSTOMER_NAME,
--  UNIT_NO,
--  SUM(SPA_AMT) SPA_AMT,
--  SUM(INST_AMT) INST_AMT,
--  SUM(RECEIVED_AMT) RECEIVED_AMT,
--  SUM(INST_AMT) - SUM(RECEIVED_AMT) BALANCE_RECEIVED,
--  --  SUM(NVL(DUE_NOW,0)) DUE_NOW,
--  SUM(NVL(
--  CASE
--    WHEN due_days < 0
--    THEN (INST_AMT) - (RECEIVED_AMT)
--  END,0)) DUE_NOW,
--  SUM(NVL(
--  CASE
--    WHEN due_days BETWEEN 0 AND 30
--    THEN (INST_AMT) - (RECEIVED_AMT)
--  END,0)) amt_0_30,
--  SUM(NVL(
--  CASE
--    WHEN due_days BETWEEN 31 AND 60
--    THEN (INST_AMT) - (RECEIVED_AMT)
--  END,0)) amt_31_60,
--  SUM(NVL(
--  CASE
--    WHEN due_days BETWEEN 61 AND 90
--    THEN (INST_AMT) - (RECEIVED_AMT)
--  END,0)) amt_61_90,
--  SUM(NVL(
--  CASE
--    WHEN due_days > 90
--    THEN (INST_AMT) - (RECEIVED_AMT)
--  END,0)) amt_90,
--  SUM(NVL(BEFORE_COMPL,0)) BEFORE_COMPL,
--  SUM(NVL(ON_COMPL,0)) ON_COMPL,
--  SUM(NVL(AFTER_COMPL,0)) AFTER_COMPL
--FROM
--  (SELECT XBM.MS_DTL_ID,
--    XBH.BOOKING_HDR_ID,
--    XBH.BOOKING_NUMBER,
--    XP.PROJECT_NUMBER ,
--    XP.PROJECT_NAME,
--    XPM.PROPERTY_NAME,
--    XPU.UNIT_NAME UNIT_NO,
--    XC.CUSTOMER_NAME,
--    XBD.BOOKING_RATE UNIT_COST,
--    XBD.BOOKING_RATE SQFT_PRICE,
--    CASE
--      WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
--      THEN
--        CASE
--          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
--          THEN XLV.LOOKUP_VALUE_NAME_DISP
--            ||'-'
--            ||XLV1.LOOKUP_VALUE_NAME_DISP
--          ELSE XLV.LOOKUP_VALUE_NAME_DISP
--            ||'-'
--            ||XMD.INSTALLMENT_EVENT
--        END
--      ELSE
--        CASE
--          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
--          THEN XLV.LOOKUP_VALUE_NAME_DISP
--          ELSE XLV.LOOKUP_VALUE_NAME_DISP
--        END
--    END EVENT_NAME,
--    XBM.INSTALLMENT_PCT INST_PCT_AVG,
--    NVL(XIH.DUE_DATE, XBM.DUE_DATE) PAY_DUE_DATE,
--    NVL(XBM.INSTALLMENT_AMOUNT,0) SPA_AMT,
--    CASE
--      WHEN XIH.INTERFACE_STATUS IN ('Invoiced', 'INVOICED')
--      THEN NVL(XBM.INSTALLMENT_AMOUNT,0)
--    END INST_AMT,
--    SUM(NVL(XRD.AMOUNT_APPLIED,0)) RECEIVED_AMT,
--    (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0))) OUTSTANDING_AMT,
--    XP.COMPLETION_DATE,
--    (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) DUE_DAYS,
--    CASE
--      WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) < SYSDATE
--      THEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')))
--      ELSE NULL
--    END DUE_DAYS_1,
--    NVL(
--    CASE
--      WHEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 0 AND 30
--      THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                       - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
--    END,0) AMT_0_30,
--    NVL(
--    CASE
--      WHEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 31 AND 60
--      THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                       - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
--    END,0) AMT_31_60,
--    NVL(
--    CASE
--      WHEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 61 AND 90
--      THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                       - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
--    END,0) AMT_61_90,
--    NVL(
--    CASE
--      WHEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) > 90
--      THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                       - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
--    END,0) AMT_90,
--    NVL(
--    CASE
--      WHEN XBM.PERIOD_DURATION = 'Due Before Completion'
--      THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
--    END,0) BEFORE_COMPL,
--    NVL(
--    CASE
--      WHEN XBM.PERIOD_DURATION = 'Due On Completion'
--      THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
--    END,0) ON_COMPL,
--    NVL(
--    CASE
--      WHEN XBM.PERIOD_DURATION = 'Due Post Completion'
--      THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
--    END,0) AFTER_COMPL,
--    XPU.STATUS,
--    XBH.CREATED_BY
--  FROM XXPM_BOOKING_HEADER XBH,
--    XXPM_BOOKING_MILESTONES XBM,
--    XXPM_BOOKING_DETAIL XBD,
--    XXPM_BOOKING_CUSTOMER XBC,
--    XXPM_PROPERTY_MASTER XPM,
--    XXPM_PROPERTY_UNITS XPU,
--    -- XXPM_PROPERTY_AREA XPA,
--    XXPM_MILESTONE_DTL XMD,
--    XXSTG_PROJECTS XP,
--    XXSTG_CUSTOMER XC,
--    XXFND_LOOKUP_TYPES XLT,
--    XXFND_LOOKUP_TYPES XLT1,
--    XXFND_LOOKUP_VALUES XLV,
--    XXFND_LOOKUP_VALUES XLV1,
--    XXPM_INVOICE_HEADER XIH,
--    XXPM_INVOICE_LINES XIL,
--    XXPM_RECEIPT_DETAILS XRD,
--    XXPM_RECEIPT XPR
--  WHERE XBH.BOOKING_HDR_ID = XBM.BOOKING_HDR_ID(+)
--  AND XBH.BOOKING_HDR_ID   = XBD.BOOKING_HDR_ID(+)
--  AND XBH.BOOKING_HDR_ID   = XBC.BOOKING_HDR_ID(+)
--  AND XBD.UNIT_ID          = XPU.UNIT_ID(+)
--  AND XBH.PROPERTY_ID      = XPM.PROPERTY_ID(+)
--    -- AND XPU.UNIT_ID           = XPA.UNIT_ID
--  AND XPM.PROJECT_ID        = XP.PROJ_ID(+)
--  AND XPM.ORG_ID            = XP.ORG_ID(+)
--  AND XBC.CUST_ID           = XC.CUST_ID(+)
--  AND XBH.BOOKING_HDR_ID    = XIH.BOOKING_ID(+)
--  AND XBM.INVOICE_ID        = XIH.INVOICE_ID(+)
--  AND XBM.INSTALLMENT_TYPE  = XIL.INSTALLMENT_TYPE(+)
--  AND XIH.INVOICE_ID        = XIL.INVOICE_ID(+)
--  AND XIH.INVOICE_ID        = XRD.INVOICE_ID(+)
--  AND XBM.MS_DTL_ID         = XMD.MS_DTL_ID(+)
--  AND XBM.INSTALLMENT_TYPE  = XLV.LOOKUP_VALUE_NAME(+)
--  AND XBM.INSTALLMENT_EVENT = XLV1.LOOKUP_VALUE_NAME(+)
--  AND XLT.LOOKUP_TYPE_ID    = XLV.LOOKUP_TYPE_ID(+)
--  AND XLT1.LOOKUP_TYPE_ID   = XLV1.LOOKUP_TYPE_ID(+)
--  AND XRD.RECEIPT_ID        = XPR.RECEIPT_ID(+)
--  AND XLT.LOOKUP_TYPE_NAME  = 'MILESTONE_INSTALLMENT'
--  AND XLT1.LOOKUP_TYPE_NAME = 'BOOKING_EVENT'-- 'MILESTONE_INSTALLMENT'
--  AND XBH.USAGE             = 'S'
--  AND XBH.STATUS            = 'APR'
--    --  AND XIH.INTERFACE_STATUS IN ('Invoiced', 'INVOICED')
--  AND (XRD.ATTRIBUTE1 <> 'D'
--  OR XRD.ATTRIBUTE1   IS NULL)
--    --  AND XPM.PROPERTY_NAME = 'The Pad'
--    -- AND XP.PROJ_ID       = NVL(P_PROJ_NAME, XP.PROJ_ID)
--  AND XPM.PROPERTY_ID = NVL(P_PROP_NAME, XPM.PROPERTY_ID)
--  GROUP BY XBM.MS_DTL_ID,
--    XBH.BOOKING_HDR_ID,
--    XBH.BOOKING_NUMBER,
--    XP.PROJECT_NUMBER ,
--    XP.PROJECT_NAME,
--    XPM.PROPERTY_NAME,
--    XPU.UNIT_NAME ,
--    XC.CUSTOMER_NAME,
--    XBD.BOOKING_RATE ,
--    XBD.BOOKING_RATE ,
--    CASE
--      WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
--      THEN
--        CASE
--          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
--          THEN XLV.LOOKUP_VALUE_NAME_DISP
--            ||'-'
--            ||XLV1.LOOKUP_VALUE_NAME_DISP
--          ELSE XLV.LOOKUP_VALUE_NAME_DISP
--            ||'-'
--            ||XMD.INSTALLMENT_EVENT
--        END
--      ELSE
--        CASE
--          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
--          THEN XLV.LOOKUP_VALUE_NAME_DISP
--          ELSE XLV.LOOKUP_VALUE_NAME_DISP
--        END
--    END,
--    XBM.INSTALLMENT_PCT ,
--    CASE
--      WHEN XIH.INTERFACE_STATUS IN ('Invoiced', 'INVOICED')
--      THEN NVL(XBM.INSTALLMENT_AMOUNT,0)
--    END,
--    NVL(XIH.DUE_DATE, XBM.DUE_DATE) ,
--    NVL(XBM.INSTALLMENT_AMOUNT,0),
--    XP.COMPLETION_DATE,
--    (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) ,
--    CASE
--      WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) < SYSDATE
--      THEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')))
--      ELSE NULL
--    END,
--    XBM.PERIOD_DURATION,
--    XPU.STATUS,
--    XBH.CREATED_BY
--  )
--GROUP BY PROJECT_NAME,
--  CUSTOMER_NAME,
--  UNIT_NO
--ORDER BY PROJECT_NAME,
--  UNIT_NO;



SELECT PROJECT_NAME,
  CUSTOMER_NAME,
  UNIT_NO,
  SUM(INST_AMT) SPA_AMT,
  SUM(INST_AMT) INST_AMT,
  SUM(RECEIVED_AMT) RECEIVED_AMT,
  SUM(OUTSTANDING_AMT) BALANCE_RECEIVED,
  SUM(DUE_NOW) DUE_NOW,
  SUM(AMT_0_30) amt_0_30,
  SUM(AMT_31_60) amt_31_60,
  SUM(AMT_61_90) amt_61_90,
  SUM(AMT_91_120) amt_90,
  SUM(BEFORE_COMPL) BEFORE_COMPL,
  SUM(ON_COMPL) ON_COMPL,
  SUM(AFTER_COMPL) AFTER_COMPL
FROM
  (WITH BOOKING_DTL AS
  (SELECT XBM.MS_DTL_ID,
    XBH.BOOKING_HDR_ID,
    XBH.BOOKING_NUMBER,
    XP.PROJECT_NUMBER ,
    XP.PROJECT_NAME,
    XPM.PROPERTY_ID,
    XPM.PROPERTY_NAME,
    XPU.UNIT_NAME UNIT_NO,
    XC.CUSTOMER_NAME,
    XBD.BOOKING_RATE UNIT_COST,
    XPA.VALUE UNIT_AREA,
    XPA.UOM UOM,
    XBD.BOOKING_RATE SQFT_PRICE,
    CASE
      WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
      THEN
        CASE
          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
          THEN XLV.LOOKUP_VALUE_NAME_DISP
            ||'-'
            ||XLV1.LOOKUP_VALUE_NAME_DISP
          ELSE XLV.LOOKUP_VALUE_NAME_DISP
            ||'-'
            ||XMD.INSTALLMENT_EVENT
        END
      ELSE
        CASE
          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
          THEN XLV.LOOKUP_VALUE_NAME_DISP
          ELSE XLV.LOOKUP_VALUE_NAME_DISP
        END
    END EVENT_NAME,
    XBM.INSTALLMENT_PCT INST_PCT_AVG,
    NVL(XBM.INSTALLMENT_AMOUNT,0) INST_AMT ,
    XP.COMPLETION_DATE,
    XPU.STATUS PROPERTY_STATUS,
    XBH.CREATED_BY,
    XBM.PERIOD_DURATION,
    XBM.DUE_DATE,
    XBM.INSTALLMENT_TYPE,
    XBM.INVOICE_ID
  FROM XXPM_BOOKING_HEADER XBH,
    XXPM_BOOKING_MILESTONES XBM,
    XXPM_BOOKING_DETAIL XBD,
    XXPM_BOOKING_CUSTOMER XBC,
    XXPM_PROPERTY_MASTER XPM,
    XXPM_PROPERTY_UNITS XPU,
    XXPM_PROPERTY_AREA XPA,
    XXPM_MILESTONE_DTL XMD,
    XXSTG_PROJECTS XP,
    XXSTG_CUSTOMER XC,
    XXFND_LOOKUP_TYPES XLT,
    XXFND_LOOKUP_TYPES XLT1,
    XXFND_LOOKUP_VALUES XLV,
    XXFND_LOOKUP_VALUES XLV1
  WHERE XBH.BOOKING_HDR_ID  = XBM.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID(+)
  AND XBD.UNIT_ID           = XPU.UNIT_ID(+)
  AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID(+)
  AND XPU.UNIT_ID           = XPA.UNIT_ID(+)
  AND XPM.PROJECT_ID        = XP.PROJ_ID(+)
  AND XPM.ORG_ID            = XP.ORG_ID(+)
  AND XBC.CUST_ID           = XC.CUST_ID(+)
  AND XBM.MS_DTL_ID         = XMD.MS_DTL_ID(+)
  AND XBM.INSTALLMENT_TYPE  = XLV.LOOKUP_VALUE_NAME(+)
  AND XBM.INSTALLMENT_EVENT = XLV1.LOOKUP_VALUE_NAME(+)
  AND XLT.LOOKUP_TYPE_ID    = XLV.LOOKUP_TYPE_ID(+)
  AND XLT1.LOOKUP_TYPE_ID   = XLV1.LOOKUP_TYPE_ID(+)
  AND XLT.LOOKUP_TYPE_NAME  = 'MILESTONE_INSTALLMENT'
  AND XLT1.LOOKUP_TYPE_NAME = 'BOOKING_EVENT'
  AND XBH.USAGE             = 'S'
  AND XPA.AREA(+)           = 'CHARGE'
  AND XBM.MILESTONE_TYPE    = 'MS'
  AND XBH.BOOKING_DATE     <= P_DATE
  ),
  BOOKING_DTL_1 AS
  (SELECT XBM.MS_DTL_ID,
    XBH.BOOKING_HDR_ID,
    XBH.BOOKING_NUMBER,
    XP.PROJECT_NUMBER ,
    XP.PROJECT_NAME,
    XPM.PROPERTY_ID,
    XPM.PROPERTY_NAME,
    XPU.UNIT_NAME UNIT_NO,
    XC.CUSTOMER_NAME,
    XBD.BOOKING_RATE UNIT_COST,
    XPA.VALUE UNIT_AREA,
    XPA.UOM UOM,
    XBD.BOOKING_RATE SQFT_PRICE,
    CASE
      WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
      THEN
        CASE
          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
          THEN XLV.LOOKUP_VALUE_NAME_DISP
            ||'-'
            ||XLV1.LOOKUP_VALUE_NAME_DISP
          ELSE XLV.LOOKUP_VALUE_NAME_DISP
            ||'-'
            ||XMD.INSTALLMENT_EVENT
        END
      ELSE
        CASE
          WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
          THEN XLV.LOOKUP_VALUE_NAME_DISP
          ELSE XLV.LOOKUP_VALUE_NAME_DISP
        END
    END EVENT_NAME,
    XBM.INSTALLMENT_PCT INST_PCT_AVG,
    NVL(XBM.INSTALLMENT_AMOUNT,0) INST_AMT ,
    XP.COMPLETION_DATE,
    XPU.STATUS PROPERTY_STATUS,
    XBH.CREATED_BY,
    XBM.PERIOD_DURATION,
    XBM.DUE_DATE,
    XBM.INSTALLMENT_TYPE,
    XBM.INVOICE_ID
  FROM XXPM_BOOKING_HEADER XBH,
    XXPM_BOOKING_MILESTONES XBM,
    XXPM_BOOKING_DETAIL XBD,
    XXPM_BOOKING_CUSTOMER XBC,
    XXPM_PROPERTY_MASTER XPM,
    XXPM_PROPERTY_UNITS XPU,
    XXPM_PROPERTY_AREA XPA,
    XXPM_MILESTONE_DTL XMD,
    XXSTG_PROJECTS XP,
    XXSTG_CUSTOMER XC,
    XXFND_LOOKUP_TYPES XLT,
    XXFND_LOOKUP_TYPES XLT1,
    XXFND_LOOKUP_VALUES XLV,
    XXFND_LOOKUP_VALUES XLV1
  WHERE XBH.BOOKING_HDR_ID  = XBM.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID(+)
  AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID(+)
  AND XBD.UNIT_ID           = XPU.UNIT_ID(+)
  AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID(+)
  AND XPU.UNIT_ID           = XPA.UNIT_ID(+)
  AND XPM.PROJECT_ID        = XP.PROJ_ID(+)
  AND XPM.ORG_ID            = XP.ORG_ID(+)
  AND XBC.CUST_ID           = XC.CUST_ID(+)
  AND XBM.MS_DTL_ID         = XMD.MS_DTL_ID(+)
  AND XBM.INSTALLMENT_TYPE  = XLV.LOOKUP_VALUE_NAME(+)
  AND XBM.INSTALLMENT_EVENT = XLV1.LOOKUP_VALUE_NAME(+)
  AND XLT.LOOKUP_TYPE_ID    = XLV.LOOKUP_TYPE_ID(+)
  AND XLT1.LOOKUP_TYPE_ID   = XLV1.LOOKUP_TYPE_ID(+)
  AND XLT.LOOKUP_TYPE_NAME  = 'MILESTONE_INSTALLMENT'
  AND XLT1.LOOKUP_TYPE_NAME = 'BOOKING_EVENT'
  AND XBH.USAGE             = 'S'
  AND XPA.AREA(+)           = 'CHARGE'
  AND XBM.MILESTONE_TYPE   != 'MS'
  AND XBH.BOOKING_DATE     <= P_DATE
  ),
  INV_DTL AS
  (SELECT XIH.BOOKING_ID,
    XIH.INVOICE_ID,
    XIL.INSTALLMENT_TYPE,
    XIH.DUE_DATE,
    XIH.INTERFACE_STATUS STATUS,
    XIH.INVOICE_DATE
  FROM XXPM_INVOICE_HEADER XIH,
    XXPM_INVOICE_LINES XIL
  WHERE XIH.INVOICE_ID   = XIL.INVOICE_ID(+)
  AND (XIH.INVOICE_DATE <= P_DATE
  OR XIH.INVOICE_DATE   IS NULL)
  ),
  RCT_DTL AS
  (SELECT XRD.INVOICE_ID,
    XRD.RECEIPT_ID ,
    SUM(NVL(XRD.AMOUNT_APPLIED,0)) RECEIVED_AMT,
    XPR.RECEIPT_DATE
  FROM XXPM_RECEIPT_DETAILS XRD,
    XXPM_RECEIPT XPR
  WHERE XRD.RECEIPT_ID          = XPR.RECEIPT_ID(+)
  AND (TRUNC(XRD.APPLIED_DATE) <= P_DATE
  OR TRUNC(XRD.APPLIED_DATE)   IS NULL)
  GROUP BY XRD.INVOICE_ID,
    XRD.RECEIPT_ID,
    XPR.RECEIPT_DATE
  )
SELECT BKD.PROPERTY_ID ,
  BKD.PROJECT_NAME,
  BKD.UNIT_NO,
  BKD.CUSTOMER_NAME,
  BKD.UNIT_COST,
  BKD.UNIT_AREA,
  BKD.UOM,
  BKD.EVENT_NAME,
  CASE
    WHEN INV.STATUS IS NULL
    THEN 'Not Invoiced'
    ELSE INITCAP(INV.STATUS)
  END STATUS,
  BKD.INST_PCT_AVG,
  NVL(INV.DUE_DATE , BKD.DUE_DATE) PAY_DUE_DATE,
  NVL(BKD.INST_AMT,0) INST_AMT,
  SUM(NVL(RCT.RECEIVED_AMT,0)) RECEIVED_AMT,
  NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0)) OUTSTANDING_AMT,
  CASE
    WHEN INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END DUE_NOW,
  CASE
    WHEN INV.STATUS IS NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END NOT_DUE,
  (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) DUE_DAYS,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 0 AND 30
    AND INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_0_30,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 31 AND 60
    AND INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_31_60,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 61 AND 90
    AND INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_61_90,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 91 AND 120
    AND INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_91_120,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 121 AND 180
    AND INV.STATUS IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_121_180,
  CASE
    WHEN (TO_DATE (TO_CHAR (P_DATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (INV.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (BKD.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) > 180
    AND INV.STATUS                                                                                                                                                                     IS NOT NULL
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AMT_180,
  CASE
    WHEN BKD.PERIOD_DURATION = 'DUE BEFORE COMPLETION'
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END BEFORE_COMPL,
  CASE
    WHEN BKD.PERIOD_DURATION = 'DUE ON COMPLETION'
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END ON_COMPL,
  CASE
    WHEN BKD.PERIOD_DURATION = 'DUE POST COMPLETION'
    THEN NVL(BKD.INST_AMT,0) - SUM(NVL(RCT.RECEIVED_AMT,0))
    ELSE 0
  END AFTER_COMPL
FROM BOOKING_DTL BKD ,
  INV_DTL INV,
  RCT_DTL RCT
WHERE 1                  = 1
AND BKD.BOOKING_HDR_ID   = INV.BOOKING_ID(+)
AND BKD.INVOICE_ID       = INV.INVOICE_ID(+)
AND BKD.INSTALLMENT_TYPE = INV.INSTALLMENT_TYPE(+)
AND INV.INVOICE_ID       = RCT.INVOICE_ID(+)
--AND BKD.PROPERTY_ID      = NVL(P_PROP_NAME, BKD.PROPERTY_ID)
AND BKD.PROPERTY_ID  = DECODE(P_PROP_NAME,59,BKD.PROPERTY_ID ,P_PROP_NAME)
GROUP BY BKD.PROPERTY_ID ,
  BKD.PROJECT_NAME,
  BKD.UNIT_NO,
  BKD.CUSTOMER_NAME,
  BKD.UNIT_COST,
  BKD.UNIT_AREA,
  BKD.UOM,
  BKD.EVENT_NAME,
  INV.STATUS,
  BKD.INST_PCT_AVG,
  INV.DUE_DATE ,
  BKD.DUE_DATE ,
  BKD.INST_AMT,
  BKD.PERIOD_DURATION
UNION ALL
SELECT DISTINCT BKD1.PROPERTY_ID ,
  BKD1.PROJECT_NAME,
  BKD1.UNIT_NO,
  BKD1.CUSTOMER_NAME,
  BKD1.UNIT_COST,
  BKD1.UNIT_AREA,
  BKD1.UOM,
  'Credit Memo' EVENT_NAME,
  INV.STATUS STATUS,
  BKD1.INST_PCT_AVG,
  NVL(INV.DUE_DATE , BKD1.DUE_DATE) PAY_DUE_DATE,
  NVL(BKD1.INST_AMT,0) * -1 INST_AMT,
  0 RECEIVED_AMT,
  NVL(BKD1.INST_AMT,0) * -1 OUTSTANDING_AMT,
  NVL(BKD1.INST_AMT,0) * -1 DUE_NOW,
  0 NOT_DUE,
  0 DUE_DAYS,
  0 AMT_0_30,
  0 AMT_31_60,
  0 AMT_61_90,
  0 AMT_91_120,
  0 AMT_121_180,
  0 AMT_180,
  0 BEFORE_COMPL,
  0 ON_COMPL,
  0 AFTER_COMPL
FROM BOOKING_DTL_1 BKD1 ,
  INV_DTL INV
WHERE 1                 = 1
AND BKD1.BOOKING_HDR_ID = INV.BOOKING_ID(+)
AND BKD1.INVOICE_ID     = INV.INVOICE_ID
  --AND BKD1.INSTALLMENT_TYPE = INV.INSTALLMENT_TYPE(+)
--AND BKD1.PROPERTY_ID = NVL(P_PROP_NAME, BKD1.PROPERTY_ID)
AND BKD1.PROPERTY_ID  = DECODE(P_PROP_NAME,59,BKD1.PROPERTY_ID ,P_PROP_NAME)
  )
GROUP BY PROJECT_NAME,
  CUSTOMER_NAME,
  UNIT_NO;
  
  
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_AR_SUMMARY; 

  FUNCTION XXPRISM_UNIT_STATUS(P_PROJ_NAME IN VARCHAR2
  ,P_PROP_NAME IN VARCHAR2) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROJ_NAME); 
      dbms_output.Put_line(P_PROP_NAME);

      OPEN l_query_ref FOR 

/*BOOKED, BLOCKED*/

SELECT XBH.BOOKING_HDR_ID BOOKING_HDR_ID,
  XBH.BOOKING_NUMBER BOOKING_NUMBER,
  XP.PROJECT_NUMBER PROJECT_NUMBER,
  XP.PROJECT_NAME PROJECT_NAME,
  XPU.UNIT_NUMBER UNIT_NO,
  XC.CUSTOMER_NAME CUSTOMER,
  (XPU.BASE_RATE * XPA.VALUE) UNIT_COST,
  XPA.VALUE UNIT,
  XPA.UOM AREA,
  (XPU.BASE_RATE * XPA.VALUE) SQFT_PRICE,
  XLU.LOOKUP_VALUE_NAME_DISP STATUS,
  CASE
    WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
    THEN
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XLV1.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XMD.INSTALLMENT_EVENT
      END
    ELSE
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
      END
  END EVENT_NAME,
  XBM.INSTALLMENT_PCT INST_PCT_AVG,
  NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')) PAY_DUE_DATE,
  --NVL(XIH.DUE_DATE, XBM.DUE_DATE) PAY_DUE_DATE,
  NVL(XBM.INSTALLMENT_AMOUNT,0) INST_AMT,
  SUM(NVL(XRD.AMOUNT_APPLIED,0))RECEIVED_AMT,
  (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0))) OUTSTANDING_AMT,
  NULL DATE_CHANGE,
  NVL(
  CASE
    WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) > SYSDATE
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) NOT_DUE,
  NVL(
  CASE
    WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) <= SYSDATE
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) OVERDUE,
  NVL(
  CASE
    WHEN NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')) BETWEEN TO_DATE('01012019','DDMMYYYY') AND TO_DATE('30062019','DDMMYYYY')
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) JAN_JUNE_19,
  NVL(
  CASE
    WHEN NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')) BETWEEN TO_DATE('01072019','DDMMYYYY') AND TO_DATE('31122019','DDMMYYYY')
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) JULY_DEC_19,
  NVL(
  CASE
    WHEN NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')) BETWEEN TO_DATE('01012020','DDMMYYYY') AND TO_DATE('31122020','DDMMYYYY')
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) JAN_DEC_20,
  NVL(
  CASE
    WHEN NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')) BETWEEN TO_DATE('01012021','DDMMYYYY') AND TO_DATE('31122021','DDMMYYYY')
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) JAN_DEC_21,
  NVL(
  CASE
    WHEN NVL(TO_CHAR (XIH.DUE_DATE,'YYYY'), TO_CHAR (XBM.DUE_DATE,'YYYY')) > 2022
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) ONW_2022
FROM XXPM_BOOKING_HEADER XBH,
  XXPM_BOOKING_MILESTONES XBM,
  XXPM_BOOKING_DETAIL XBD,
  XXPM_BOOKING_CUSTOMER XBC,
  XXPM_PROPERTY_MASTER XPM,
  XXPM_PROPERTY_UNITS XPU,
  XXPM_PROPERTY_AREA XPA,
  XXPM_MILESTONE_DTL XMD,
  XXSTG_PROJECTS XP,
  XXSTG_CUSTOMER XC,
  XXFND_LOOKUP_TYPES XLT,
  XXFND_LOOKUP_TYPES XLT1,
  XXFND_LOOKUP_VALUES XLV,
  XXFND_LOOKUP_VALUES XLV1,
  XXPM_INVOICE_HEADER XIH,
  XXPM_INVOICE_LINES XIL,
  XXPM_RECEIPT_DETAILS XRD,
  XXFND_LOOKUP_V XLU
WHERE 1                   =1
AND XBH.BOOKING_HDR_ID    = XBM.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID
AND XBD.UNIT_ID           = XPU.UNIT_ID
AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID
AND XPM.PROPERTY_ID       = XPU.PROPERTY_ID
AND XPU.UNIT_ID           = XPA.UNIT_ID
AND XPM.PROJECT_ID        = XP.PROJ_ID
AND XPM.ORG_ID            = XP.ORG_ID
AND XBC.CUST_ID           = XC.CUST_ID
AND XBH.BOOKING_HDR_ID    = XIH.BOOKING_ID(+)
AND XBM.INVOICE_ID        = XIH.INVOICE_ID(+)
AND XBM.INSTALLMENT_TYPE  = XIL.INSTALLMENT_TYPE(+)
AND XIH.INVOICE_ID        = XIL.INVOICE_ID(+)
AND XIH.INVOICE_ID        = XRD.INVOICE_ID(+)
AND XBM.MS_DTL_ID         = XMD.MS_DTL_ID(+)
AND XBM.INSTALLMENT_TYPE  = XLV.LOOKUP_VALUE_NAME(+)
AND XBM.INSTALLMENT_EVENT = XLV1.LOOKUP_VALUE_NAME(+)
AND XLT.LOOKUP_TYPE_ID    = XLV.LOOKUP_TYPE_ID(+)
AND XLT1.LOOKUP_TYPE_ID   = XLV1.LOOKUP_TYPE_ID(+)
AND XPU.STATUS            = XLU.LOOKUP_VALUE_NAME (+)
AND XLT.LOOKUP_TYPE_NAME  = 'MILESTONE_INSTALLMENT'
AND XLT1.LOOKUP_TYPE_NAME = 'BOOKING_EVENT'
AND XBC.PRIMARY_YN        = 'Y'
  --AND XP.PROJ_ID = 300000002086347
  --AND XPM.PROPERTY_NAME     = 'Omniyat001'
  --AND XPU.UNIT_NUMBER = 'OM001-008'
AND XPU.STATUS     IN ('BOOK', 'BLOCK', 'SOLD')
AND XBH.STATUS     <> 'CANCEL'
AND XP.PROJ_ID      = NVL(P_PROJ_NAME, XP.PROJ_ID)
AND XPM.PROPERTY_ID = NVL(P_PROP_NAME, XPM.PROPERTY_ID)
GROUP BY XBH.BOOKING_HDR_ID,
  XBH.BOOKING_NUMBER,
  XP.PROJECT_NUMBER,
  XP.PROJECT_NAME,
  XPU.UNIT_NUMBER,
  XC.CUSTOMER_NAME,
  (XPU.BASE_RATE * XPA.VALUE),
  XPA.VALUE,
  XPA.UOM ,
  (XPU.BASE_RATE * XPA.VALUE),
  XLU.LOOKUP_VALUE_NAME_DISP ,
  CASE
    WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
    THEN
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XLV1.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XMD.INSTALLMENT_EVENT
      END
    ELSE
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
      END
  END ,
  XBM.INSTALLMENT_PCT,
  NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')),
  NVL(TO_CHAR (XIH.DUE_DATE,'YYYY'), TO_CHAR (XBM.DUE_DATE,'YYYY')),
  NVL(XIH.DUE_DATE, XBM.DUE_DATE),
  NVL(XBM.INSTALLMENT_AMOUNT,0)
UNION ALL

/*ALLOTED, AVAILABLE*/
SELECT NULL BOOKING_HDR_ID,
  NULL BOOKING_NUMBER,
  XP.PROJECT_NUMBER PROJECT_NUMBER,
  XP.PROJECT_NAME PROJECT_NAME,
  XPU.UNIT_NUMBER UNIT_NO,
  NULL CUSTOMER,
  (XPU.BASE_RATE * XPA.VALUE) UNIT_COST,
  XPA.VALUE UNIT,
  XPA.UOM AREA,
  (XPU.BASE_RATE * XPA.VALUE) SQFT_PRICE,
  XLU.LOOKUP_VALUE_NAME_DISP STATUS,
  NULL EVENT_NAME,
  NULL INST_PCT_AVG,
  NULL PAY_DUE_DATE,
  0 INST_AMT,
  0 RECEIVED_AMT,
  0 OUTSTANDING_AMT,
  NULL DATE_CHANGE,
  0 NOT_DUE,
  0 OVERDUE,
  0 JAN_JUNE_19,
  0 JULY_DEC_19,
  0 JAN_DEC_20,
  0 JAN_DEC_21,
  0 ONW_2022
FROM XXPM_PROPERTY_MASTER XPM,
  XXPM_PROPERTY_UNITS XPU,
  XXPM_PROPERTY_AREA XPA,
  XXSTG_PROJECTS XP,
  XXFND_LOOKUP_V XLU
WHERE 1             =1
AND XPM.PROPERTY_ID = XPU.PROPERTY_ID
AND XPU.UNIT_ID     = XPA.UNIT_ID(+)
AND XPM.PROJECT_ID  = XP.PROJ_ID
AND XPM.ORG_ID      = XP.ORG_ID
AND XPU.STATUS      = XLU.LOOKUP_VALUE_NAME (+)
AND XPU.STATUS     IN ('AVAL', 'ALOT')
  --AND XP.PROJ_ID = 300000002086347
  --AND XPM.PROPERTY_NAME     = 'Omniyat001'
  --AND XPU.UNIT_NUMBER IN ('OM001-020', 'OM001-017')
AND XP.PROJ_ID      = NVL(P_PROJ_NAME, XP.PROJ_ID)
AND XPM.PROPERTY_ID = NVL(P_PROP_NAME, XPM.PROPERTY_ID)
GROUP BY XP.PROJECT_NUMBER,
  XP.PROJECT_NAME,
  XPU.UNIT_NUMBER,
  (XPU.BASE_RATE * XPA.VALUE),
  XPA.VALUE ,
  XPA.UOM,
  (XPU.BASE_RATE * XPA.VALUE),
  XLU.LOOKUP_VALUE_NAME_DISP
ORDER BY STATUS,
  UNIT_NO;

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  END XXPRISM_UNIT_STATUS; 


   FUNCTION XXPRISM_SPA_REPORT(P_BLOCK_NUM IN VARCHAR2) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_BLOCK_NUM); 

      OPEN l_query_ref FOR 
		SELECT 
		XO.ORG_NAME,
    XC.CUSTOMER_NAME,
		XCC.PASSPORT_NUMBER,
		XCC.EMAIL_ID,
		XCS.CITY,
		XLV.LOOKUP_VALUE_NAME_DISP COUNTRY,
		XCC.PHONE_NUMBER,
		XCC.FAX_NUMBER,
		XPB.BUILD_NAME,
		XPU.UNIT_NAME,
		XPU.UNIT_TYPE,
		XPA.VALUE AREA,
		XP.COMPLETION_DATE,
		XBD.BOOKING_AMOUNT,
		XXPM_UTILITY_PKG.AMOUNT_IN_WORDS(NVL(XBD.BOOKING_AMOUNT,0),'AED') AMT_IN_WORDS,
		XBA.BANK_NAME,
		XBA.BANK_NUMBER,
		XBA.BRANCH_NAME,
		XBA.SWIFT_CODE,
		XBA.BANK_ACCOUNT_NUM,
		XBA.IBAN,
		NULL BANK_ACC_NAME,
		NULL ADDRESS,
		CURSOR
		(
		SELECT
		XBM.INSTALLMENT_TYPE,
		XBM.INSTALLMENT_AMOUNT,
		XBM.DUE_DATE,
		(SELECT LOOKUP_VALUE_NAME_DISP FROM XXFND_LOOKUP_V WHERE LOOKUP_TYPE_NAME = 'MILESTONE_DURATION' AND LOOKUP_VALUE_NAME = XBM.PERIOD_DURATION)PERIOD_DURATION ,
		XBM.MILESTONE_TYPE,
		XBM.INSTALLMENT_PCT,
		XLV.LOOKUP_VALUE_NAME_DISP INS_TYPE
		FROM
		XXPM_BOOKING_MILESTONES XBM,
		XXFND_LOOKUP_V XLV
		WHERE 
		XBM.BOOKING_HDR_ID       = XBD.BOOKING_HDR_ID
		AND XBM.INSTALLMENT_TYPE = XLV.LOOKUP_VALUE_NAME(+)
		AND XLV.LOOKUP_TYPE_NAME(+) = 'MILESTONE_INSTALLMENT'
		AND XBM.MILESTONE_TYPE = 'MS'
		ORDER BY XBM.DUE_DATE ASC
		) INSTALL_PAY

		FROM 

		XXSTG_ORGANIZATIONS XO,
		XXPM_BOOKING_CUSTOMER XBC,
		XXPM_BOOKING_HEADER XBH,
		XXPM_BOOKING_DETAIL XBD,
		XXPM_PROPERTY_BUILDINGS XPB,
		XXPM_PROPERTY_MASTER XPM,
		XXPM_PROPERTY_UNITS XPU,
		XXPM_PROPERTY_AREA XPA,
		XXSTG_CUSTOMER XC,
		XXSTG_CUST_SITES XCS,
		XXSTG_CUST_CONTACTS XCC,
		XXSTG_PROJECTS XP,
		XXPM_PROPERTY_ESCROW XPE,
		XXSTG_BANK_ACCOUNTS XBA,
		XXFND_LOOKUP_V XLV

		WHERE 1=1


		AND XBC.BOOKING_HDR_ID      = XBH.BOOKING_HDR_ID
		AND XBH.BOOKING_HDR_ID      = XBD.BOOKING_HDR_ID
		AND XBD.BUILDING_ID         = XPB.BUILD_ID
		AND XBD.UNIT_ID             = XPU.UNIT_ID
		AND XPU.UNIT_ID             = XPA.UNIT_ID
		AND XBH.PROPERTY_ID         = XPM.PROPERTY_ID(+)
		AND XPM.PROJECT_ID          = XP.PROJ_ID(+)
		AND XC.CUST_ID              = XCS.CUST_ID
		AND XCS.CUST_ID             = XCC.CUST_ID(+)
		AND XCS.CUST_SITE_ID        = XCC.CUST_SITE_ID(+)
		AND XLV.LOOKUP_VALUE_NAME   = XCS.COUNTRY(+)
		AND XBC.CUST_ID             = XC.CUST_ID (+)
		AND XLV.LOOKUP_TYPE_NAME(+) = 'COUNTRY'
		AND XPB.BUILD_ID            = XPE.BUILD_ID(+)
		AND XPE.BANK_ACNT_ID        = XBA.BANK_ACNT_ID(+)
		AND XBH.ORG_ID              = XO.ORG_ID
		AND XCS.ORG_ID              = XO.ORG_ID
AND XBH.BOOKING_NUMBER        = P_BLOCK_NUM;

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_SPA_REPORT; 

  FUNCTION XXPRISM_ARABIC_SPA_REPORT(
    P_BLOCK_NUM IN VARCHAR2)
  RETURN CLOB
IS
  l_query_ref SYS_REFCURSOR;
  l_handle dbms_xmlgen.ctxhandle;
  l_data_xml CLOB;
BEGIN
  dbms_output.Put_line(P_BLOCK_NUM);
  OPEN l_query_ref FOR 
 SELECT XO.ORG_NAME,
  XO.ORG_NAME_TL,
  XC.CUSTOMER_NAME,
  XC.TITLE TITLE_Y,
  XC.SUR_NAME SURNAME_Y,
  XC.MIDDLE_NAME MIDDLE_NAME_Y,
  XC.FIRST_NAME FIRST_NAME_Y,
  XC.CUSTOMER_NAME_TL,
  XCC.PASSPORT_NUMBER PASSPORT_NUMBER_Y,
  XCC.EMAIL_ID EMAIL_ID_Y,
  XCS.CITY CITY_Y,
  XCS.ADDRESS1
  ||', '
  ||XCS.CITY ADDRESS_Y,
  XLV.LOOKUP_VALUE_NAME_DISP COUNTRY_Y,
  XCC.PHONE_NUMBER PHONE_NUMBER_Y,
  XCC.FAX_NUMBER,
  XPM.PROPERTY_NAME ,
  XPM.PROPERTY_NAME_TL ,
  XPB.BUILD_NAME,
  XPU.UNIT_NAME,
  XPU.UNIT_TYPE,
  XPA.VALUE UNIT,
  XPA.UOM AREA,
  XP.COMPLETION_DATE,
  XP.START_DATE,
  XBD.BOOKING_AMOUNT,
  XBH.BOOKING_DATE,
  XXPM_UTILITY_PKG.AMOUNT_IN_WORDS(NVL(XBD.BOOKING_AMOUNT,0),'AED') AMT_IN_WORDS,
  XBA.BANK_NAME,
  XBA.BANK_NUMBER,
  XBA.BRANCH_NAME,
  XBA.SWIFT_CODE,
  XBA.BANK_ACCOUNT_NUM,
  XBA.IBAN,
  NULL BANK_ACC_NAME,
  XBA.BRANCH_NAME
  ||', '
  ||XBA.CITY BANK_ADDRESS,
  CURSOR
  (SELECT XBH.BOOKING_NUMBER,
    XC.TITLE TITLE_N,
    XC.SUR_NAME SURNAME_N,
    XC.MIDDLE_NAME MIDDLE_NAME_N,
    XC.FIRST_NAME FIRST_NAME_N,
    XC.PASSPORT_NO PASSPORT_NO_N,
    XCC.EMAIL_ID EMAIL_ID_N,
    XCS.CITY CITY_N,
    XCC.PHONE_NUMBER PHONE_NUMBER_N,
    XCS.ADDRESS1
    ||', '
    ||XCS.CITY ADDRESS_N,
    XLV.LOOKUP_VALUE_NAME_DISP COUNTRY_N
  FROM XXPM_BOOKING_CUSTOMER XBC,
    XXSTG_CUSTOMER XC,
    XXSTG_CUST_SITES XCS,
    XXSTG_CUST_CONTACTS XCC,
    XXFND_LOOKUP_V XLV,
    XXSTG_ORGANIZATIONS XO
  WHERE 1                     = 1
  AND XBH.BOOKING_HDR_ID      = XBC.BOOKING_HDR_ID
  AND XBC.CUST_ID             = XC.CUST_ID (+)
  AND XC.CUST_ID              = XCS.CUST_ID
  AND XCS.CUST_ID             = XCC.CUST_ID(+)
  AND XCS.CUST_SITE_ID        = XCC.CUST_SITE_ID(+)
  AND XLV.LOOKUP_VALUE_NAME   = XCS.COUNTRY(+)
  AND XCS.ORG_ID              = XO.ORG_ID
  AND XBH.ORG_ID              = XO.ORG_ID
  AND XLV.LOOKUP_TYPE_NAME(+) = 'COUNTRY'
    --  AND XBH.BOOKING_NUMBER      = 'BK-1000924'
  AND XBC.PRIMARY_YN = 'N'
  ) CUST,
  CURSOR
  (SELECT XBM.INSTALLMENT_TYPE,
    XBM.INSTALLMENT_AMOUNT,
    XBM.DUE_DATE,
    --    (SELECT LOOKUP_VALUE_NAME_DISP
    --    FROM XXFND_LOOKUP_V
    --    WHERE LOOKUP_TYPE_NAME = 'MILESTONE_DURATION'
    --    AND LOOKUP_VALUE_NAME  = XBM.PERIOD_DURATION
    --    )PERIOD_DURATION ,
    XBM.MILESTONE_TYPE,
    XBM.INSTALLMENT_PCT,
    XLV.LOOKUP_VALUE_NAME_DISP INS_TYPE,
    XMD.INSTALLMENT_EVENT,
    CASE
      WHEN XMD.INSTALLMENT_METHOD = 'Project Milestone'
      THEN XMD.INSTALLMENT_EVENT
      ELSE 'Not Applicable'
    END PERIOD_DURATION
    --    XMD.PERIOD_DURATION
  FROM XXPM_BOOKING_MILESTONES XBM,
    XXPM_MILESTONE_DTL XMD,
    XXFND_LOOKUP_V XLV
  WHERE XBM.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID
  AND XBM.MS_DTL_ID           = XMD.MS_DTL_ID(+)
  AND XBM.INSTALLMENT_TYPE    = XLV.LOOKUP_VALUE_NAME(+)
  AND XLV.LOOKUP_TYPE_NAME(+) = 'MILESTONE_INSTALLMENT'
  AND XBM.MILESTONE_TYPE      = 'MS'
  ORDER BY XBM.DUE_DATE ASC
  ) INSTALL_PAY
FROM XXSTG_ORGANIZATIONS XO,
  XXPM_BOOKING_CUSTOMER XBC,
  XXPM_BOOKING_HEADER XBH,
  XXPM_BOOKING_DETAIL XBD,
  XXPM_PROPERTY_BUILDINGS XPB,
  XXPM_PROPERTY_MASTER XPM,
  XXPM_PROPERTY_UNITS XPU,
  XXPM_PROPERTY_AREA XPA,
  XXSTG_CUSTOMER XC,
  XXSTG_CUST_SITES XCS,
  XXSTG_CUST_CONTACTS XCC,
  XXSTG_PROJECTS XP,
  XXPM_PROPERTY_ESCROW XPE,
  XXSTG_BANK_ACCOUNTS XBA,
  XXFND_LOOKUP_V XLV
WHERE 1                     =1
AND XBC.BOOKING_HDR_ID      = XBH.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID      = XBD.BOOKING_HDR_ID
AND XBD.BUILDING_ID         = XPB.BUILD_ID
AND XBD.UNIT_ID             = XPU.UNIT_ID
AND XPU.UNIT_ID             = XPA.UNIT_ID
AND XBH.PROPERTY_ID         = XPM.PROPERTY_ID(+)
AND XPM.PROJECT_ID          = XP.PROJ_ID(+)
AND XC.CUST_ID              = XCS.CUST_ID
AND XCS.CUST_ID             = XCC.CUST_ID(+)
AND XCS.CUST_SITE_ID        = XCC.CUST_SITE_ID(+)
AND XLV.LOOKUP_VALUE_NAME   = XCS.COUNTRY(+)
AND XBC.CUST_ID             = XC.CUST_ID (+)
AND XLV.LOOKUP_TYPE_NAME(+) = 'COUNTRY'
AND XPB.BUILD_ID            = XPE.BUILD_ID(+)
AND XPE.BANK_ACNT_ID        = XBA.BANK_ACNT_ID(+)
AND XBH.ORG_ID              = XO.ORG_ID
AND XCS.ORG_ID              = XO.ORG_ID
AND XBH.BOOKING_NUMBER      = NVL(P_BLOCK_NUM, XBH.BOOKING_NUMBER)
AND XBC.PRIMARY_YN          = 'Y';
l_handle := dbms_xmlgen.Newcontext (l_query_ref);
dbms_xmlgen.Setrowsettag (l_handle, 'PC');
dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD');
dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag);
l_data_xml := dbms_xmlgen.Getxml (l_handle);
RETURN ( l_data_xml );
EXCEPTION
WHEN OTHERS THEN
  RETURN ( NULL );
END XXPRISM_ARABIC_SPA_REPORT;

   FUNCTION XXPRISM_ALL_INVENTORY_STATUS(P_PROP_NAME IN VARCHAR2,P_BUILD_NAME IN VARCHAR2) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROP_NAME); 
	  dbms_output.Put_line(P_BUILD_NAME);

      OPEN l_query_ref FOR 

                    SELECT 

                   XPM.PROPERTY_NAME,
                   XPB.BUILD_NAME,
                   XPU.UNIT_NAME,
                   XPU.UNIT_SHORTCODE,
                   XPU.VIEW_TYPE,
                   XPU.FLOOR_NUMBER,
                   (SELECT LOOKUP_VALUE_NAME_DISP FROM XXFND_LOOKUP_V where LOOKUP_TYPE_NAME like '%UNIT_CATEGORY%'  AND LOOKUP_VALUE_NAME = XPU.UNIT_CATEGORY)UNIT_CATEGORY,
                   XPU.UNIT_TYPE,
                   XPU.NO_OF_ROOMS,
                   XPA.VALUE,
                   (SELECT LOOKUP_VALUE_NAME_DISP FROM XXFND_LOOKUP_V where LOOKUP_TYPE_NAME like '%UNIT_STATUS%'  AND LOOKUP_VALUE_NAME = XPU.STATUS)STATUS


                   FROM

                   XXPM_PROPERTY_MASTER XPM,
                   XXPM_PROPERTY_BUILDINGS XPB,
                   XXPM_PROPERTY_UNITS XPU,
                   XXPM_PROPERTY_AREA XPA

                   WHERE  
                    XPM.PROPERTY_ID = XPB.PROPERTY_ID 
                   AND XPB.BUILD_ID = XPU.BUILD_ID
                   AND XPU.UNIT_ID  = XPA.UNIT_ID  
                   AND XPM.PROPERTY_ID = NVL(P_PROP_NAME,XPM.PROPERTY_ID)
                   AND XPB.BUILD_ID = NVL(P_BUILD_NAME,XPB.BUILD_ID); 

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_ALL_INVENTORY_STATUS; 


  FUNCTION XXPRISM_TRADE_RECEIVABLES(P_PROJ_NAME IN VARCHAR2,
   P_CUST_NUMB IN VARCHAR2,
   P_UNIT_NUMBER IN VARCHAR2,
   P_DATE IN STRING
   ) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROJ_NAME); 
	  dbms_output.Put_line(P_CUST_NUMB);
	  dbms_output.Put_line(P_UNIT_NUMBER);
	  dbms_output.Put_line(P_DATE);

      OPEN l_query_ref FOR 


	  SELECT XP.PROJECT_NAME,
  XBH.BOOKING_NUMBER,
  XLV.LOOKUP_VALUE_NAME_DISP COMPANY_NAME,
  XLV.LOOKUP_ADDL_VALUE COMPANY_NUMB,
  XPU.UNIT_NAME,
  XPU.UNIT_NUMBER,
  XC.CUSTOMER_NUMBER,
  XC.CUSTOMER_NAME,
  XPU.UNIT_TYPE,
  XPMO.ATTRIBUTE1 FIN_BY,
  XPMO.MORT_AMOUNT FIN_AMOUNT,
  SUM(NVL(MIL.INSTALLMENT_AMOUNT,0)) PRICE,
  SUM(NVL(BILLED.INV_AMOUNT,0)) BILLED_PRICE,
  CASE
    WHEN SUM(NVL(BILLED.INV_AMOUNT,0)) = 0
    THEN 0
    ELSE ((SUM(NVL(BILLED.INV_AMOUNT,0))) / (SUM(NVL(MIL.INSTALLMENT_AMOUNT,0))) * 100)
  END BILLED_PERC,
  SUM(NVL(COLLECTED.RECEIVED_AMOUNT,0)) COLLECTED_PRICE,
  CASE
    WHEN SUM(NVL(COLLECTED.RECEIVED_AMOUNT,0)) = 0
    THEN 0
    ELSE ((SUM(NVL(COLLECTED.RECEIVED_AMOUNT,0))) / (SUM(NVL(MIL.INSTALLMENT_AMOUNT,0))) * 100)
  END COLLECTED_PERC,
  SUM(NVL(BILLED.INV_AMOUNT,0)) - SUM(NVL(COLLECTED.RECEIVED_AMOUNT,0)) OUTSTANDING_AMT
FROM XXPM_BOOKING_HEADER XBH,
  XXPM_BOOKING_MILESTONES XBM,
  XXPM_BOOKING_DETAIL XBD,
  XXPM_BOOKING_CUSTOMER XBC,
  XXPM_PROPERTY_MASTER XPM,
  XXPM_PROPERTY_UNITS XPU,
  XXPM_PROPERTY_AREA XPA,
  XXPM_PROPERTY_MORTGAGE XPMO,
  XXSTG_PROJECTS XP,
  XXPM_MILESTONE_DTL XMD,
  XXSTG_CUSTOMER XC,
  XXFND_LOOKUP_VALUES XLV,
  (SELECT BOOKING_HDR_ID,
    BOOKING_MS_DTL_ID,
    INSTALLMENT_AMOUNT
  FROM XXPM_BOOKING_MILESTONES
  WHERE MILESTONE_TYPE IN ('Charge', 'MS', 'Fix')
  ) MIL,
  (SELECT XBM1.BOOKING_HDR_ID ,
    XBM1.BOOKING_MS_DTL_ID ,
    NVL(XBM1.INSTALLMENT_AMOUNT,0) INSTALLMENT_AMOUNT,
    (NVL(XIL.AMOUNT,0) + NVL(XIL.TAX_AMOUNT,0)) INV_AMOUNT
  FROM XXPM_BOOKING_MILESTONES XBM1 ,
    XXPM_INVOICE_HEADER XIH1 ,
    XXPM_INVOICE_LINES XIL
  WHERE 1               = 1
  AND XBM1.INVOICE_ID   = XIH1.INVOICE_ID
  AND XIH1.INVOICE_ID   = XIL.INVOICE_ID(+)
  AND XBM1.INVOICE_ID  IS NOT NULL
  AND XIH1.INVOICE_DATE <= P_DATE
  ) BILLED,
  (SELECT XBM2.BOOKING_HDR_ID ,
    XBM2.BOOKING_MS_DTL_ID ,
    NVL(XBM2.INSTALLMENT_AMOUNT,0) INSTALLMENT_AMOUNT,
    XPR.RECEIVED_AMOUNT
  FROM XXPM_BOOKING_MILESTONES XBM2 ,
    XXPM_INVOICE_HEADER XIH2 ,
    XXPM_RECEIPT_DETAILS XRD,
    XXPM_RECEIPT XPR
  WHERE 1               = 1
  AND XBM2.INVOICE_ID   = XIH2.INVOICE_ID
  AND XIH2.INVOICE_ID   = XRD.INVOICE_ID(+)
  AND XRD.RECEIPT_ID    = XPR.RECEIPT_ID(+)
  AND XBM2.INVOICE_ID  IS NOT NULL
  AND XPR.RECEIPT_DATE <= P_DATE
  ) COLLECTED
WHERE XBH.BOOKING_HDR_ID  = XBM.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID
AND XBD.UNIT_ID           = XPU.UNIT_ID
AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID
AND XPU.UNIT_ID           = XPA.UNIT_ID
AND XBH.BOOKING_HDR_ID    = XPMO.BOOKING_HDR_ID(+)
AND XPM.PROJECT_ID        = XP.PROJ_ID
AND XPM.ORG_ID            = XP.ORG_ID
AND XBC.CUST_ID           = XC.CUST_ID
AND XBM.MS_DTL_ID         = XMD.MS_DTL_ID(+)
AND XBM.BOOKING_MS_DTL_ID = MIL.BOOKING_MS_DTL_ID (+)
AND XBH.BOOKING_HDR_ID    = MIL.BOOKING_HDR_ID (+)
AND XBM.BOOKING_MS_DTL_ID = BILLED.BOOKING_MS_DTL_ID (+)
AND XBH.BOOKING_HDR_ID    = BILLED.BOOKING_HDR_ID (+)
AND XBM.BOOKING_MS_DTL_ID = COLLECTED.BOOKING_MS_DTL_ID (+)
AND XBH.BOOKING_HDR_ID    = COLLECTED.BOOKING_HDR_ID (+)
AND XP.PROJECT_NAME       = XLV.LOOKUP_VALUE_NAME(+)
AND XBH.USAGE             = 'S'
AND XBH.STATUS            = 'APR'
AND XBC.PRIMARY_YN        = 'Y'
AND XPM.PROJECT_ID        = NVL(P_PROJ_NAME , XPM.PROJECT_ID)
AND XBC.CUST_ID           = NVL(P_CUST_NUMB , XBC.CUST_ID)
AND XBD.UNIT_ID           = NVL(P_UNIT_NUMBER , XBD.UNIT_ID)
AND XBH.BOOKING_DATE     <= P_DATE
GROUP BY XP.PROJECT_NAME,
  XBH.BOOKING_NUMBER,
  XLV.LOOKUP_VALUE_NAME_DISP,
  XLV.LOOKUP_ADDL_VALUE,
  XPU.UNIT_NAME,
  XPU.UNIT_NUMBER,
  XC.CUSTOMER_NUMBER,
  XC.CUSTOMER_NAME,
  XPU.UNIT_TYPE,
  XPMO.ATTRIBUTE1,
  XPMO.MORT_AMOUNT;


   l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 

  end XXPRISM_TRADE_RECEIVABLES; 
  
  
  FUNCTION XXPRISM_TAX_INVOICE
  (p_bu_name IN VARCHAR2,
   p_inv_num IN VARCHAR2,
   p_booking_num IN VARCHAR2
   ) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
    dbms_output.Put_line(p_bu_name); 
	  dbms_output.Put_line(p_inv_num);
	  dbms_output.Put_line(p_booking_num);

      OPEN l_query_ref FOR 


	  SELECT xbh.booking_hdr_id,
  xo.org_id,
  xc.cust_id,
  xbh.booking_number,
  xpu.unit_name unit,
  xih.invoice_id,
  xih.invoice_number,
  TO_CHAR(xih.invoice_date,'DD-MON-YYYY','NLS_DATE_LANGUAGE = AMERICAN') invoice_date,
--  xih.invoice_date,
  xo.org_name,
  xc.customer_name,
  xcs.address1
  ||', '
  ||xcs.address2
  ||', '
  ||xcs.address3
  ||', '
  ||xcs.city cust_address,
  xlv.lookup_value_name_disp project_name,
  xlv.lookup_value_name_disp_tl company_trn,
  xlv.lookup_addl_value company_address,
  initcap(xbd.tax_code) tax_code,
  xpt.term_name,
  xba.bank_account_name,
  xba.bank_name,
  xba.swift_code,
  xba.bank_number,
  xba.iban,
  CURSOR
  (SELECT xil.description,
    --    xil.tax_code,
    (xil.quantity) quantity,
    SUM(NVL(xil.amount,0)) price_excl_vat ,
    SUM(NVL(xil.tax_amount,0)) tax_amount,
    NVL(SUM(xil.tax_perc),0) tax_perc,
    SUM(NVL(xil.amount,0)) + SUM(NVL(xil.tax_amount,0)) price_incl_vat
  FROM xxpm_invoice_lines xil
  WHERE 1            = 1
  AND xih.invoice_id = xil.invoice_id(+)
  GROUP BY xil.description,
    --    xil.tax_code,
    xil.quantity
  ) line
FROM xxpm_booking_header xbh,
  xxpm_booking_milestones xbm,
  xxpm_booking_detail xbd,
  xxpm_property_units xpu,
  xxpm_invoice_header xih,
  xxstg_organizations xo,
  xxstg_customer xc,
  xxstg_cust_sites xcs,
  xxstg_pay_terms xpt,
  xxfnd_lookup_types xlt,
  xxfnd_lookup_values xlv,
  xxpm_property_escrow xpe,
  xxstg_bank_accounts xba
WHERE 1                      = 1
AND xbh.booking_hdr_id       = xbm.booking_hdr_id(+)
AND xbh.booking_hdr_id       = xbd.booking_hdr_id(+)
AND xbd.unit_id              = xpu.unit_id(+)
AND xbh.booking_hdr_id       = xih.booking_id(+)
AND xbm.invoice_id           = xih.invoice_id(+)
AND xih.org_id               = xo.org_id(+)
AND xih.cust_id              = xc.cust_id
AND xc.cust_id               = xcs.cust_id
AND xo.org_id                = xcs.org_id
AND xih.payment_terms        = xpt.term_id(+)
AND SUBSTR(xo.org_name,1,23) = SUBSTR(xlv.lookup_value_name,1,23)
AND xlt.lookup_type_id       = xlv.lookup_type_id
AND xpu.property_id          = xpe.property_id(+)
AND xpe.bank_acnt_id         = xba.bank_acnt_id(+)
AND xbh.usage                = 'S'
--AND xbh.status               = 'APR'
AND xlt.lookup_type_name     = 'COMPANY_DETAILS'
AND xo.org_id                = NVL(p_bu_name, xo.org_id)
AND xih.invoice_number       = NVL(p_inv_num, xih.invoice_number) 
AND xbh.booking_hdr_id       = NVL(p_booking_num, xbh.booking_hdr_id)
  --AND xbh.booking_number = 'BK-2671'
ORDER BY xih.invoice_id;


   l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 

  end XXPRISM_TAX_INVOICE; 
  
  
  
  FUNCTION XXPRISM_CUSTOMER_STATEMENT
  (p_cust_id IN VARCHAR2,
--   p_unit_id IN VARCHAR2,
   P_DATE IN DATE
   )
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(p_cust_id); 
--      dbms_output.Put_line(p_unit_id); 
      dbms_output.Put_line(P_DATE); 

      OPEN l_query_ref FOR 
     
     
     SELECT DISTINCT xc.customer_name,
  xcs.address1
  ||' ,'
  ||xcs.address2
  ||' ,'
  ||xcs.address3 customer_address,
  xcs.city,
  xcs.postal_code,
  xcs.state,
  xcs.country,
  xcc.phone_number,
  xcc.email_id,
  CURSOR
  (SELECT xp.project_name,
    xpb.build_name,
    xbh.booking_number,
    xpu.unit_name unit_no,
    xpa.value unit_area,
    xbd.booking_rate sqft_price
  FROM xxpm_booking_header xbh,
    xxpm_booking_detail xbd,
    xxpm_booking_customer xbc,
    xxpm_property_master xpm,
    xxpm_property_buildings xpb,
    xxpm_property_units xpu,
    xxpm_property_area xpa,
    xxstg_projects xp
  WHERE 1                = 1
  AND xbh.booking_hdr_id = xbd.booking_hdr_id
  AND xbh.booking_hdr_id = xbc.booking_hdr_id
  AND xbd.unit_id        = xpu.unit_id
  AND xbh.property_id    = xpm.property_id
  AND xpm.property_id    = xpb.property_id
  AND xpb.build_id       = xpu.build_id
  AND xpu.unit_id        = xpa.unit_id
  AND xpm.project_id     = xp.proj_id
  AND xpm.org_id         = xp.org_id
  AND xbc.cust_id        = xc.cust_id
  AND xpa.area(+)        = 'CHARGE'
  AND xbh.booking_date  <= p_date
  AND XBH.STATUS            = 'APR'
  ORDER BY xp.project_name,
    xpb.build_name,
    xbh.booking_number,
    xpu.unit_name
  ) prop_dtl,
  CURSOR
  (SELECT xpu.unit_name unit_no,
    CURSOR
    (SELECT xpr.receipt_id,
      xpr.receipt_number,
      xih.invoice_number,
      xpr.receipt_date,
      SUM(NVL(xrd.amount_applied,0)) received_amt_rct,
      xpr.MODE_OF_RECEIPT MODE_OF_PAY
    FROM xxpm_invoice_header xih,
      xxpm_receipt_details xrd,
      xxpm_receipt xpr
    WHERE 1                      = 1
    AND xbh.booking_hdr_id       = xih.booking_id
    AND xih.invoice_id           = xrd.invoice_id(+)
    AND xrd.receipt_id           = xpr.receipt_id(+)
    AND TRUNC(xrd.applied_date) <= p_date
    GROUP BY xpr.receipt_id,
      xpr.receipt_number,
      xih.invoice_number,
      xpr.receipt_date,
      xpr.MODE_OF_RECEIPT
    ORDER BY xpr.receipt_number,
      xih.invoice_number
    )rct_line_dtl
  FROM xxpm_booking_header xbh,
    xxpm_booking_detail xbd,
    xxpm_booking_customer xbc,
    xxpm_property_units xpu
  WHERE 1                = 1
  AND xbh.booking_hdr_id = xbd.booking_hdr_id
  AND xbh.booking_hdr_id = xbc.booking_hdr_id
  AND xbd.unit_id        = xpu.unit_id
  AND xbc.cust_id        = xc.cust_id
  AND XBH.STATUS            = 'APR'
  ORDER BY xpu.unit_name
  )rct_dtl,
  CURSOR
  (WITH booking_dtl AS
  (SELECT xbm.ms_dtl_id,
    xbh.booking_hdr_id,
    xbm.BOOKING_MS_DTL_ID,
    xbh.booking_number,
    xpm.property_id,
    xpm.property_name,
    xpu.unit_name unit_no,
    xbd.booking_rate unit_cost,
    xpa.value unit_area,
    xpa.uom uom,
    xbd.booking_rate sqft_price,
    CASE
      WHEN xmd.installment_event IS NOT NULL
      THEN
        CASE
          WHEN xlv1.lookup_value_name_disp IS NOT NULL
          THEN xlv.lookup_value_name_disp
            ||'-'
            ||xlv1.lookup_value_name_disp
          ELSE xlv.lookup_value_name_disp
            ||'-'
            ||xmd.installment_event
        END
      ELSE
        CASE
          WHEN xlv1.lookup_value_name_disp IS NOT NULL
          THEN xlv.lookup_value_name_disp
          ELSE xlv.lookup_value_name_disp
        END
    END event_name,
    xbm.installment_pct inst_pct_avg,
    NVL(xbm.installment_amount,0) inst_amt ,
    xpu.status property_status,
    xbh.created_by,
    xbm.period_duration,
    xbm.due_date,
    xbm.installment_type,
    xbm.invoice_id,
    xbc.cust_id,
    xpu.unit_id,
    xlv.display_order
  FROM xxpm_booking_header xbh,
    xxpm_booking_milestones xbm,
    xxpm_booking_detail xbd,
    xxpm_booking_customer xbc,
    xxpm_property_master xpm,
    xxpm_property_units xpu,
    xxpm_property_area xpa,
    xxpm_milestone_dtl xmd,
    xxfnd_lookup_types xlt,
    xxfnd_lookup_types xlt1,
    xxfnd_lookup_values xlv,
    xxfnd_lookup_values xlv1
  WHERE xbh.booking_hdr_id  = xbm.booking_hdr_id(+)
  AND xbh.booking_hdr_id    = xbd.booking_hdr_id(+)
  AND xbh.booking_hdr_id    = xbc.booking_hdr_id(+)
  AND xbd.unit_id           = xpu.unit_id(+)
  AND xbh.property_id       = xpm.property_id(+)
  AND xpu.unit_id           = xpa.unit_id(+)
  AND xbm.ms_dtl_id         = xmd.ms_dtl_id(+)
  AND xbm.installment_type  = xlv.lookup_value_name(+)
  AND xbm.installment_event = xlv1.lookup_value_name(+)
  AND xlt.lookup_type_id    = xlv.lookup_type_id(+)
  AND xlt1.lookup_type_id   = xlv1.lookup_type_id(+)
  AND xlt.lookup_type_name  = 'MILESTONE_INSTALLMENT'
  AND xlt1.lookup_type_name = 'BOOKING_EVENT'
  AND xbh.usage             = 'S'
  AND xpa.area(+)           = 'CHARGE'
  AND xbm.milestone_type    = 'MS'
  AND XBH.STATUS            = 'APR'
  AND xbh.booking_date     <= p_date
  ),
  booking_dtl_1 AS
  (SELECT xbm.ms_dtl_id,
    xbh.booking_hdr_id,
    xbm.BOOKING_MS_DTL_ID,
    xbh.booking_number,
    xpm.property_id,
    xpm.property_name,
    xpu.unit_name unit_no,
    xbd.booking_rate unit_cost,
    xpa.value unit_area,
    xpa.uom uom,
    xbd.booking_rate sqft_price,
    xbm.installment_pct inst_pct_avg,
    NVL(xbm.installment_amount,0) inst_amt ,
    xpu.status property_status,
    xbh.created_by,
    xbm.period_duration,
    xbm.due_date,
    xbm.installment_type,
    xbm.invoice_id,
    xbc.cust_id,
    xpu.unit_id
  FROM xxpm_booking_header xbh,
    xxpm_booking_milestones xbm,
    xxpm_booking_detail xbd,
    xxpm_booking_customer xbc,
    xxpm_property_master xpm,
    xxpm_property_units xpu,
    xxpm_property_area xpa
  WHERE xbh.booking_hdr_id = xbm.booking_hdr_id(+)
  AND xbh.booking_hdr_id   = xbd.booking_hdr_id(+)
  AND xbh.booking_hdr_id   = xbc.booking_hdr_id(+)
  AND xbd.unit_id          = xpu.unit_id(+)
  AND xbh.property_id      = xpm.property_id(+)
  AND xpu.unit_id          = xpa.unit_id(+)
  AND xbh.usage            = 'S'
  AND xpa.area(+)          = 'CHARGE'
  AND xbm.milestone_type  != 'MS'
  AND XBH.STATUS            = 'APR'
  AND xbh.booking_date    <= p_date
  ),
  inv_dtl AS
  (SELECT xih.booking_id,
    xih.invoice_id,
    xil.installment_type,
    xih.due_date,
    xih.interface_status status,
    xih.invoice_date,
    xih.invoice_number
  FROM xxpm_invoice_header xih,
    xxpm_invoice_lines xil
  WHERE xih.invoice_id   = xil.invoice_id(+)
  AND (xih.invoice_date <= p_date
  OR xih.invoice_date   IS NULL)
  ),
  rct_dtl AS
  (SELECT xrd.invoice_id,
    xrd.receipt_id ,
    CASE
      WHEN PAY_MODE NOT IN ('300000002556165','300000002556160')
      THEN SUM(NVL(xrd.amount_applied,0))
      ELSE 0
    END received_amt,
    xpr.receipt_date,
    CASE
      WHEN xpr.PAY_MODE IN ('300000002556165')
      THEN SUM(NVL(xrd.amount_applied,0))
      ELSE 0
    END ADJ_REC,
    CASE
      WHEN xpr.PAY_MODE IN ('300000002556160')
      THEN SUM(NVL(xrd.amount_applied,0))
      ELSE 0
    END DIS_REC
  FROM xxpm_receipt_details xrd,
    xxpm_receipt xpr
  WHERE xrd.receipt_id          = xpr.receipt_id(+)
  AND (TRUNC(xrd.applied_date) <= p_date
  OR TRUNC(xrd.applied_date)   IS NULL)
  GROUP BY xrd.invoice_id,
    xrd.receipt_id,
    xpr.receipt_date,
    xpr.PAY_MODE
  )
SELECT bkd.property_id ,
  bkd.BOOKING_MS_DTL_ID,
  bkd.unit_id,
  bkd.unit_no,
  bkd.display_order,
  bkd.unit_cost,
  bkd.unit_area,
  bkd.uom,
  bkd.event_name,
  CASE
    WHEN inv.status IS NULL
    THEN 'Not Invoiced'
    ELSE initcap(inv.status)
  END status,
  bkd.inst_pct_avg,
  NVL(inv.due_date , bkd.due_date) pay_due_date,
  NVL(bkd.inst_amt,0) inst_amt,
  CASE
    WHEN inv.status IS NULL
    THEN 0
    ELSE NVL(bkd.inst_amt,0)
  END inv_amt,
  SUM(NVL(rct.received_amt,0)) received_amt,
  SUM(NVL(rct.ADJ_REC,0)) ADJ_REC,
  SUM(NVL(rct.DIS_REC,0)) DIS_REC,
  CASE
    WHEN inv.status IS NULL
    THEN 0
    ELSE NVL(bkd.inst_amt,0)
  END                 - SUM(NVL(rct.received_amt,0))- SUM(NVL(rct.ADJ_REC,0)) - SUM(NVL(rct.DIS_REC,0))outstanding_amt,
  NVL(bkd.inst_amt,0) - SUM(NVL(rct.received_amt,0))- SUM(NVL(rct.ADJ_REC,0)) - SUM(NVL(rct.DIS_REC,0)) BALANCE,
  bkd.cust_id,
  inv.invoice_number,
  'SPA' milestone_type
FROM booking_dtl bkd ,
  inv_dtl inv,
  rct_dtl rct
WHERE 1                  = 1
AND bkd.booking_hdr_id   = inv.booking_id(+)
AND bkd.invoice_id       = inv.invoice_id(+)
AND bkd.installment_type = inv.installment_type(+)
AND inv.invoice_id       = rct.invoice_id(+)
AND xc.cust_id           = bkd.cust_id
  --AND bkd.unit_id          = NVL(p_unit_id , bkd.unit_id)
GROUP BY bkd.property_id ,
  bkd.BOOKING_MS_DTL_ID,
  bkd.unit_id,
  bkd.unit_no,
  bkd.display_order,
  bkd.unit_cost,
  bkd.unit_area,
  bkd.uom,
  bkd.event_name,
  inv.status,
  bkd.inst_pct_avg,
  inv.due_date ,
  bkd.due_date ,
  bkd.inst_amt,
  bkd.period_duration,
  bkd.cust_id,
  inv.invoice_number
UNION ALL
SELECT DISTINCT bkd1.property_id ,
  bkd1.BOOKING_MS_DTL_ID,
  bkd1.unit_id,
  bkd1.unit_no,
  NULL display_order,
  bkd1.unit_cost,
  bkd1.unit_area,
  bkd1.uom,
  'Credit Memo' event_name,
  inv.status status,
  bkd1.inst_pct_avg,
  NVL(inv.due_date , bkd1.due_date) pay_due_date,
  NVL(bkd1.inst_amt,0) * -1 inst_amt,
  NVL(bkd1.inst_amt,0) * -1 inv_amt,
  0 received_amt,
  0 ADJ_REC,
  0 DIS_REC,
  NVL(bkd1.inst_amt,0) * -1 outstanding_amt,
  NVL(bkd1.inst_amt,0) * -1 BALANCE,
  bkd1.cust_id,
  inv.invoice_number,
  'Other' milestone_type
FROM booking_dtl_1 bkd1 ,
  inv_dtl inv
WHERE 1                 = 1
AND bkd1.booking_hdr_id = inv.booking_id(+)
AND bkd1.invoice_id     = inv.invoice_id
AND xc.cust_id          = bkd1.cust_id
  --AND bkd1.unit_id        = NVL(p_unit_id , bkd1.unit_id)
ORDER BY 4,
  5
  ) soa,
  CURSOR
  (SELECT unit_no,
    SUM(inst_amt) inst_amt_s,
    SUM(inv_amt) inv_amt_s,
    SUM(received_amt) received_amt_s,
    SUM(adj_rec) adj_rec_s,
    SUM(dis_rec) dis_rec_s,
    SUM(outstanding_amt) outstanding_amt_s,
    SUM(balance) balance_s,
    (SUM(inv_amt) / SUM(inst_amt)) * 100 inv_perc
  FROM
    (WITH booking_dtl AS
    (SELECT xbm.ms_dtl_id,
      xbh.booking_hdr_id,
      xbm.booking_ms_dtl_id,
      xbh.booking_number,
      xpm.property_id,
      xpm.property_name,
      xpu.unit_name unit_no,
      xbd.booking_rate unit_cost,
      xpa.value unit_area,
      xpa.uom uom,
      xbd.booking_rate sqft_price,
      xbm.installment_pct inst_pct_avg,
      NVL(xbm.installment_amount,0) inst_amt ,
      xpu.status property_status,
      xbh.created_by,
      xbm.period_duration,
      xbm.due_date,
      xbm.installment_type,
      xbm.invoice_id,
      xbc.cust_id,
      xpu.unit_id
    FROM xxpm_booking_header xbh,
      xxpm_booking_milestones xbm,
      xxpm_booking_detail xbd,
      xxpm_booking_customer xbc,
      xxpm_property_master xpm,
      xxpm_property_units xpu,
      xxpm_property_area xpa
    WHERE xbh.booking_hdr_id = xbm.booking_hdr_id(+)
    AND xbh.booking_hdr_id   = xbd.booking_hdr_id(+)
    AND xbh.booking_hdr_id   = xbc.booking_hdr_id(+)
    AND xbd.unit_id          = xpu.unit_id(+)
    AND xbh.property_id      = xpm.property_id(+)
    AND xpu.unit_id          = xpa.unit_id(+)
    AND xbh.usage            = 'S'
    AND xpa.area(+)          = 'CHARGE'
    AND xbm.milestone_type   = 'MS'
    AND XBH.STATUS            = 'APR'
    AND xbh.booking_date    <= p_date
    ),
    booking_dtl_1 AS
    (SELECT xbm.ms_dtl_id,
      xbh.booking_hdr_id,
      xbm.booking_ms_dtl_id,
      xbh.booking_number,
      xpm.property_id,
      xpm.property_name,
      xpu.unit_name unit_no,
      xbd.booking_rate unit_cost,
      xpa.value unit_area,
      xpa.uom uom,
      xbd.booking_rate sqft_price,
      xbm.installment_pct inst_pct_avg,
      NVL(xbm.installment_amount,0) inst_amt ,
      xpu.status property_status,
      xbh.created_by,
      xbm.period_duration,
      xbm.due_date,
      xbm.installment_type,
      xbm.invoice_id,
      xbc.cust_id,
      xpu.unit_id
    FROM xxpm_booking_header xbh,
      xxpm_booking_milestones xbm,
      xxpm_booking_detail xbd,
      xxpm_booking_customer xbc,
      xxpm_property_master xpm,
      xxpm_property_units xpu,
      xxpm_property_area xpa
    WHERE xbh.booking_hdr_id = xbm.booking_hdr_id(+)
    AND xbh.booking_hdr_id   = xbd.booking_hdr_id(+)
    AND xbh.booking_hdr_id   = xbc.booking_hdr_id(+)
    AND xbd.unit_id          = xpu.unit_id(+)
    AND xbh.property_id      = xpm.property_id(+)
    AND xpu.unit_id          = xpa.unit_id(+)
    AND xbh.usage            = 'S'
    AND xpa.area(+)          = 'CHARGE'
    AND xbm.milestone_type  != 'MS'
    AND XBH.STATUS            = 'APR'
    AND xbh.booking_date    <= p_date
    ),
    inv_dtl AS
    (SELECT xih.booking_id,
      xih.invoice_id,
      xil.installment_type,
      xih.due_date,
      xih.interface_status status,
      xih.invoice_date,
      xih.invoice_number
    FROM xxpm_invoice_header xih,
      xxpm_invoice_lines xil
    WHERE xih.invoice_id   = xil.invoice_id(+)
    AND (xih.invoice_date <= p_date
    OR xih.invoice_date   IS NULL)
    ),
    rct_dtl AS
    (SELECT xrd.invoice_id,
      xrd.receipt_id ,
      CASE
        WHEN pay_mode NOT IN ('300000002556165','300000002556160')
        THEN SUM(NVL(xrd.amount_applied,0))
        ELSE 0
      END received_amt,
      xpr.receipt_date,
      CASE
        WHEN xpr.pay_mode IN ('300000002556165')
        THEN SUM(NVL(xrd.amount_applied,0))
        ELSE 0
      END adj_rec,
      CASE
        WHEN xpr.pay_mode IN ('300000002556160')
        THEN SUM(NVL(xrd.amount_applied,0))
        ELSE 0
      END dis_rec
    FROM xxpm_receipt_details xrd,
      xxpm_receipt xpr
    WHERE xrd.receipt_id          = xpr.receipt_id(+)
    AND (TRUNC(xrd.applied_date) <= p_date
    OR TRUNC(xrd.applied_date)   IS NULL)
    GROUP BY xrd.invoice_id,
      xrd.receipt_id,
      xpr.receipt_date,
      xpr.pay_mode
    )
  SELECT bkd.property_id ,
    bkd.booking_ms_dtl_id,
    bkd.unit_id,
    bkd.unit_no,
    bkd.unit_cost,
    bkd.unit_area,
    bkd.uom,
    CASE
      WHEN inv.status IS NULL
      THEN 'Not Invoiced'
      ELSE initcap(inv.status)
    END status,
    bkd.inst_pct_avg,
    NVL(inv.due_date , bkd.due_date) pay_due_date,
    NVL(bkd.inst_amt,0) inst_amt,
    CASE
      WHEN inv.status IS NULL
      THEN 0
      ELSE NVL(bkd.inst_amt,0)
    END inv_amt,
    SUM(NVL(rct.received_amt,0)) received_amt,
    SUM(NVL(rct.adj_rec,0)) adj_rec,
    SUM(NVL(rct.dis_rec,0)) dis_rec,
    CASE
      WHEN inv.status IS NULL
      THEN 0
      ELSE NVL(bkd.inst_amt,0)
    END                 - SUM(NVL(rct.received_amt,0))- SUM(NVL(rct.adj_rec,0)) - SUM(NVL(rct.dis_rec,0))outstanding_amt,
    NVL(bkd.inst_amt,0) - SUM(NVL(rct.received_amt,0))- SUM(NVL(rct.adj_rec,0)) - SUM(NVL(rct.dis_rec,0)) balance,
    bkd.cust_id,
    inv.invoice_number,
    'SPA' milestone_type
  FROM booking_dtl bkd ,
    inv_dtl inv,
    rct_dtl rct
  WHERE 1                  = 1
  AND bkd.booking_hdr_id   = inv.booking_id(+)
  AND bkd.invoice_id       = inv.invoice_id(+)
  AND bkd.installment_type = inv.installment_type(+)
  AND inv.invoice_id       = rct.invoice_id(+)
  AND xc.cust_id           = bkd.cust_id
    --AND bkd.unit_id          = NVL(p_unit_id , bkd.unit_id)
  GROUP BY bkd.property_id ,
    bkd.booking_ms_dtl_id,
    bkd.unit_id,
    bkd.unit_no,
    bkd.unit_cost,
    bkd.unit_area,
    bkd.uom,
    inv.status,
    bkd.inst_pct_avg,
    inv.due_date ,
    bkd.due_date ,
    bkd.inst_amt,
    bkd.period_duration,
    bkd.cust_id,
    inv.invoice_number
  UNION ALL
  SELECT DISTINCT bkd1.property_id ,
    bkd1.booking_ms_dtl_id,
    bkd1.unit_id,
    bkd1.unit_no,
    bkd1.unit_cost,
    bkd1.unit_area,
    bkd1.uom,
    inv.status status,
    bkd1.inst_pct_avg,
    NVL(inv.due_date , bkd1.due_date) pay_due_date,
    NVL(bkd1.inst_amt,0) * -1 inst_amt,
    NVL(bkd1.inst_amt,0) * -1 inv_amt,
    0 received_amt,
    0 adj_rec,
    0 dis_rec,
    NVL(bkd1.inst_amt,0) * -1 outstanding_amt,
    NVL(bkd1.inst_amt,0) * -1 balance,
    bkd1.cust_id,
    inv.invoice_number,
    'Other' milestone_type
  FROM booking_dtl_1 bkd1 ,
    inv_dtl inv
  WHERE 1                 = 1
  AND bkd1.booking_hdr_id = inv.booking_id(+)
  AND bkd1.invoice_id     = inv.invoice_id
  AND xc.cust_id          = bkd1.cust_id
    )
  GROUP BY unit_no
  ORDER BY unit_no
  ) summary
FROM xxstg_customer xc,
  xxstg_cust_contacts xcc,
  xxstg_cust_sites xcs
WHERE 1        = 1
AND xc.cust_id = xcc.cust_id(+)
AND xc.cust_id = xcs.cust_id(+)
AND xc.cust_id = p_cust_id
AND rownum     = 1;

  
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_CUSTOMER_STATEMENT; 
  
  
   function XXPRISM_COLLECTION_REPORT( 
    P_PROP_NAME IN VARCHAR2,
    P_DATE IN DATE
    ) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROP_NAME); 
      dbms_output.Put_line(P_DATE); 

      OPEN l_query_ref FOR 
     
     
     SELECT xbh.booking_hdr_id,
  xp.project_name,
  xpb.build_name,
  xpu.unit_name unit_no,
  xbh.booking_number,
  xc.customer_name,
  xpr.receipt_number,
  NULL check_number,
  xpr.receipt_date,
  xpr.mode_of_receipt pay_mode,
  xpr.bank_name,
  xpr.bank_branch_name,
  xpr.bank_account_num,
  xpr.receipt_amount,
  xrd.applied_date,
  xpr.pay_rec_date maturity_date,
  CASE
    WHEN TRUNC(xrd.applied_date) <= p_date
    THEN SUM(NVL(xrd.amount_applied,0))
    ELSE 0
  END received_amt,
  xpr.receipt_amount -
  CASE
    WHEN TRUNC(xrd.applied_date) <= p_date
    THEN SUM(NVL(xrd.amount_applied,0))
    ELSE 0
  END unapplied_amount,
  xpr.interface_status status
FROM xxpm_booking_header xbh,
  xxpm_booking_milestones xbm,
  xxpm_booking_detail xbd,
  xxpm_booking_customer xbc,
  xxpm_property_master xpm,
  xxpm_property_units xpu,
  xxpm_property_area xpa,
  xxpm_property_buildings xpb,
  xxstg_projects xp,
  xxstg_customer xc,
  xxpm_invoice_header xih,
  xxpm_receipt xpr,
  xxpm_receipt_details xrd
WHERE xbh.booking_hdr_id = xbm.booking_hdr_id(+)
AND xbh.booking_hdr_id   = xbd.booking_hdr_id(+)
AND xbh.booking_hdr_id   = xbc.booking_hdr_id(+)
AND xbd.unit_id          = xpu.unit_id(+)
AND xbh.property_id      = xpm.property_id(+)
AND xpu.unit_id          = xpa.unit_id(+)
AND xpm.property_id      = xpb.property_id(+)
AND xpb.build_id         = xpu.build_id
AND xpm.project_id       = xp.proj_id(+)
AND xpm.org_id           = xp.org_id(+)
AND xbc.cust_id          = xc.cust_id(+)
AND xbh.booking_hdr_id   = xih.booking_id(+)
AND xbm.invoice_id       = xih.invoice_id(+)
AND xih.invoice_id       = xrd.invoice_id(+)
AND xbh.booking_hdr_id   = xpr.source_func_ref_id
AND xrd.receipt_id       = xpr.receipt_id
AND xbh.usage            = 'S'
AND xpa.area(+)          = 'CHARGE'
AND xpm.property_id      = NVL(p_prop_name, xpm.property_id)
AND xpr.gl_date    <= p_date
GROUP BY xbh.booking_hdr_id,
  xp.project_name,
  xpb.build_name,
  xpu.unit_name ,
  xbh.booking_number,
  xc.customer_name,
  xpr.receipt_number,
  xpr.receipt_date,
  xpr.mode_of_receipt,
  xpr.bank_name,
  xpr.bank_branch_name,
  xpr.bank_account_num,
  xpr.receipt_amount,
  xrd.applied_date,
  xpr.pay_rec_date ,
  xpr.interface_status
ORDER BY  xpu.unit_name;

  
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_COLLECTION_REPORT; 
  
  
  function XXPRISM_ERROR_STATUS
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      OPEN l_query_ref FOR 
     
     
     SELECT 'Invoice' rep_type,
  xih.invoice_number trx_no,
  xih.invoice_date trx_date,
  xih.booking_number,
  xil.unit_number,
  SUM(xil.line_amount) amount,
  xih.interface_status,
  TO_CHAR(xih.interface_error_msg) error_msg,
  xih.status,
  xo.org_name,
  xo.org_name_tl proj_name,
  xc.customer_number,
  xc.customer_name
FROM xxpm_invoice_header xih,
  xxpm_invoice_lines xil,
  xxstg_organizations xo,
  xxstg_customer xc
WHERE 1                  = 1
AND xih.invoice_id       = xil.invoice_id(+)
AND xih.org_id           = xo.org_id(+)
AND xih.cust_id          = xc.cust_id(+)
AND xih.interface_status = 'Error'
GROUP BY xih.invoice_number,
  xih.invoice_date,
  xih.booking_number,
  xil.unit_number,
  xih.interface_status,
  TO_CHAR(xih.interface_error_msg),
  xih.status,
  xo.org_name,
  xo.org_name_tl,
  xc.customer_number,
  xc.customer_name
UNION ALL
SELECT 'Receipt' rep_type,
  xpr.receipt_number trx_no,
  xpr.receipt_date trx_date,
  NULL booking_number,
  xpu.unit_name unit_number,
  xpr.receipt_amount amount,
  xpr.interface_status,
  TO_CHAR(xpr.interface_error_msg) error_msg,
  xpr.status,
  xo.org_name,
  xo.org_name_tl proj_name,
  xc.customer_number,
  xc.customer_name
FROM xxpm_receipt xpr,
  xxstg_organizations xo,
  xxstg_customer xc,
  xxpm_property_units xpu
WHERE 1                       = 1
AND xpr.org_id                = xo.org_id(+)
AND xpr.cust_id               = xc.cust_id(+)
AND xpr.unit_id               = xpu.unit_id(+)
AND xpr.interface_status NOT IN ('Receipted')
UNION ALL
SELECT 'Receipt_Dtl' rep_type,
  xpr.receipt_number trx_no,
  xpr.receipt_date trx_date,
  NULL booking_number,
  xpu.unit_name unit_number,
  xpr.receipt_amount amount,
  xrd.interface_status,
  TO_CHAR(xrd.interface_error_msg) error_msg,
  NULL status,
  xo.org_name,
  xo.org_name_tl proj_name,
  xc.customer_number,
  xc.customer_name
FROM xxpm_receipt_details xrd,
  xxpm_receipt xpr,
  xxstg_organizations xo,
  xxstg_customer xc,
  xxpm_property_units xpu
WHERE 1                       = 1
AND xrd.receipt_id            = xpr.receipt_id
AND xpr.org_id                = xo.org_id
AND xpr.cust_id               = xc.cust_id
AND xpr.unit_id               = xpu.unit_id
AND xrd.interface_status NOT IN ('Applied');

  
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_ERROR_STATUS; 

END XXPRISM_REPORT_PKG;
/
