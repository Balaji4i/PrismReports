--------------------------------------------------------
--  DDL for Package XXPRISM_REPORT_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "XXPRISM_REPORT_PKG" 
is 

  function XXPRISM_RESERVATION_CONTRACT( 
    p_BLOCK_num IN VARCHAR2) 
  RETURN CLOB; 
  
  FUNCTION XXPRISM_RECEIPT_REPORT( 
        P_RECP_NUM IN VARCHAR2) 
  RETURN CLOB; 
  
  function XXPRISM_AR_DETAIL( 
    P_PROJ_NAME IN VARCHAR2,
    P_PROP_NAME IN VARCHAR2
    ) 
  RETURN CLOB; 
  
    function XXPRISM_AR_SUMMARY( 
    P_PROJ_NAME IN VARCHAR2,
    P_PROP_NAME IN VARCHAR2
    ) 
  RETURN CLOB; 
  
  function XXPRISM_UNIT_STATUS( 
    P_PROJ_NAME IN VARCHAR2,
    P_PROP_NAME IN VARCHAR2
    ) 
  RETURN CLOB; 
  
  FUNCTION XXPRISM_SPA_REPORT(
   P_BLOCK_NUM IN VARCHAR2) 
  RETURN CLOB;
  
  FUNCTION XXPRISM_ARABIC_SPA_REPORT(
   P_BLOCK_NUM IN VARCHAR2) 
  RETURN CLOB;
  
   FUNCTION XXPRISM_ALL_INVENTORY_STATUS
   (P_PROP_NAME IN VARCHAR2,
   P_BUILD_NAME IN VARCHAR2) 
  RETURN CLOB;
  
   FUNCTION XXPRISM_TRADE_RECEIVABLES
   (P_PROJ_NAME IN VARCHAR2,
   P_CUST_NUMB IN VARCHAR2,
   P_UNIT_NUMBER IN VARCHAR2,
   P_DATE IN STRING
   ) 
  RETURN CLOB;
  
END XXPRISM_report_pkg;

--------------------------------------------------------
--  DDL for Package Body XXPRISM_REPORT_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "XXPRISM_REPORT_PKG" 
IS 
  FUNCTION XXPRISM_RESERVATION_CONTRACT(p_BLOCK_num IN VARCHAR2) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(p_BLOCK_num); 

      OPEN l_query_ref FOR 
        
                          SELECT xpm.property_name,
                          xpu.unit_name,
                          xpu.unit_type,
                          xso.org_name bu_name,
                          xl.location_name,
                          xl.address1,
                          xl.address2,
                          xl.city,
                          xl.postal_code,
                          xl.country,
                          xba.bank_account_num,
                          xba.iban,
                          xba.branch_name,
                          xba.swift_code,
                          xc.customer_name,
                          xpu.floor_number,
                          xoh.offer_type,
                          xod.quantity area,
                          xod.offer_amount,
                          XOD.OFFER_HDR_ID,
                          (SELECT COUNT(carpark_id)
                          FROM xxpm_property_carparks xpc
                          WHERE xpc.unit_id = xod.unit_id
                          ) tot_car_park,
                          CURSOR
                          (SELECT INSTALLMENT_TYPE,
                            INSTALLMENT_PCT,
                            INSTALLMENT_AMOUNT,
                            (SELECT LOOKUP_VALUE_NAME_DISP
                            FROM XXFND_LOOKUP_V
                            WHERE LOOKUP_TYPE_NAME LIKE '%BOOKING_EVENT%'
                            AND LOOKUP_VALUE_NAME= XOMD.INSTALLMENT_EVENT
                            ) INSTALLMENT_EVENT
                          FROM XXPM_OFFER_MILESTONE_DETAIL XOMD
                          WHERE XOMD.OFFER_HDR_ID = XOD.OFFER_HDR_ID
                          order by XOMD.MS_DTL_ID
                          ) PAYMENT_PLAN
                          FROM xxpm_block_header xbh,
                          xxpm_block_detail xbd,
                          xxpm_offer_header xoh,
                          xxpm_offer_detail xod,
                          xxpm_property_units xpu,
                          xxpm_property_master xpm,
                          xxstg_organizations xso,
                          xxstg_locations xl,
                          xxpm_property_buildings xpb,
                          xxpm_property_escrow xpe,
                          xxstg_bank_accounts xba,
                          xxstg_customer xc
                          WHERE xbh.block_id   = xbd.block_id (+)
                          AND xbh.offer_hdr_id = xoh.offer_hdr_id (+)
                          AND xoh.offer_hdr_id = xod.offer_hdr_id (+)
                          AND xod.unit_id      = xpu.unit_id (+)
                          AND xod.property_id  = xpm.property_id (+)
                          AND xoh.org_id       = xso.org_id (+)
                          AND xpm.location_id  = xl.loc_id (+)
                          AND xod.building_id  = xpb.build_id (+)
                          AND xod.property_id  = xpe.property_id (+)
                          AND xod.building_id  = xpe.build_id (+)
                          AND xpe.bank_acnt_id = xba.bank_acnt_id (+)
                          AND xbh.cust_id      = xc.cust_id (+)
                          AND XBH.BLOCK_NUMBER = NVL(P_BLOCK_NUM, XBH.BLOCK_NUMBER); 

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_RESERVATION_CONTRACT; 
  
    FUNCTION XXPRISM_RECEIPT_REPORT(P_RECP_NUM IN VARCHAR2)
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB;
	LN_BLOCKING_CNT NUMBER;
	LN_BOOKING_CNT NUMBER;
	IN_NULL NUMBER;
  BEGIN 
      dbms_output.Put_line(P_RECP_NUM); 
        
		SELECT COUNT(*) 
        INTO LN_BLOCKING_CNT
        FROM XXPM_RECEIPT XR,XXPM_BLOCK_HEADER XBH
       WHERE XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER)
         AND XBH.BLOCK_ID  = XR.SOURCE_FUNC_REF_ID
		 AND XR.SOURCE_FUNC_ID IS NOT NULL; 
		 
		 SELECT COUNT(*) 
        INTO LN_BOOKING_CNT
        FROM XXPM_RECEIPT XR,XXPM_BOOKING_HEADER XBH
       WHERE XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER)
         AND XBH.BOOKING_HDR_ID  = XR.SOURCE_FUNC_REF_ID
         AND XR.SOURCE_FUNC_ID IS NOT NULL; 	

        SELECT COUNT(*) 
        INTO IN_NULL
        FROM XXPM_RECEIPT XR
       WHERE XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER)
         AND XR.SOURCE_FUNC_ID IS NULL;		 
	  
	  IF LN_BLOCKING_CNT > 0 THEN 
	  
      OPEN l_query_ref FOR 
        
              SELECT (CASE WHEN XBH.BLOCK_TYPE = 'SBT' THEN  XBH.BLOCK_NUMBER END) BLOCK_NUMBER,
			 NULL BOOKING_NUMBER,
            CASE WHEN XBH.BLOCK_TYPE IN('ROF','QR') THEN  XBH.BLOCK_NUMBER END RESEV_NUMBER,
			XPM.PROPERTY_NAME,
			XPB.BUILD_NAME,
			XPU.UNIT_NAME,
			(SELECT CUSTOMER_NAME FROM XXSTG_CUSTOMER WHERE CUST_ID = XR.CUST_ID) CUSTOMER_NAME,
            (SELECT LOOKUP_VALUE_NAME_DISP  FROM XXFND_LOOKUP_V  WHERE LOOKUP_TYPE_NAME LIKE '%CHARGE_TYPE%' AND LOOKUP_VALUE_NAME =XR.RCT_TYPE) REC_TYPE,
			CURSOR
			(SELECT SOURCE_FUNC_REF_ID,
			RECEIPT_NUMBER,
			RECEIPT_DATE,
			(SELECT RECEIPT_METHOD_NAME  FROM XXSTG_RECEIPT_METHOD WHERE RECEIPT_METHOD_ID = XR.PAY_MODE and org_id = xr.org_id  AND REMIT_BANK_ACCT_USE_ID = xr.REMIT_BANK_ACCT_USE_ID) PAY_MODE,
			PAY_REF_NUMBER,
			PAY_REC_DATE PAY_REF_DATE,
			BANK_NAME,
			BANK_BRANCH_NAME,
			CURRENCY_CODE,
			DRAWN_BY RECE_BY,
			NVL(RECEIVED_AMOUNT,0) AMOUNT
			--    SUM(NVL(RECEIPT_AMOUNT,0)) OVER (partition BY RECEIPT_NUMBER) TOT_AMT,
			--    XXPM_UTILITY_PKG.AMOUNT_IN_WORDS(SUM(NVL(RECEIPT_AMOUNT,0)) OVER (partition BY RECEIPT_NUMBER),'AED') AMT_IN_WORDS
			FROM XXPM_RECEIPT 
			WHERE RECEIPT_ID = XR.RECEIPT_ID )RECE
			FROM XXPM_RECEIPT XR,
			XXPM_BLOCK_HEADER XBH,
			XXPM_BLOCK_DETAIL XBD,
			XXPM_PROPERTY_MASTER XPM,
			XXPM_PROPERTY_BUILDINGS XPB,
			XXPM_PROPERTY_UNITS XPU
			
			WHERE 1             =1
			AND XR.SOURCE_FUNC_REF_ID = XBH.BLOCK_ID
			AND XBH.BLOCK_ID    = XBD.BLOCK_ID(+)
			AND XBD.PROPERTY_ID = XPM.PROPERTY_ID(+)
			AND XBD.BUILD_ID    = XPB.BUILD_ID(+)
			AND XBD.UNIT_ID     = XPU.UNIT_ID(+)            
			AND XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER);

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 
	  
	  END IF; 
	  
	  IF LN_BOOKING_CNT > 0 THEN 
	  
      OPEN l_query_ref FOR 
        
              SELECT 
			  NULL BLOCK_NUMBER,
			  XBH.BOOKING_NUMBER,
			  NULL RESEV_NUMBER,
			XPM.PROPERTY_NAME,
			XPB.BUILD_NAME,
			XPU.UNIT_NAME,
			(SELECT CUSTOMER_NAME FROM XXSTG_CUSTOMER WHERE CUST_ID = XR.CUST_ID) CUSTOMER_NAME,
      (SELECT LOOKUP_VALUE_NAME_DISP  FROM XXFND_LOOKUP_V  WHERE LOOKUP_TYPE_NAME LIKE '%CHARGE_TYPE%' AND LOOKUP_VALUE_NAME =XR.RCT_TYPE) REC_TYPE,
			CURSOR
			(SELECT SOURCE_FUNC_REF_ID,
			RECEIPT_NUMBER,
			RECEIPT_DATE,
			(SELECT RECEIPT_METHOD_NAME  FROM XXSTG_RECEIPT_METHOD WHERE RECEIPT_METHOD_ID = XR.PAY_MODE and org_id = xr.org_id  AND REMIT_BANK_ACCT_USE_ID = xr.REMIT_BANK_ACCT_USE_ID) PAY_MODE,
			PAY_REF_NUMBER,
			PAY_REC_DATE PAY_REF_DATE,
			BANK_NAME,
			BANK_BRANCH_NAME,
			CURRENCY_CODE,
			DRAWN_BY RECE_BY,
			NVL(RECEIVED_AMOUNT,0) AMOUNT
			--    SUM(NVL(RECEIPT_AMOUNT,0)) OVER (partition BY RECEIPT_NUMBER) TOT_AMT,
			--    XXPM_UTILITY_PKG.AMOUNT_IN_WORDS(SUM(NVL(RECEIPT_AMOUNT,0)) OVER (partition BY RECEIPT_NUMBER),'AED') AMT_IN_WORDS
			FROM XXPM_RECEIPT
			WHERE RECEIPT_ID = XR.RECEIPT_ID )RECE
			FROM XXPM_RECEIPT XR,
			XXPM_BOOKING_HEADER XBH,
			XXPM_BOOKING_DETAIL XBD,
			XXPM_PROPERTY_MASTER XPM,
			XXPM_PROPERTY_BUILDINGS XPB,
			XXPM_PROPERTY_UNITS XPU
			
			WHERE 1             =1
			AND XBH.BOOKING_HDR_ID     = XR.SOURCE_FUNC_REF_ID
			AND XBH.BOOKING_HDR_ID     = XBD.BOOKING_HDR_ID(+)
			AND XBD.PROPERTY_ID        = XPM.PROPERTY_ID(+)
			AND XBD.BUILDING_ID        = XPB.BUILD_ID(+)
			AND XBD.UNIT_ID            = XPU.UNIT_ID(+)			  		
      AND XR.RECEIPT_NUMBER      = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER);

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 
	  
	  END IF; 
	  
	  
	  IF IN_NULL > 0 THEN 
	  
      OPEN l_query_ref FOR 
             
              SELECT
               NULL BLOCK_NUMBER,
			  XBH.BOOKING_NUMBER,
			  
              NULL RESEV_NUMBER,
			XPM.PROPERTY_NAME,
			XPB.BUILD_NAME,
			XPU.UNIT_NAME,
			(SELECT CUSTOMER_NAME FROM XXSTG_CUSTOMER WHERE CUST_ID = XR.CUST_ID) CUSTOMER_NAME,
            (SELECT LOOKUP_VALUE_NAME_DISP  FROM XXFND_LOOKUP_V  WHERE LOOKUP_TYPE_NAME LIKE '%CHARGE_TYPE%' AND LOOKUP_VALUE_NAME =XR.RCT_TYPE) REC_TYPE,
			CURSOR
			(SELECT SOURCE_FUNC_REF_ID,
			RECEIPT_NUMBER,
			RECEIPT_DATE,
			(SELECT RECEIPT_METHOD_NAME  FROM XXSTG_RECEIPT_METHOD WHERE RECEIPT_METHOD_ID = XR.PAY_MODE and org_id = xr.org_id  AND REMIT_BANK_ACCT_USE_ID = xr.REMIT_BANK_ACCT_USE_ID) PAY_MODE,
			PAY_REF_NUMBER,
			PAY_REC_DATE PAY_REF_DATE,
			BANK_NAME,
			BANK_BRANCH_NAME,
			CURRENCY_CODE,
			DRAWN_BY RECE_BY,
			NVL(RECEIVED_AMOUNT,0) AMOUNT
			--    SUM(NVL(RECEIPT_AMOUNT,0)) OVER (partition BY RECEIPT_NUMBER) TOT_AMT,
			--    XXPM_UTILITY_PKG.AMOUNT_IN_WORDS(SUM(NVL(RECEIPT_AMOUNT,0)) OVER (partition BY RECEIPT_NUMBER),'AED') AMT_IN_WORDS
			FROM XXPM_RECEIPT
			WHERE RECEIPT_ID = XR.RECEIPT_ID )RECE
			FROM XXPM_RECEIPT XR,
            XXPM_RECEIPT_DETAILS XRD,
            XXPM_INVOICE_HEADER XIH,
			XXPM_BOOKING_HEADER XBH,
			XXPM_BOOKING_DETAIL XBD,
			XXPM_PROPERTY_MASTER XPM,
			XXPM_PROPERTY_BUILDINGS XPB,
			XXPM_PROPERTY_UNITS XPU
			
			WHERE 1             =1
            AND XR.RECEIPT_ID          =XRD.RECEIPT_ID
            AND XRD.INVOICE_ID         = XIH.INVOICE_ID
			AND XIH.BOOKING_ID         = XBH.BOOKING_HDR_ID     
			AND XBH.BOOKING_HDR_ID     = XBD.BOOKING_HDR_ID(+)
			AND XBD.PROPERTY_ID        = XPM.PROPERTY_ID(+)
			AND XBD.BUILDING_ID        = XPB.BUILD_ID(+)
			AND XBD.UNIT_ID            = XPU.UNIT_ID(+)			  		
      AND XR.RECEIPT_NUMBER = NVL(P_RECP_NUM,XR.RECEIPT_NUMBER);

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 
	  
	  END IF; 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_RECEIPT_REPORT; 
  
  
  FUNCTION XXPRISM_AR_DETAIL(P_PROJ_NAME IN VARCHAR2
  , P_PROP_NAME IN VARCHAR2
  ) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROJ_NAME); 
      dbms_output.Put_line(P_PROP_NAME); 

      OPEN l_query_ref FOR 
        
           SELECT XBM.MS_DTL_ID,
  XBH.BOOKING_HDR_ID,
  XBH.BOOKING_NUMBER,
  XP.PROJECT_NUMBER ,
  XP.PROJECT_NAME,
  XPU.UNIT_NAME UNIT_NO,
  XC.CUSTOMER_NAME,
  XBD.BOOKING_RATE UNIT_COST,
  XPA.VALUE UNIT,
  XPA.UOM AREA,
  XBD.BOOKING_RATE SQFT_PRICE,
  CASE
    WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
    THEN
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XLV1.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XMD.INSTALLMENT_EVENT
      END
    ELSE
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
      END
  END EVENT_NAME,
  XBM.INSTALLMENT_PCT INST_PCT_AVG,
  NVL(XIH.DUE_DATE, XBM.DUE_DATE) PAY_DUE_DATE,
  NVL(XBM.INSTALLMENT_AMOUNT,0) INST_AMT,
  SUM(NVL(XRD.AMOUNT_APPLIED,0)) RECEIVED_AMT,
  (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0))) OUTSTANDING_AMT,
  XP.COMPLETION_DATE,
  (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) DUE_DAYS,
  CASE
    WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) < SYSDATE
    THEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')))
    ELSE NULL
  END DUE_DAYS_1,
  NVL(
  CASE
    WHEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 0 AND 30
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                       - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) AMT_0_30,
  NVL(
  CASE
    WHEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 31 AND 60
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                       - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) AMT_31_60,
  NVL(
  CASE
    WHEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) BETWEEN 61 AND 90
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                       - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) AMT_61_90,
  NVL(
  CASE
    WHEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) > 90
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                       - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) AMT_90,
  NVL(
  CASE
    WHEN XBM.PERIOD_DURATION = 'Due Before Completion'
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) BEFORE_COMPL,
  NVL(
  CASE
    WHEN XBM.PERIOD_DURATION = 'Due On Completion'
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) ON_COMPL,
  NVL(
  CASE
    WHEN XBM.PERIOD_DURATION = 'Due Post Completion'
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) AFTER_COMPL,
  XPU.STATUS,
  XBH.CREATED_BY 
FROM XXPM_BOOKING_HEADER XBH,
  XXPM_BOOKING_MILESTONES XBM,
  XXPM_BOOKING_DETAIL XBD,
  XXPM_BOOKING_CUSTOMER XBC,
  XXPM_PROPERTY_MASTER XPM,
  XXPM_PROPERTY_UNITS XPU,
  XXPM_PROPERTY_AREA XPA,
  XXPM_MILESTONE_DTL XMD,
  XXSTG_PROJECTS XP,
  XXSTG_CUSTOMER XC,
  XXFND_LOOKUP_TYPES XLT,
  XXFND_LOOKUP_TYPES XLT1,
  XXFND_LOOKUP_VALUES XLV,
  XXFND_LOOKUP_VALUES XLV1,
  XXPM_INVOICE_HEADER XIH,
  XXPM_INVOICE_LINES XIL,
  XXPM_RECEIPT_DETAILS XRD
WHERE XBH.BOOKING_HDR_ID  = XBM.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID
AND XBD.UNIT_ID           = XPU.UNIT_ID
AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID
AND XPU.UNIT_ID           = XPA.UNIT_ID
AND XPM.PROJECT_ID        = XP.PROJ_ID
AND XPM.ORG_ID            = XP.ORG_ID
AND XBC.CUST_ID           = XC.CUST_ID
AND XBH.BOOKING_HDR_ID    = XIH.BOOKING_ID(+)
AND XBM.INVOICE_ID        = XIH.INVOICE_ID(+)
AND XBM.INSTALLMENT_TYPE  = XIL.INSTALLMENT_TYPE(+)
AND XIH.INVOICE_ID        = XIL.INVOICE_ID(+)
AND XIH.INVOICE_ID        = XRD.INVOICE_ID(+)
AND XBM.MS_DTL_ID         = XMD.MS_DTL_ID(+)
AND XBM.INSTALLMENT_TYPE  = XLV.LOOKUP_VALUE_NAME(+)
AND XBM.INSTALLMENT_EVENT = XLV1.LOOKUP_VALUE_NAME(+)
AND XLT.LOOKUP_TYPE_ID    = XLV.LOOKUP_TYPE_ID(+)
AND XLT1.LOOKUP_TYPE_ID   = XLV1.LOOKUP_TYPE_ID(+)
AND XLT.LOOKUP_TYPE_NAME  = 'MILESTONE_INSTALLMENT'
AND XLT1.LOOKUP_TYPE_NAME = 'BOOKING_EVENT'-- 'MILESTONE_INSTALLMENT'
AND XBH.USAGE             = 'S'
AND XBH.STATUS            = 'APR'
AND XBC.PRIMARY_YN        = 'Y'
AND XP.PROJ_ID       = NVL(P_PROJ_NAME, XP.PROJ_ID)
AND XPM.PROPERTY_ID     = NVL(P_PROP_NAME, XPM.PROPERTY_ID)
  --AND XBH.BOOKING_NUMBER = 'BK-1000404'
  --AND XP.PROJECT_NAME  = 'The Pad Project'
GROUP BY XBM.MS_DTL_ID,
  XBH.BOOKING_HDR_ID,
  XBH.BOOKING_NUMBER,
  XP.PROJECT_NUMBER ,
  XP.PROJECT_NAME,
  XPU.UNIT_NAME ,
  XC.CUSTOMER_NAME,
  XBD.BOOKING_RATE ,
  XPA.VALUE ,
  XPA.UOM ,
  XBD.BOOKING_RATE ,
  CASE
    WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
    THEN
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XLV1.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XMD.INSTALLMENT_EVENT
      END
    ELSE
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
      END
  END,
  XBM.INSTALLMENT_PCT ,
  NVL(XIH.DUE_DATE, XBM.DUE_DATE) ,
  NVL(XBM.INSTALLMENT_AMOUNT,0),
  XP.COMPLETION_DATE,
  (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) ,
  CASE
    WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) < SYSDATE
    THEN (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')))
    ELSE NULL
  END,
  XBM.PERIOD_DURATION,
  XPU.STATUS,
  XBH.CREATED_BY 
ORDER BY XBM.MS_DTL_ID;

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_AR_DETAIL; 
  
  FUNCTION XXPRISM_AR_SUMMARY(P_PROJ_NAME IN VARCHAR2
  ,P_PROP_NAME IN VARCHAR2) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROJ_NAME); 
      dbms_output.Put_line(P_PROP_NAME);

      OPEN l_query_ref FOR 
        
SELECT BOOKING_HDR_ID,
  BOOKING_NUMBER,
  CUSTOMER_NAME,
  SUM(SPA_VALUE) SPA_VALUE,
  SUM(NVL(RECEIVED_AMT,0)) RECEIVED_AMT,
  SUM(NVL(BALANCE_RECEIVED,0)) BALANCE_RECEIVED,
  SUM(NVL(DUE_NOW,0)) DUE_NOW,
  SUM(NVL(
  CASE
    WHEN due_days BETWEEN 0 AND 3
    THEN (BALANCE_RECEIVED)
  END,0)) amt_0_30,
  SUM(NVL(
  CASE
    WHEN due_days BETWEEN 31 AND 60
    THEN BALANCE_RECEIVED
  END,0)) amt_31_60,
  SUM(NVL(
  CASE
    WHEN due_days BETWEEN 61 AND 90
    THEN BALANCE_RECEIVED
  END,0)) amt_61_90,
  SUM(NVL(
  CASE
    WHEN due_days > 90
    THEN BALANCE_RECEIVED
  END,0)) amt_90,
  SUM(NVL(BEFORE_COMPL,0)) BEFORE_COMPL,
  SUM(NVL(ON_COMPL,0)) ON_COMPL,
  SUM(NVL(AFTER_COMPL,0)) AFTER_COMPL,
  CREATED_BY
FROM
  (SELECT distinct XBH.BOOKING_HDR_ID,
    XBH.BOOKING_NUMBER,
    XC.CUSTOMER_NAME ,
    SUM(NVL(MIL.INSTALLMENT_AMOUNT,0)) SPA_VALUE,
    SUM(NVL(XRD.AMOUNT_APPLIED,0)) RECEIVED_AMT,
    SUM(NVL(MIL.INSTALLMENT_AMOUNT,0)) - SUM(NVL(XRD.AMOUNT_APPLIED,0)) BALANCE_RECEIVED,
    NVL((
    CASE
      WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) < SYSDATE
      THEN SUM(NVL(MIL.INSTALLMENT_AMOUNT,0)) - SUM(NVL(XRD.AMOUNT_APPLIED,0))
    END),0) DUE_NOW,
    (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))) DUE_DAYS,
    CASE
      WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) > SYSDATE
      THEN NVL(
        CASE
          WHEN XBM.PERIOD_DURATION = 'Due Before Completion'
          THEN SUM(NVL(MIL.INSTALLMENT_AMOUNT,0)) - SUM(NVL(XRD.AMOUNT_APPLIED,0))
        END,0)
    END BEFORE_COMPL,
    CASE
      WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) > SYSDATE
      THEN NVL(
        CASE
          WHEN XBM.PERIOD_DURATION = 'Due On Completion'
          THEN SUM(NVL(MIL.INSTALLMENT_AMOUNT,0)) - SUM(NVL(XRD.AMOUNT_APPLIED,0))
        END,0)
    END ON_COMPL,
    CASE
      WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) > SYSDATE
      THEN NVL(
        CASE
          WHEN XBM.PERIOD_DURATION = 'Due Post Completion'
          THEN SUM(NVL(MIL.INSTALLMENT_AMOUNT,0)) - SUM(NVL(XRD.AMOUNT_APPLIED,0))
        END,0)
    END AFTER_COMPL,
    XBH.CREATED_BY
  FROM XXPM_BOOKING_HEADER XBH,
    XXPM_BOOKING_MILESTONES XBM,
    XXPM_BOOKING_DETAIL XBD,
    XXPM_BOOKING_CUSTOMER XBC,
    XXPM_PROPERTY_MASTER XPM,
    XXPM_MILESTONE_DTL XMD,
    XXSTG_PROJECTS XP,
    XXSTG_CUSTOMER XC,
    XXPM_INVOICE_HEADER XIH,
    XXPM_INVOICE_LINES XIL,
    XXPM_RECEIPT_DETAILS XRD,
    (SELECT BOOKING_HDR_ID, BOOKING_MS_DTL_ID,
      INSTALLMENT_AMOUNT 
      FROM XXPM_BOOKING_MILESTONES
      WHERE MILESTONE_TYPE IN ('Charge', 'MS', 'Fix')
      ) MIL
              
  WHERE XBH.BOOKING_HDR_ID = XBM.BOOKING_HDR_ID
  AND XBH.BOOKING_HDR_ID   = XBD.BOOKING_HDR_ID
  AND XBH.BOOKING_HDR_ID   = XBC.BOOKING_HDR_ID
  AND XBH.PROPERTY_ID      = XPM.PROPERTY_ID
  AND XPM.PROJECT_ID       = XP.PROJ_ID
  AND XPM.ORG_ID           = XP.ORG_ID
  AND XBC.CUST_ID          = XC.CUST_ID
  AND XBH.BOOKING_HDR_ID   = XIH.BOOKING_ID(+)
  AND XBM.INVOICE_ID       = XIH.INVOICE_ID(+)
  AND XBM.INSTALLMENT_TYPE = XIL.INSTALLMENT_TYPE(+)
  AND XIH.INVOICE_ID       = XIL.INVOICE_ID(+)
  AND XIH.INVOICE_ID       = XRD.INVOICE_ID(+)
  AND XBM.MS_DTL_ID        = XMD.MS_DTL_ID(+)
  AND MIL.BOOKING_MS_DTL_ID (+)    = XBM.BOOKING_MS_DTL_ID 
  AND MIL.BOOKING_HDR_ID (+)  = XBH.BOOKING_HDR_ID
  AND XBH.USAGE            = 'S'
  AND XBH.STATUS           = 'APR'
  AND XBC.PRIMARY_YN       = 'Y'
AND XP.PROJ_ID       = NVL(P_PROJ_NAME, XP.PROJ_ID)
AND XPM.PROPERTY_ID     = NVL(P_PROP_NAME, XPM.PROPERTY_ID)
    --AND XPM.PROPERTY_NAME = ('The Pad')
    --AND XP.PROJECT_NAME      = 'The Pad Project'
    --AND XPM.PROPERTY_NAME    = 'Omniyat001' 
    --AND XBH.BOOKING_NUMBER  IN ('BK-1000404', 'BK-1000357', 'BK-1196')
  AND NVL(XBM.WAVE_OFF, 'AB') IN ('N', 'AB')
  GROUP BY XBH.BOOKING_HDR_ID,
    XBH.BOOKING_NUMBER,
    XC.CUSTOMER_NAME ,
    NVL(XIH.DUE_DATE, XBM.DUE_DATE) ,
    XBM.PERIOD_DURATION,
    (TO_DATE (TO_CHAR (SYSDATE ,'DDMMYYYY') ,'DDMMYYYY') - NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))),
    XBH.CREATED_BY
  )
GROUP BY BOOKING_HDR_ID,
  BOOKING_NUMBER,
  CUSTOMER_NAME,
  CREATED_BY; 
  
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_AR_SUMMARY; 
  
  FUNCTION XXPRISM_UNIT_STATUS(P_PROJ_NAME IN VARCHAR2
  ,P_PROP_NAME IN VARCHAR2) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROJ_NAME); 
      dbms_output.Put_line(P_PROP_NAME);

      OPEN l_query_ref FOR 
        
/*BOOKED, BLOCKED*/

SELECT 
  XBH.BOOKING_HDR_ID            BOOKING_HDR_ID,
  XBH.BOOKING_NUMBER            BOOKING_NUMBER,
  XP.PROJECT_NUMBER             PROJECT_NUMBER,
  XP.PROJECT_NAME               PROJECT_NAME,
  XPU.UNIT_NUMBER               UNIT_NO, 
  XC.CUSTOMER_NAME              CUSTOMER,
 (XPU.BASE_RATE * XPA.VALUE)    UNIT_COST,
  XPA.VALUE UNIT,
  XPA.UOM AREA,
 (XPU.BASE_RATE * XPA.VALUE)    SQFT_PRICE,
  XLU.LOOKUP_VALUE_NAME_DISP                    STATUS,
    CASE
    WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
    THEN
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XLV1.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XMD.INSTALLMENT_EVENT
      END
    ELSE
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
      END
  END EVENT_NAME,
  XBM.INSTALLMENT_PCT           INST_PCT_AVG,
  NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')) PAY_DUE_DATE,
  --NVL(XIH.DUE_DATE, XBM.DUE_DATE) PAY_DUE_DATE,
  NVL(XBM.INSTALLMENT_AMOUNT,0) INST_AMT,
  SUM(NVL(XRD.AMOUNT_APPLIED,0))RECEIVED_AMT,
  (NVL(XBM.INSTALLMENT_AMOUNT,0) - SUM(NVL(XRD.AMOUNT_APPLIED,0))) OUTSTANDING_AMT,
  NULL                          DATE_CHANGE,
  
  NVL(CASE
    WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) > SYSDATE
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)  - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) NOT_DUE,
  
   NVL(CASE
    WHEN NVL(XIH.DUE_DATE, XBM.DUE_DATE) <= SYSDATE
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)  - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) OVERDUE,
  
  NVL(
  CASE
    WHEN NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')) 
    BETWEEN TO_DATE('01012019','DDMMYYYY') AND TO_DATE('30062019','DDMMYYYY')
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                       - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) JAN_JUNE_19,
  
   NVL(
  CASE
    WHEN NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))
    BETWEEN TO_DATE('01072019','DDMMYYYY') AND TO_DATE('31122019','DDMMYYYY')
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                       - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) JULY_DEC_19,
  
      NVL(
  CASE
    WHEN NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'))
    BETWEEN TO_DATE('01012020','DDMMYYYY') AND TO_DATE('31122020','DDMMYYYY')
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                       - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) JAN_DEC_20,
  
  NVL(
  CASE
    WHEN NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')) 
    BETWEEN  TO_DATE('01012021','DDMMYYYY') AND TO_DATE('31122021','DDMMYYYY')
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                       - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) JAN_DEC_21, 
  
  
  NVL(
  CASE
    WHEN NVL(TO_CHAR (XIH.DUE_DATE,'YYYY'), TO_CHAR (XBM.DUE_DATE,'YYYY')) 
    >  2022
    THEN (NVL(XBM.INSTALLMENT_AMOUNT,0)                       - SUM(NVL(XRD.AMOUNT_APPLIED,0)))
  END,0) ONW_2022 
    
FROM 
  XXPM_BOOKING_HEADER XBH,
  XXPM_BOOKING_MILESTONES XBM,
  XXPM_BOOKING_DETAIL XBD,
  XXPM_BOOKING_CUSTOMER XBC,
  XXPM_PROPERTY_MASTER XPM,
  XXPM_PROPERTY_UNITS XPU,
  XXPM_PROPERTY_AREA XPA,
  XXPM_MILESTONE_DTL XMD,
  XXSTG_PROJECTS XP,
  XXSTG_CUSTOMER XC,
  XXFND_LOOKUP_TYPES XLT,
  XXFND_LOOKUP_TYPES XLT1,
  XXFND_LOOKUP_VALUES XLV,
  XXFND_LOOKUP_VALUES XLV1,
  XXPM_INVOICE_HEADER XIH,
  XXPM_INVOICE_LINES XIL,
  XXPM_RECEIPT_DETAILS XRD,
  XXFND_LOOKUP_V XLU
  
WHERE 1=1
AND XBH.BOOKING_HDR_ID    = XBM.BOOKING_HDR_ID 
AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID  
AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID
AND XBD.UNIT_ID           = XPU.UNIT_ID 
AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID 
AND XPM.PROPERTY_ID       = XPU.PROPERTY_ID
AND XPU.UNIT_ID           = XPA.UNIT_ID  
AND XPM.PROJECT_ID        = XP.PROJ_ID
AND XPM.ORG_ID            = XP.ORG_ID
AND XBC.CUST_ID           = XC.CUST_ID
AND XBH.BOOKING_HDR_ID    = XIH.BOOKING_ID(+)
AND XBM.INVOICE_ID        = XIH.INVOICE_ID(+)
AND XBM.INSTALLMENT_TYPE  = XIL.INSTALLMENT_TYPE(+)
AND XIH.INVOICE_ID        = XIL.INVOICE_ID(+)
AND XIH.INVOICE_ID        = XRD.INVOICE_ID(+)
AND XBM.MS_DTL_ID         = XMD.MS_DTL_ID 
AND XBM.INSTALLMENT_TYPE  = XLV.LOOKUP_VALUE_NAME(+)
AND XBM.INSTALLMENT_EVENT = XLV1.LOOKUP_VALUE_NAME(+)
AND XLT.LOOKUP_TYPE_ID    = XLV.LOOKUP_TYPE_ID(+)
AND XLT1.LOOKUP_TYPE_ID   = XLV1.LOOKUP_TYPE_ID(+)
AND XPU.STATUS            = XLU.LOOKUP_VALUE_NAME (+)
AND XLT.LOOKUP_TYPE_NAME  = 'MILESTONE_INSTALLMENT'
AND XLT1.LOOKUP_TYPE_NAME = 'BOOKING_EVENT'
AND XBC.PRIMARY_YN        = 'Y'
--AND XP.PROJ_ID = 300000002086347
--AND XPM.PROPERTY_NAME     = 'Omniyat001'
--AND XPU.UNIT_NUMBER = 'OM001-008'
AND XPU.STATUS IN ('BOOK', 'BLOCK')
AND XBH.STATUS <> 'CANCEL'
AND XP.PROJ_ID          = NVL(P_PROJ_NAME, XP.PROJ_ID)
AND XPM.PROPERTY_ID     = NVL(P_PROP_NAME, XPM.PROPERTY_ID)
GROUP BY XBH.BOOKING_HDR_ID,
  XBH.BOOKING_NUMBER,
  XP.PROJECT_NUMBER,
  XP.PROJECT_NAME,
  XPU.UNIT_NUMBER, 
  XC.CUSTOMER_NAME,
 (XPU.BASE_RATE * XPA.VALUE),
  XPA.VALUE,
  XPA.UOM ,
 (XPU.BASE_RATE * XPA.VALUE),
  XLU.LOOKUP_VALUE_NAME_DISP ,
    CASE
    WHEN XMD.INSTALLMENT_EVENT IS NOT NULL
    THEN
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XLV1.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
          ||'-'
          ||XMD.INSTALLMENT_EVENT
      END
    ELSE
      CASE
        WHEN XLV1.LOOKUP_VALUE_NAME_DISP IS NOT NULL
        THEN XLV.LOOKUP_VALUE_NAME_DISP
        ELSE XLV.LOOKUP_VALUE_NAME_DISP
      END
  END ,
  XBM.INSTALLMENT_PCT,
  NVL(TO_DATE (TO_CHAR (XIH.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY'), TO_DATE (TO_CHAR (XBM.DUE_DATE ,'DDMMYYYY') ,'DDMMYYYY')),
  NVL(TO_CHAR (XIH.DUE_DATE,'YYYY'), TO_CHAR (XBM.DUE_DATE,'YYYY')),
  NVL(XIH.DUE_DATE, XBM.DUE_DATE),
  NVL(XBM.INSTALLMENT_AMOUNT,0)


UNION ALL

/*ALLOTED, AVAILABLE*/
SELECT 
   NULL                         BOOKING_HDR_ID,
   NULL                         BOOKING_NUMBER,
  XP.PROJECT_NUMBER             PROJECT_NUMBER,
  XP.PROJECT_NAME               PROJECT_NAME,
  XPU.UNIT_NUMBER               UNIT_NO, 
  NULL                          CUSTOMER,
 (XPU.BASE_RATE * XPA.VALUE)    UNIT_COST,
  XPA.VALUE UNIT,
  XPA.UOM  AREA,
 (XPU.BASE_RATE * XPA.VALUE)    SQFT_PRICE,
  XLU.LOOKUP_VALUE_NAME_DISP    STATUS,
  NULL                          EVENT_NAME,
  NULL                          INST_PCT_AVG,
  NULL                          PAY_DUE_DATE,
  0                             INST_AMT,
  0                             RECEIVED_AMT,
  0                             OUTSTANDING_AMT,
  NULL                          DATE_CHANGE,
  0                             NOT_DUE,
  0                             OVERDUE,
  0                             JAN_JUNE_19,
  0                             JULY_DEC_19,
  0                             JAN_DEC_20,
  0                             JAN_DEC_21, 
  0                             ONW_2022
  
FROM 
  XXPM_PROPERTY_MASTER XPM,
  XXPM_PROPERTY_UNITS XPU,
  XXPM_PROPERTY_AREA XPA,
  XXSTG_PROJECTS XP,
  XXFND_LOOKUP_V XLU
  
WHERE 1=1
AND XPM.PROPERTY_ID       = XPU.PROPERTY_ID
AND XPU.UNIT_ID           = XPA.UNIT_ID  
AND XPM.PROJECT_ID        = XP.PROJ_ID
AND XPM.ORG_ID            = XP.ORG_ID
AND XPU.STATUS            = XLU.LOOKUP_VALUE_NAME (+)
AND XPU.STATUS IN ('AVAL', 'ALOT')
--AND XP.PROJ_ID = 300000002086347
--AND XPM.PROPERTY_NAME     = 'Omniyat001'
--AND XPU.UNIT_NUMBER IN ('OM001-020', 'OM001-017')
AND XP.PROJ_ID       = NVL(P_PROJ_NAME, XP.PROJ_ID)
AND XPM.PROPERTY_ID  = NVL(P_PROP_NAME, XPM.PROPERTY_ID)
GROUP BY XP.PROJECT_NUMBER,            
  XP.PROJECT_NAME,              
  XPU.UNIT_NUMBER,                                    
 (XPU.BASE_RATE * XPA.VALUE),
  XPA.VALUE ,
  XPA.UOM,
 (XPU.BASE_RATE * XPA.VALUE),
  XLU.LOOKUP_VALUE_NAME_DISP
  
ORDER BY  
STATUS,UNIT_NO;
  
      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  END XXPRISM_UNIT_STATUS; 
  
  
   FUNCTION XXPRISM_SPA_REPORT(P_BLOCK_NUM IN VARCHAR2) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_BLOCK_NUM); 

      OPEN l_query_ref FOR 
		SELECT 
		XO.ORG_NAME,
    XC.CUSTOMER_NAME,
		XCC.PASSPORT_NUMBER,
		XCC.EMAIL_ID,
		XCS.CITY,
		XLV.LOOKUP_VALUE_NAME_DISP COUNTRY,
		XCC.PHONE_NUMBER,
		XCC.FAX_NUMBER,
		XPB.BUILD_NAME,
		XPU.UNIT_NAME,
		XPU.UNIT_TYPE,
		XPA.VALUE AREA,
		XP.COMPLETION_DATE,
		XBD.BOOKING_AMOUNT,
		XXPM_UTILITY_PKG.AMOUNT_IN_WORDS(NVL(XBD.BOOKING_AMOUNT,0),'AED') AMT_IN_WORDS,
		XBA.BANK_NAME,
		XBA.BANK_NUMBER,
		XBA.BRANCH_NAME,
		XBA.SWIFT_CODE,
		XBA.BANK_ACCOUNT_NUM,
		XBA.IBAN,
		NULL BANK_ACC_NAME,
		NULL ADDRESS,
		CURSOR
		(
		SELECT
		XBM.INSTALLMENT_TYPE,
		XBM.INSTALLMENT_AMOUNT,
		XBM.DUE_DATE,
		(SELECT LOOKUP_VALUE_NAME_DISP FROM XXFND_LOOKUP_V WHERE LOOKUP_TYPE_NAME = 'MILESTONE_DURATION' AND LOOKUP_VALUE_NAME = XBM.PERIOD_DURATION)PERIOD_DURATION ,
		XBM.MILESTONE_TYPE,
		XBM.INSTALLMENT_PCT,
		XLV.LOOKUP_VALUE_NAME_DISP INS_TYPE
		FROM
		XXPM_BOOKING_MILESTONES XBM,
		XXFND_LOOKUP_V XLV
		WHERE 
		XBM.BOOKING_HDR_ID       = XBD.BOOKING_HDR_ID
		AND XBM.INSTALLMENT_TYPE = XLV.LOOKUP_VALUE_NAME(+)
		AND XLV.LOOKUP_TYPE_NAME(+) = 'MILESTONE_INSTALLMENT'
		AND XBM.MILESTONE_TYPE = 'MS'
		ORDER BY XBM.DUE_DATE ASC
		) INSTALL_PAY

		FROM 

		XXSTG_ORGANIZATIONS XO,
		XXPM_BOOKING_CUSTOMER XBC,
		XXPM_BOOKING_HEADER XBH,
		XXPM_BOOKING_DETAIL XBD,
		XXPM_PROPERTY_BUILDINGS XPB,
		XXPM_PROPERTY_MASTER XPM,
		XXPM_PROPERTY_UNITS XPU,
		XXPM_PROPERTY_AREA XPA,
		XXSTG_CUSTOMER XC,
		XXSTG_CUST_SITES XCS,
		XXSTG_CUST_CONTACTS XCC,
		XXSTG_PROJECTS XP,
		XXPM_PROPERTY_ESCROW XPE,
		XXSTG_BANK_ACCOUNTS XBA,
		XXFND_LOOKUP_V XLV

		WHERE 1=1


		AND XBC.BOOKING_HDR_ID      = XBH.BOOKING_HDR_ID
		AND XBH.BOOKING_HDR_ID      = XBD.BOOKING_HDR_ID
		AND XBD.BUILDING_ID         = XPB.BUILD_ID
		AND XBD.UNIT_ID             = XPU.UNIT_ID
		AND XPU.UNIT_ID             = XPA.UNIT_ID
		AND XBH.PROPERTY_ID         = XPM.PROPERTY_ID(+)
		AND XPM.PROJECT_ID          = XP.PROJ_ID(+)
		AND XC.CUST_ID              = XCS.CUST_ID
		AND XCS.CUST_ID             = XCC.CUST_ID(+)
		AND XCS.CUST_SITE_ID        = XCC.CUST_SITE_ID(+)
		AND XLV.LOOKUP_VALUE_NAME   = XCS.COUNTRY(+)
		AND XBC.CUST_ID             = XC.CUST_ID (+)
		AND XLV.LOOKUP_TYPE_NAME(+) = 'COUNTRY'
		AND XPB.BUILD_ID            = XPE.BUILD_ID(+)
		AND XPE.BANK_ACNT_ID        = XBA.BANK_ACNT_ID(+)
		AND XBH.ORG_ID              = XO.ORG_ID
		AND XCS.ORG_ID              = XO.ORG_ID
AND XBH.BOOKING_NUMBER        = P_BLOCK_NUM;

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_SPA_REPORT; 
  
  FUNCTION XXPRISM_ARABIC_SPA_REPORT(
    P_BLOCK_NUM IN VARCHAR2)
  RETURN CLOB
IS
  l_query_ref SYS_REFCURSOR;
  l_handle dbms_xmlgen.ctxhandle;
  l_data_xml CLOB;
BEGIN
  dbms_output.Put_line(P_BLOCK_NUM);
  OPEN l_query_ref FOR 
 SELECT XO.ORG_NAME,
  XO.ORG_NAME_TL,
  XC.CUSTOMER_NAME,
  XC.TITLE TITLE_Y,
  XC.SUR_NAME SURNAME_Y,
  XC.MIDDLE_NAME MIDDLE_NAME_Y,
  XC.FIRST_NAME FIRST_NAME_Y,
  XC.CUSTOMER_NAME_TL,
  XCC.PASSPORT_NUMBER PASSPORT_NUMBER_Y,
  XCC.EMAIL_ID EMAIL_ID_Y,
  XCS.CITY CITY_Y,
  XCS.ADDRESS1
  ||', '
  ||XCS.CITY ADDRESS_Y,
  XLV.LOOKUP_VALUE_NAME_DISP COUNTRY_Y,
  XCC.PHONE_NUMBER PHONE_NUMBER_Y,
  XCC.FAX_NUMBER,
  XPM.PROPERTY_NAME ,
  XPM.PROPERTY_NAME_TL ,
  XPB.BUILD_NAME,
  XPU.UNIT_NAME,
  XPU.UNIT_TYPE,
  XPA.VALUE UNIT,
  XPA.UOM AREA,
  XP.COMPLETION_DATE,
  XP.START_DATE,
  XBD.BOOKING_AMOUNT,
  XBH.BOOKING_DATE,
  XXPM_UTILITY_PKG.AMOUNT_IN_WORDS(NVL(XBD.BOOKING_AMOUNT,0),'AED') AMT_IN_WORDS,
  XBA.BANK_NAME,
  XBA.BANK_NUMBER,
  XBA.BRANCH_NAME,
  XBA.SWIFT_CODE,
  XBA.BANK_ACCOUNT_NUM,
  XBA.IBAN,
  NULL BANK_ACC_NAME,
  XBA.BRANCH_NAME
  ||', '
  ||XBA.CITY BANK_ADDRESS,
  CURSOR
  (SELECT XBH.BOOKING_NUMBER,
    XC.TITLE TITLE_N,
    XC.SUR_NAME SURNAME_N,
    XC.MIDDLE_NAME MIDDLE_NAME_N,
    XC.FIRST_NAME FIRST_NAME_N,
    XC.PASSPORT_NO PASSPORT_NO_N,
    XCC.EMAIL_ID EMAIL_ID_N,
    XCS.CITY CITY_N,
    XCC.PHONE_NUMBER PHONE_NUMBER_N,
    XCS.ADDRESS1
    ||', '
    ||XCS.CITY ADDRESS_N,
    XLV.LOOKUP_VALUE_NAME_DISP COUNTRY_N
  FROM XXPM_BOOKING_CUSTOMER XBC,
    XXSTG_CUSTOMER XC,
    XXSTG_CUST_SITES XCS,
    XXSTG_CUST_CONTACTS XCC,
    XXFND_LOOKUP_V XLV,
    XXSTG_ORGANIZATIONS XO
  WHERE 1                     = 1
  AND XBH.BOOKING_HDR_ID      = XBC.BOOKING_HDR_ID
  AND XBC.CUST_ID             = XC.CUST_ID (+)
  AND XC.CUST_ID              = XCS.CUST_ID
  AND XCS.CUST_ID             = XCC.CUST_ID(+)
  AND XCS.CUST_SITE_ID        = XCC.CUST_SITE_ID(+)
  AND XLV.LOOKUP_VALUE_NAME   = XCS.COUNTRY(+)
  AND XCS.ORG_ID              = XO.ORG_ID
  AND XBH.ORG_ID              = XO.ORG_ID
  AND XLV.LOOKUP_TYPE_NAME(+) = 'COUNTRY'
    --  AND XBH.BOOKING_NUMBER      = 'BK-1000924'
  AND XBC.PRIMARY_YN = 'N'
  ) CUST,
  CURSOR
  (SELECT XBM.INSTALLMENT_TYPE,
    XBM.INSTALLMENT_AMOUNT,
    XBM.DUE_DATE,
    --    (SELECT LOOKUP_VALUE_NAME_DISP
    --    FROM XXFND_LOOKUP_V
    --    WHERE LOOKUP_TYPE_NAME = 'MILESTONE_DURATION'
    --    AND LOOKUP_VALUE_NAME  = XBM.PERIOD_DURATION
    --    )PERIOD_DURATION ,
    XBM.MILESTONE_TYPE,
    XBM.INSTALLMENT_PCT,
    XLV.LOOKUP_VALUE_NAME_DISP INS_TYPE,
    XMD.INSTALLMENT_EVENT,
    CASE
      WHEN XMD.INSTALLMENT_METHOD = 'Project Milestone'
      THEN XMD.INSTALLMENT_EVENT
      ELSE 'Not Applicable'
    END PERIOD_DURATION
    --    XMD.PERIOD_DURATION
  FROM XXPM_BOOKING_MILESTONES XBM,
    XXPM_MILESTONE_DTL XMD,
    XXFND_LOOKUP_V XLV
  WHERE XBM.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID
  AND XBM.MS_DTL_ID           = XMD.MS_DTL_ID(+)
  AND XBM.INSTALLMENT_TYPE    = XLV.LOOKUP_VALUE_NAME(+)
  AND XLV.LOOKUP_TYPE_NAME(+) = 'MILESTONE_INSTALLMENT'
  AND XBM.MILESTONE_TYPE      = 'MS'
  ORDER BY XBM.DUE_DATE ASC
  ) INSTALL_PAY
FROM XXSTG_ORGANIZATIONS XO,
  XXPM_BOOKING_CUSTOMER XBC,
  XXPM_BOOKING_HEADER XBH,
  XXPM_BOOKING_DETAIL XBD,
  XXPM_PROPERTY_BUILDINGS XPB,
  XXPM_PROPERTY_MASTER XPM,
  XXPM_PROPERTY_UNITS XPU,
  XXPM_PROPERTY_AREA XPA,
  XXSTG_CUSTOMER XC,
  XXSTG_CUST_SITES XCS,
  XXSTG_CUST_CONTACTS XCC,
  XXSTG_PROJECTS XP,
  XXPM_PROPERTY_ESCROW XPE,
  XXSTG_BANK_ACCOUNTS XBA,
  XXFND_LOOKUP_V XLV
WHERE 1                     =1
AND XBC.BOOKING_HDR_ID      = XBH.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID      = XBD.BOOKING_HDR_ID
AND XBD.BUILDING_ID         = XPB.BUILD_ID
AND XBD.UNIT_ID             = XPU.UNIT_ID
AND XPU.UNIT_ID             = XPA.UNIT_ID
AND XBH.PROPERTY_ID         = XPM.PROPERTY_ID(+)
AND XPM.PROJECT_ID          = XP.PROJ_ID(+)
AND XC.CUST_ID              = XCS.CUST_ID
AND XCS.CUST_ID             = XCC.CUST_ID(+)
AND XCS.CUST_SITE_ID        = XCC.CUST_SITE_ID(+)
AND XLV.LOOKUP_VALUE_NAME   = XCS.COUNTRY(+)
AND XBC.CUST_ID             = XC.CUST_ID (+)
AND XLV.LOOKUP_TYPE_NAME(+) = 'COUNTRY'
AND XPB.BUILD_ID            = XPE.BUILD_ID(+)
AND XPE.BANK_ACNT_ID        = XBA.BANK_ACNT_ID(+)
AND XBH.ORG_ID              = XO.ORG_ID
AND XCS.ORG_ID              = XO.ORG_ID
AND XBH.BOOKING_NUMBER      = NVL(P_BLOCK_NUM, XBH.BOOKING_NUMBER)
AND XBC.PRIMARY_YN          = 'Y';
l_handle := dbms_xmlgen.Newcontext (l_query_ref);
dbms_xmlgen.Setrowsettag (l_handle, 'PC');
dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD');
dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag);
l_data_xml := dbms_xmlgen.Getxml (l_handle);
RETURN ( l_data_xml );
EXCEPTION
WHEN OTHERS THEN
  RETURN ( NULL );
END XXPRISM_ARABIC_SPA_REPORT;
  
   FUNCTION XXPRISM_ALL_INVENTORY_STATUS(P_PROP_NAME IN VARCHAR2,P_BUILD_NAME IN VARCHAR2) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROP_NAME); 
	  dbms_output.Put_line(P_BUILD_NAME);

      OPEN l_query_ref FOR 
        
                    SELECT 
                   
                   XPM.PROPERTY_NAME,
                   XPB.BUILD_NAME,
                   XPU.UNIT_NAME,
                   XPU.UNIT_SHORTCODE,
                   XPU.VIEW_TYPE,
                   XPU.FLOOR_NUMBER,
                   (SELECT LOOKUP_VALUE_NAME_DISP FROM XXFND_LOOKUP_V where LOOKUP_TYPE_NAME like '%UNIT_CATEGORY%'  AND LOOKUP_VALUE_NAME = XPU.UNIT_CATEGORY)UNIT_CATEGORY,
                   XPU.UNIT_TYPE,
                   XPU.NO_OF_ROOMS,
                   XPA.VALUE,
                   (SELECT LOOKUP_VALUE_NAME_DISP FROM XXFND_LOOKUP_V where LOOKUP_TYPE_NAME like '%UNIT_STATUS%'  AND LOOKUP_VALUE_NAME = XPU.STATUS)STATUS
                   
                   
                   FROM
                   
                   XXPM_PROPERTY_MASTER XPM,
                   XXPM_PROPERTY_BUILDINGS XPB,
                   XXPM_PROPERTY_UNITS XPU,
                   XXPM_PROPERTY_AREA XPA
                   
                   WHERE  
                    XPM.PROPERTY_ID = XPB.PROPERTY_ID 
                   AND XPB.BUILD_ID = XPU.BUILD_ID
                   AND XPU.UNIT_ID  = XPA.UNIT_ID  
                   AND XPM.PROPERTY_ID = NVL(P_PROP_NAME,XPM.PROPERTY_ID)
                   AND XPB.BUILD_ID = NVL(P_BUILD_NAME,XPB.BUILD_ID); 

      l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
  end XXPRISM_ALL_INVENTORY_STATUS; 
  
  
  FUNCTION XXPRISM_TRADE_RECEIVABLES(P_PROJ_NAME IN VARCHAR2,
   P_CUST_NUMB IN VARCHAR2,
   P_UNIT_NUMBER IN VARCHAR2,
   P_DATE IN STRING
   ) 
  RETURN CLOB 
  IS 
    l_query_ref SYS_REFCURSOR; 
    l_handle    dbms_xmlgen.ctxhandle; 
    l_data_xml  CLOB; 
  BEGIN 
      dbms_output.Put_line(P_PROJ_NAME); 
	  dbms_output.Put_line(P_CUST_NUMB);
	  dbms_output.Put_line(P_UNIT_NUMBER);
	  dbms_output.Put_line(P_DATE);

      OPEN l_query_ref FOR 
	  
	  
	  SELECT XP.PROJECT_NAME,
  XBH.BOOKING_NUMBER,
  XLV.LOOKUP_VALUE_NAME_DISP COMPANY_NAME,
  XLV.LOOKUP_ADDL_VALUE COMPANY_NUMB,
  XPU.UNIT_NAME,
  XPU.UNIT_NUMBER,
  XC.CUSTOMER_NUMBER,
  XC.CUSTOMER_NAME,
  XPU.UNIT_TYPE,
  XPMO.ATTRIBUTE1 FIN_BY,
  XPMO.MORT_AMOUNT FIN_AMOUNT,
  SUM(NVL(MIL.INSTALLMENT_AMOUNT,0)) PRICE,
  SUM(NVL(BILLED.INV_AMOUNT,0)) BILLED_PRICE,
  CASE
    WHEN SUM(NVL(BILLED.INV_AMOUNT,0)) = 0
    THEN 0
    ELSE ((SUM(NVL(BILLED.INV_AMOUNT,0))) / (SUM(NVL(MIL.INSTALLMENT_AMOUNT,0))) * 100)
  END BILLED_PERC,
  SUM(NVL(COLLECTED.RECEIVED_AMOUNT,0)) COLLECTED_PRICE,
  CASE
    WHEN SUM(NVL(COLLECTED.RECEIVED_AMOUNT,0)) = 0
    THEN 0
    ELSE ((SUM(NVL(COLLECTED.RECEIVED_AMOUNT,0))) / (SUM(NVL(MIL.INSTALLMENT_AMOUNT,0))) * 100)
  END COLLECTED_PERC,
  SUM(NVL(BILLED.INV_AMOUNT,0)) - SUM(NVL(COLLECTED.RECEIVED_AMOUNT,0)) OUTSTANDING_AMT
FROM XXPM_BOOKING_HEADER XBH,
  XXPM_BOOKING_MILESTONES XBM,
  XXPM_BOOKING_DETAIL XBD,
  XXPM_BOOKING_CUSTOMER XBC,
  XXPM_PROPERTY_MASTER XPM,
  XXPM_PROPERTY_UNITS XPU,
  XXPM_PROPERTY_AREA XPA,
  XXPM_PROPERTY_MORTGAGE XPMO,
  XXSTG_PROJECTS XP,
  XXPM_MILESTONE_DTL XMD,
  XXSTG_CUSTOMER XC,
  XXFND_LOOKUP_VALUES XLV,
  (SELECT BOOKING_HDR_ID,
    BOOKING_MS_DTL_ID,
    INSTALLMENT_AMOUNT
  FROM XXPM_BOOKING_MILESTONES
  WHERE MILESTONE_TYPE IN ('Charge', 'MS', 'Fix')
  ) MIL,
  (SELECT XBM1.BOOKING_HDR_ID ,
    XBM1.BOOKING_MS_DTL_ID ,
    NVL(XBM1.INSTALLMENT_AMOUNT,0) INSTALLMENT_AMOUNT,
    (NVL(XIL.AMOUNT,0) + NVL(XIL.TAX_AMOUNT,0)) INV_AMOUNT
  FROM XXPM_BOOKING_MILESTONES XBM1 ,
    XXPM_INVOICE_HEADER XIH1 ,
    XXPM_INVOICE_LINES XIL
  WHERE 1               = 1
  AND XBM1.INVOICE_ID   = XIH1.INVOICE_ID
  AND XIH1.INVOICE_ID   = XIL.INVOICE_ID(+)
  AND XBM1.INVOICE_ID  IS NOT NULL
  AND XIH1.INVOICE_DATE <= P_DATE
  ) BILLED,
  (SELECT XBM2.BOOKING_HDR_ID ,
    XBM2.BOOKING_MS_DTL_ID ,
    NVL(XBM2.INSTALLMENT_AMOUNT,0) INSTALLMENT_AMOUNT,
    XPR.RECEIVED_AMOUNT
  FROM XXPM_BOOKING_MILESTONES XBM2 ,
    XXPM_INVOICE_HEADER XIH2 ,
    XXPM_RECEIPT_DETAILS XRD,
    XXPM_RECEIPT XPR
  WHERE 1               = 1
  AND XBM2.INVOICE_ID   = XIH2.INVOICE_ID
  AND XIH2.INVOICE_ID   = XRD.INVOICE_ID(+)
  AND XRD.RECEIPT_ID    = XPR.RECEIPT_ID(+)
  AND XBM2.INVOICE_ID  IS NOT NULL
  AND XPR.RECEIPT_DATE <= P_DATE
  ) COLLECTED
WHERE XBH.BOOKING_HDR_ID  = XBM.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID    = XBD.BOOKING_HDR_ID
AND XBH.BOOKING_HDR_ID    = XBC.BOOKING_HDR_ID
AND XBD.UNIT_ID           = XPU.UNIT_ID
AND XBH.PROPERTY_ID       = XPM.PROPERTY_ID
AND XPU.UNIT_ID           = XPA.UNIT_ID
AND XBH.BOOKING_HDR_ID    = XPMO.BOOKING_HDR_ID(+)
AND XPM.PROJECT_ID        = XP.PROJ_ID
AND XPM.ORG_ID            = XP.ORG_ID
AND XBC.CUST_ID           = XC.CUST_ID
AND XBM.MS_DTL_ID         = XMD.MS_DTL_ID(+)
AND XBM.BOOKING_MS_DTL_ID = MIL.BOOKING_MS_DTL_ID (+)
AND XBH.BOOKING_HDR_ID    = MIL.BOOKING_HDR_ID (+)
AND XBM.BOOKING_MS_DTL_ID = BILLED.BOOKING_MS_DTL_ID (+)
AND XBH.BOOKING_HDR_ID    = BILLED.BOOKING_HDR_ID (+)
AND XBM.BOOKING_MS_DTL_ID = COLLECTED.BOOKING_MS_DTL_ID (+)
AND XBH.BOOKING_HDR_ID    = COLLECTED.BOOKING_HDR_ID (+)
AND XP.PROJECT_NAME       = XLV.LOOKUP_VALUE_NAME(+)
AND XBH.USAGE             = 'S'
AND XBH.STATUS            = 'APR'
AND XBC.PRIMARY_YN        = 'Y'
AND XPM.PROJECT_ID        = NVL(P_PROJ_NAME , XPM.PROJECT_ID)
AND XBC.CUST_ID           = NVL(P_CUST_NUMB , XBC.CUST_ID)
AND XBD.UNIT_ID           = NVL(P_UNIT_NUMBER , XBD.UNIT_ID)
AND XBH.BOOKING_DATE     <= P_DATE
GROUP BY XP.PROJECT_NAME,
  XBH.BOOKING_NUMBER,
  XLV.LOOKUP_VALUE_NAME_DISP,
  XLV.LOOKUP_ADDL_VALUE,
  XPU.UNIT_NAME,
  XPU.UNIT_NUMBER,
  XC.CUSTOMER_NUMBER,
  XC.CUSTOMER_NAME,
  XPU.UNIT_TYPE,
  XPMO.ATTRIBUTE1,
  XPMO.MORT_AMOUNT;
  
  
   l_handle := dbms_xmlgen.Newcontext (l_query_ref); 

      dbms_xmlgen.Setrowsettag (l_handle, 'PC'); 

      dbms_xmlgen.Setrowtag (l_handle, 'PC_HEAD'); 

      dbms_xmlgen.Setnullhandling (l_handle, dbms_xmlgen.empty_tag); 

      l_data_xml := dbms_xmlgen.Getxml (l_handle); 

      RETURN ( l_data_xml ); 
  EXCEPTION 
    WHEN OTHERS THEN 
               RETURN ( NULL ); 
			   
  end XXPRISM_TRADE_RECEIVABLES; 
  
END XXPRISM_REPORT_PKG;
